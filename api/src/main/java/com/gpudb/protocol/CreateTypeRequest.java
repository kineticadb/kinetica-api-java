/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link com.gpudb.GPUdb#createType(CreateTypeRequest)
 * GPUdb.createType}.
 * <p>
 * Creates a new type describing the columns of a table. The type definition is
 * specified as a list of columns, each specified as a list of the column name,
 * data type, and any column attributes.
 * <p>
 * Example of a type definition with some parameters:
 * <pre>
 *
 *     [
 *         ["id", "int8", "primary_key"],
 *         ["dept_id", "int8", "primary_key", "shard_key"],
 *         ["manager_id", "int8", "nullable"],
 *         ["first_name", "char32"],
 *         ["last_name", "char64"],
 *         ["salary", "decimal"],
 *         ["hire_date", "date"]
 *     ]
 * </pre>
 * Each column definition consists of the column name (which should meet the
 * standard <a href="../../../../../../concepts/tables/#table-naming-criteria"
 * target="_top">column naming criteria</a>), the column's <a
 * href="../../../../../../concepts/types/#types-chart" target="_top">specific
 * type</a> (int, long, float, double, string, bytes, or any of the possible
 * values for {@link #getProperties() properties}), and any <a
 * href="../../../../../../concepts/types/#types-data-handling"
 * target="_top">data handling</a>, <a
 * href="../../../../../../concepts/types/#types-data-keys" target="_top">data
 * key</a>, or <a href="../../../../../../concepts/types/#types-data-replace"
 * target="_top">data replacement</a> properties.
 * <p>
 * Note that some properties are mutually exclusive--i.e. they cannot be
 * specified for any given column simultaneously.  One example of mutually
 * exclusive properties are {@link Properties#PRIMARY_KEY PRIMARY_KEY} and
 * {@link Properties#NULLABLE NULLABLE}.
 * <p>
 * A single <a href="../../../../../../concepts/tables/#primary-keys"
 * target="_top">primary key</a> and/or single <a
 * href="../../../../../../concepts/tables/#shard-keys" target="_top">shard
 * key</a> can be set across one or more columns. If a primary key is
 * specified, then a uniqueness constraint is enforced, in that only a single
 * object can exist with a given primary key column value (or set of values for
 * the key columns, if using a composite primary key). When {@link
 * com.gpudb.GPUdb#insertRecords(InsertRecordsRequest) inserting} data into a
 * table with a primary key, depending on the parameters in the request,
 * incoming objects with primary key values that match existing objects will
 * either overwrite (i.e. update) the existing object or will be skipped and
 * not added into the set.
 */
public class CreateTypeRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTypeRequest")
            .namespace("com.gpudb")
            .fields()
                .name("typeDefinition").type().stringType().noDefault()
                .name("label").type().stringType().noDefault()
                .name("properties").type().map().values().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateTypeRequest} parameter
     * {@link #getProperties() properties}.
     * <p>
     * [DEPRECATED--please use these property values in the {@link
     * #getTypeDefinition() typeDefinition} directly, as described at the top,
     * instead]  Each key-value pair specifies the properties to use for a
     * given column where the key is the column name.  All keys used must be
     * relevant column names for the given table.  Specifying any property
     * overrides the default properties for that column (which is based on the
     * column's data type).
     */
    public static final class Properties {
        /**
         * Default property for all numeric and string type columns; makes the
         * column available for GPU queries.
         */
        public static final String DATA = "data";

        /**
         * Valid only for select 'string' columns. Enables full text
         * search--see <a href="../../../../../../concepts/full_text_search/"
         * target="_top">Full Text Search</a> for details and applicable string
         * column types.
         */
        public static final String TEXT_SEARCH = "text_search";

        /**
         * Valid only for 'long' columns. Indicates that this field represents
         * a timestamp and will be provided in milliseconds since the Unix
         * epoch: 00:00:00 Jan 1 1970.  Dates represented by a timestamp must
         * fall between the year 1000 and the year 2900.
         */
        public static final String TIMESTAMP = "timestamp";

        /**
         * Valid only for 'string' columns.  It represents an unsigned long
         * integer data type. The string can only be interpreted as an unsigned
         * long data type with minimum value of zero, and maximum value of
         * 18446744073709551615.
         */
        public static final String ULONG = "ulong";

        /**
         * Valid only for 'string' columns.  It represents an uuid data type.
         * Internally, it is stored as a 128-bit integer.
         */
        public static final String UUID = "uuid";

        /**
         * Valid only for 'string' columns.  It represents a SQL type
         * NUMERIC(19, 4) data type.  There can be up to 15 digits before the
         * decimal point and up to four digits in the fractional part.  The
         * value can be positive or negative (indicated by a minus sign at the
         * beginning).  This property is mutually exclusive with the {@link
         * Properties#TEXT_SEARCH TEXT_SEARCH} property.
         */
        public static final String DECIMAL = "decimal";

        /**
         * Valid only for 'string' columns.  Indicates that this field
         * represents a date and will be provided in the format 'YYYY-MM-DD'.
         * The allowable range is 1000-01-01 through 2900-01-01.  This property
         * is mutually exclusive with the {@link Properties#TEXT_SEARCH
         * TEXT_SEARCH} property.
         */
        public static final String DATE = "date";

        /**
         * Valid only for 'string' columns.  Indicates that this field
         * represents a time-of-day and will be provided in the format
         * 'HH:MM:SS.mmm'.  The allowable range is 00:00:00.000 through
         * 23:59:59.999.  This property is mutually exclusive with the {@link
         * Properties#TEXT_SEARCH TEXT_SEARCH} property.
         */
        public static final String TIME = "time";

        /**
         * Valid only for 'string' columns.  Indicates that this field
         * represents a datetime and will be provided in the format 'YYYY-MM-DD
         * HH:MM:SS.mmm'.  The allowable range is 1000-01-01 00:00:00.000
         * through 2900-01-01 23:59:59.999.  This property is mutually
         * exclusive with the {@link Properties#TEXT_SEARCH TEXT_SEARCH}
         * property.
         */
        public static final String DATETIME = "datetime";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 1 character.
         */
        public static final String CHAR1 = "char1";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 2 characters.
         */
        public static final String CHAR2 = "char2";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 4 characters.
         */
        public static final String CHAR4 = "char4";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 8 characters.
         */
        public static final String CHAR8 = "char8";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 16 characters.
         */
        public static final String CHAR16 = "char16";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 32 characters.
         */
        public static final String CHAR32 = "char32";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 64 characters.
         */
        public static final String CHAR64 = "char64";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 128 characters.
         */
        public static final String CHAR128 = "char128";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns. Strings with this property must be no longer
         * than 256 characters.
         */
        public static final String CHAR256 = "char256";

        /**
         * This property provides optimized memory and query performance for
         * int columns. Ints with this property must be between 0 and
         * 1(inclusive)
         */
        public static final String BOOLEAN = "boolean";

        /**
         * This property provides optimized memory and query performance for
         * int columns. Ints with this property must be between -128 and +127
         * (inclusive)
         */
        public static final String INT8 = "int8";

        /**
         * This property provides optimized memory and query performance for
         * int columns. Ints with this property must be between -32768 and
         * +32767 (inclusive)
         */
        public static final String INT16 = "int16";

        /**
         * This property provides optimized memory, disk and query performance
         * for string columns representing IPv4 addresses
         * (i.e.&nbsp;192.168.1.1). Strings with this property must be of the
         * form: A.B.C.D where A, B, C and D are in the range of 0-255.
         */
        public static final String IPV4 = "ipv4";

        /**
         * Valid only for 'string' columns. Indicates that this field contains
         * an array.  The value type and (optionally) the item count should be
         * specified in parenthesis; e.g., 'array(int, 10)' for a 10-integer
         * array.  Both 'array(int)' and 'array(int, -1)' will designate an
         * unlimited-length integer array, though no bounds checking is
         * performed on arrays of any length.
         */
        public static final String ARRAY = "array";

        /**
         * Valid only for 'string' columns. Indicates that this field contains
         * values in JSON format.
         */
        public static final String JSON = "json";

        /**
         * Valid only for 'bytes' columns. Indicates that this field contains a
         * vector of floats.  The length should be specified in parenthesis,
         * e.g., 'vector(1000)'.
         */
        public static final String VECTOR = "vector";

        /**
         * Valid only for 'string' and 'bytes' columns. Indicates that this
         * field contains geospatial geometry objects in Well-Known Text (WKT)
         * or Well-Known Binary (WKB) format.
         */
        public static final String WKT = "wkt";

        /**
         * This property indicates that this column will be part of (or the
         * entire) <a href="../../../../../../concepts/tables/#primary-keys"
         * target="_top">primary key</a>.
         */
        public static final String PRIMARY_KEY = "primary_key";

        /**
         * This property indicates that this column will be part of (or the
         * entire) <a
         * href="../../../../../../concepts/tables/#soft-primary-keys"
         * target="_top">soft primary key</a>.
         */
        public static final String SOFT_PRIMARY_KEY = "soft_primary_key";

        /**
         * This property indicates that this column will be part of (or the
         * entire) <a href="../../../../../../concepts/tables/#shard-keys"
         * target="_top">shard key</a>.
         */
        public static final String SHARD_KEY = "shard_key";

        /**
         * This property indicates that this column is nullable.  However,
         * setting this property is insufficient for making the column
         * nullable.  The user must declare the type of the column as a union
         * between its regular type and 'null' in the Avro schema for the
         * record type in {@link #getTypeDefinition() typeDefinition}.  For
         * example, if a column is of type integer and is nullable, then the
         * entry for the column in the Avro schema must be: ['int', 'null'].
         * <p>
         * The C++, C#, Java, and Python APIs have built-in convenience for
         * bypassing setting the Avro schema by hand.  For those languages, one
         * can use this property as usual and not have to worry about the Avro
         * schema for the record.
         */
        public static final String NULLABLE = "nullable";

        /**
         * This property indicates that this column should be <a
         * href="../../../../../../concepts/column_compression/"
         * target="_top">compressed</a> with the given codec and optional
         * level; e.g., 'compress(snappy)' for Snappy compression and
         * 'compress(zstd(7))' for zstd level 7 compression.  This property is
         * primarily used in order to save disk space.
         */
        public static final String COMPRESS = "compress";

        /**
         * This property indicates that this column should be <a
         * href="../../../../../../concepts/dictionary_encoding/"
         * target="_top">dictionary encoded</a>. It can only be used in
         * conjunction with restricted string (charN), int, long or date
         * columns. Dictionary encoding is best for columns where the
         * cardinality (the number of unique values) is expected to be low.
         * This property can save a large amount of memory.
         */
        public static final String DICT = "dict";

        /**
         * For 'date', 'time', 'datetime', or 'timestamp' column types, replace
         * empty strings and invalid timestamps with 'NOW()' upon insert.
         */
        public static final String INIT_WITH_NOW = "init_with_now";

        /**
         * For 'uuid' type, replace empty strings and invalid UUID values with
         * randomly-generated UUIDs upon insert.
         */
        public static final String INIT_WITH_UUID = "init_with_uuid";

        /**
         * For 'date', 'time', 'datetime', or 'timestamp' column types, always
         * update the field with 'NOW()' upon any update.
         */
        public static final String UPDATE_WITH_NOW = "update_with_now";

        private Properties() {  }
    }

    /**
     * A set of string constants for the {@link CreateTypeRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * The default <a href="../../../../../../concepts/column_compression/"
         * target="_top">compression codec</a> for this type's columns.
         */
        public static final String COMPRESSION_CODEC = "compression_codec";

        private Options() {  }
    }

    private String typeDefinition;
    private String label;
    private Map<String, List<String>> properties;
    private Map<String, String> options;

    /**
     * Constructs a CreateTypeRequest object with default parameters.
     */
    public CreateTypeRequest() {
        typeDefinition = "";
        label = "";
        properties = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateTypeRequest object with the specified parameters.
     *
     * @param typeDefinition  a JSON string describing the columns of the type
     *                        to be registered, as described above.
     * @param label  A user-defined description string which can be used to
     *               differentiate between tables and types with otherwise
     *               identical schemas.
     * @param properties  [DEPRECATED--please use these property values in the
     *                    {@code typeDefinition} directly, as described at the
     *                    top, instead]  Each key-value pair specifies the
     *                    properties to use for a given column where the key is
     *                    the column name.  All keys used must be relevant
     *                    column names for the given table.  Specifying any
     *                    property overrides the default properties for that
     *                    column (which is based on the column's data type).
     *                    Valid values are:
     *                    <ul>
     *                        <li>{@link Properties#DATA DATA}: Default
     *                            property for all numeric and string type
     *                            columns; makes the column available for GPU
     *                            queries.
     *                        <li>{@link Properties#TEXT_SEARCH TEXT_SEARCH}:
     *                            Valid only for select 'string' columns.
     *                            Enables full text search--see <a
     *                            href="../../../../../../concepts/full_text_search/"
     *                            target="_top">Full Text Search</a> for
     *                            details and applicable string column types.
     *                        <li>{@link Properties#TIMESTAMP TIMESTAMP}: Valid
     *                            only for 'long' columns. Indicates that this
     *                            field represents a timestamp and will be
     *                            provided in milliseconds since the Unix
     *                            epoch: 00:00:00 Jan 1 1970.  Dates
     *                            represented by a timestamp must fall between
     *                            the year 1000 and the year 2900.
     *                        <li>{@link Properties#ULONG ULONG}: Valid only
     *                            for 'string' columns.  It represents an
     *                            unsigned long integer data type. The string
     *                            can only be interpreted as an unsigned long
     *                            data type with minimum value of zero, and
     *                            maximum value of 18446744073709551615.
     *                        <li>{@link Properties#UUID UUID}: Valid only for
     *                            'string' columns.  It represents an uuid data
     *                            type. Internally, it is stored as a 128-bit
     *                            integer.
     *                        <li>{@link Properties#DECIMAL DECIMAL}: Valid
     *                            only for 'string' columns.  It represents a
     *                            SQL type NUMERIC(19, 4) data type.  There can
     *                            be up to 15 digits before the decimal point
     *                            and up to four digits in the fractional part.
     *                            The value can be positive or negative
     *                            (indicated by a minus sign at the beginning).
     *                            This property is mutually exclusive with the
     *                            {@link Properties#TEXT_SEARCH TEXT_SEARCH}
     *                            property.
     *                        <li>{@link Properties#DATE DATE}: Valid only for
     *                            'string' columns.  Indicates that this field
     *                            represents a date and will be provided in the
     *                            format 'YYYY-MM-DD'.  The allowable range is
     *                            1000-01-01 through 2900-01-01.  This property
     *                            is mutually exclusive with the {@link
     *                            Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *                        <li>{@link Properties#TIME TIME}: Valid only for
     *                            'string' columns.  Indicates that this field
     *                            represents a time-of-day and will be provided
     *                            in the format 'HH:MM:SS.mmm'.  The allowable
     *                            range is 00:00:00.000 through 23:59:59.999.
     *                            This property is mutually exclusive with the
     *                            {@link Properties#TEXT_SEARCH TEXT_SEARCH}
     *                            property.
     *                        <li>{@link Properties#DATETIME DATETIME}: Valid
     *                            only for 'string' columns.  Indicates that
     *                            this field represents a datetime and will be
     *                            provided in the format 'YYYY-MM-DD
     *                            HH:MM:SS.mmm'.  The allowable range is
     *                            1000-01-01 00:00:00.000 through 2900-01-01
     *                            23:59:59.999.  This property is mutually
     *                            exclusive with the {@link
     *                            Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *                        <li>{@link Properties#CHAR1 CHAR1}: This property
     *                            provides optimized memory, disk and query
     *                            performance for string columns. Strings with
     *                            this property must be no longer than 1
     *                            character.
     *                        <li>{@link Properties#CHAR2 CHAR2}: This property
     *                            provides optimized memory, disk and query
     *                            performance for string columns. Strings with
     *                            this property must be no longer than 2
     *                            characters.
     *                        <li>{@link Properties#CHAR4 CHAR4}: This property
     *                            provides optimized memory, disk and query
     *                            performance for string columns. Strings with
     *                            this property must be no longer than 4
     *                            characters.
     *                        <li>{@link Properties#CHAR8 CHAR8}: This property
     *                            provides optimized memory, disk and query
     *                            performance for string columns. Strings with
     *                            this property must be no longer than 8
     *                            characters.
     *                        <li>{@link Properties#CHAR16 CHAR16}: This
     *                            property provides optimized memory, disk and
     *                            query performance for string columns. Strings
     *                            with this property must be no longer than 16
     *                            characters.
     *                        <li>{@link Properties#CHAR32 CHAR32}: This
     *                            property provides optimized memory, disk and
     *                            query performance for string columns. Strings
     *                            with this property must be no longer than 32
     *                            characters.
     *                        <li>{@link Properties#CHAR64 CHAR64}: This
     *                            property provides optimized memory, disk and
     *                            query performance for string columns. Strings
     *                            with this property must be no longer than 64
     *                            characters.
     *                        <li>{@link Properties#CHAR128 CHAR128}: This
     *                            property provides optimized memory, disk and
     *                            query performance for string columns. Strings
     *                            with this property must be no longer than 128
     *                            characters.
     *                        <li>{@link Properties#CHAR256 CHAR256}: This
     *                            property provides optimized memory, disk and
     *                            query performance for string columns. Strings
     *                            with this property must be no longer than 256
     *                            characters.
     *                        <li>{@link Properties#BOOLEAN BOOLEAN}: This
     *                            property provides optimized memory and query
     *                            performance for int columns. Ints with this
     *                            property must be between 0 and 1(inclusive)
     *                        <li>{@link Properties#INT8 INT8}: This property
     *                            provides optimized memory and query
     *                            performance for int columns. Ints with this
     *                            property must be between -128 and +127
     *                            (inclusive)
     *                        <li>{@link Properties#INT16 INT16}: This property
     *                            provides optimized memory and query
     *                            performance for int columns. Ints with this
     *                            property must be between -32768 and +32767
     *                            (inclusive)
     *                        <li>{@link Properties#IPV4 IPV4}: This property
     *                            provides optimized memory, disk and query
     *                            performance for string columns representing
     *                            IPv4 addresses (i.e. 192.168.1.1). Strings
     *                            with this property must be of the form:
     *                            A.B.C.D where A, B, C and D are in the range
     *                            of 0-255.
     *                        <li>{@link Properties#ARRAY ARRAY}: Valid only
     *                            for 'string' columns. Indicates that this
     *                            field contains an array.  The value type and
     *                            (optionally) the item count should be
     *                            specified in parenthesis; e.g., 'array(int,
     *                            10)' for a 10-integer array.  Both
     *                            'array(int)' and 'array(int, -1)' will
     *                            designate an unlimited-length integer array,
     *                            though no bounds checking is performed on
     *                            arrays of any length.
     *                        <li>{@link Properties#JSON JSON}: Valid only for
     *                            'string' columns. Indicates that this field
     *                            contains values in JSON format.
     *                        <li>{@link Properties#VECTOR VECTOR}: Valid only
     *                            for 'bytes' columns. Indicates that this
     *                            field contains a vector of floats.  The
     *                            length should be specified in parenthesis,
     *                            e.g., 'vector(1000)'.
     *                        <li>{@link Properties#WKT WKT}: Valid only for
     *                            'string' and 'bytes' columns. Indicates that
     *                            this field contains geospatial geometry
     *                            objects in Well-Known Text (WKT) or
     *                            Well-Known Binary (WKB) format.
     *                        <li>{@link Properties#PRIMARY_KEY PRIMARY_KEY}:
     *                            This property indicates that this column will
     *                            be part of (or the entire) <a
     *                            href="../../../../../../concepts/tables/#primary-keys"
     *                            target="_top">primary key</a>.
     *                        <li>{@link Properties#SOFT_PRIMARY_KEY
     *                            SOFT_PRIMARY_KEY}: This property indicates
     *                            that this column will be part of (or the
     *                            entire) <a
     *                            href="../../../../../../concepts/tables/#soft-primary-keys"
     *                            target="_top">soft primary key</a>.
     *                        <li>{@link Properties#SHARD_KEY SHARD_KEY}: This
     *                            property indicates that this column will be
     *                            part of (or the entire) <a
     *                            href="../../../../../../concepts/tables/#shard-keys"
     *                            target="_top">shard key</a>.
     *                        <li>{@link Properties#NULLABLE NULLABLE}: This
     *                            property indicates that this column is
     *                            nullable.  However, setting this property is
     *                            insufficient for making the column nullable.
     *                            The user must declare the type of the column
     *                            as a union between its regular type and
     *                            'null' in the Avro schema for the record type
     *                            in {@code typeDefinition}.  For example, if a
     *                            column is of type integer and is nullable,
     *                            then the entry for the column in the Avro
     *                            schema must be: ['int', 'null'].  The C++,
     *                            C#, Java, and Python APIs have built-in
     *                            convenience for bypassing setting the Avro
     *                            schema by hand.  For those languages, one can
     *                            use this property as usual and not have to
     *                            worry about the Avro schema for the record.
     *                        <li>{@link Properties#COMPRESS COMPRESS}: This
     *                            property indicates that this column should be
     *                            <a
     *                            href="../../../../../../concepts/column_compression/"
     *                            target="_top">compressed</a> with the given
     *                            codec and optional level; e.g.,
     *                            'compress(snappy)' for Snappy compression and
     *                            'compress(zstd(7))' for zstd level 7
     *                            compression.  This property is primarily used
     *                            in order to save disk space.
     *                        <li>{@link Properties#DICT DICT}: This property
     *                            indicates that this column should be <a
     *                            href="../../../../../../concepts/dictionary_encoding/"
     *                            target="_top">dictionary encoded</a>. It can
     *                            only be used in conjunction with restricted
     *                            string (charN), int, long or date columns.
     *                            Dictionary encoding is best for columns where
     *                            the cardinality (the number of unique values)
     *                            is expected to be low. This property can save
     *                            a large amount of memory.
     *                        <li>{@link Properties#INIT_WITH_NOW
     *                            INIT_WITH_NOW}: For 'date', 'time',
     *                            'datetime', or 'timestamp' column types,
     *                            replace empty strings and invalid timestamps
     *                            with 'NOW()' upon insert.
     *                        <li>{@link Properties#INIT_WITH_UUID
     *                            INIT_WITH_UUID}: For 'uuid' type, replace
     *                            empty strings and invalid UUID values with
     *                            randomly-generated UUIDs upon insert.
     *                        <li>{@link Properties#UPDATE_WITH_NOW
     *                            UPDATE_WITH_NOW}: For 'date', 'time',
     *                            'datetime', or 'timestamp' column types,
     *                            always update the field with 'NOW()' upon any
     *                            update.
     *                    </ul>
     *                    The default value is an empty {@link Map}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COMPRESSION_CODEC
     *                         COMPRESSION_CODEC}: The default <a
     *                         href="../../../../../../concepts/column_compression/"
     *                         target="_top">compression codec</a> for this
     *                         type's columns.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateTypeRequest(String typeDefinition, String label, Map<String, List<String>> properties, Map<String, String> options) {
        this.typeDefinition = (typeDefinition == null) ? "" : typeDefinition;
        this.label = (label == null) ? "" : label;
        this.properties = (properties == null) ? new LinkedHashMap<String, List<String>>() : properties;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * a JSON string describing the columns of the type to be registered, as
     * described above.
     *
     * @return The current value of {@code typeDefinition}.
     */
    public String getTypeDefinition() {
        return typeDefinition;
    }

    /**
     * a JSON string describing the columns of the type to be registered, as
     * described above.
     *
     * @param typeDefinition  The new value for {@code typeDefinition}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTypeRequest setTypeDefinition(String typeDefinition) {
        this.typeDefinition = (typeDefinition == null) ? "" : typeDefinition;
        return this;
    }

    /**
     * A user-defined description string which can be used to differentiate
     * between tables and types with otherwise identical schemas.
     *
     * @return The current value of {@code label}.
     */
    public String getLabel() {
        return label;
    }

    /**
     * A user-defined description string which can be used to differentiate
     * between tables and types with otherwise identical schemas.
     *
     * @param label  The new value for {@code label}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTypeRequest setLabel(String label) {
        this.label = (label == null) ? "" : label;
        return this;
    }

    /**
     * [DEPRECATED--please use these property values in the {@link
     * #getTypeDefinition() typeDefinition} directly, as described at the top,
     * instead]  Each key-value pair specifies the properties to use for a
     * given column where the key is the column name.  All keys used must be
     * relevant column names for the given table.  Specifying any property
     * overrides the default properties for that column (which is based on the
     * column's data type).
     * Valid values are:
     * <ul>
     *     <li>{@link Properties#DATA DATA}: Default property for all numeric
     *         and string type columns; makes the column available for GPU
     *         queries.
     *     <li>{@link Properties#TEXT_SEARCH TEXT_SEARCH}: Valid only for
     *         select 'string' columns. Enables full text search--see <a
     *         href="../../../../../../concepts/full_text_search/"
     *         target="_top">Full Text Search</a> for details and applicable
     *         string column types.
     *     <li>{@link Properties#TIMESTAMP TIMESTAMP}: Valid only for 'long'
     *         columns. Indicates that this field represents a timestamp and
     *         will be provided in milliseconds since the Unix epoch: 00:00:00
     *         Jan 1 1970.  Dates represented by a timestamp must fall between
     *         the year 1000 and the year 2900.
     *     <li>{@link Properties#ULONG ULONG}: Valid only for 'string' columns.
     *         It represents an unsigned long integer data type. The string can
     *         only be interpreted as an unsigned long data type with minimum
     *         value of zero, and maximum value of 18446744073709551615.
     *     <li>{@link Properties#UUID UUID}: Valid only for 'string' columns.
     *         It represents an uuid data type. Internally, it is stored as a
     *         128-bit integer.
     *     <li>{@link Properties#DECIMAL DECIMAL}: Valid only for 'string'
     *         columns.  It represents a SQL type NUMERIC(19, 4) data type.
     *         There can be up to 15 digits before the decimal point and up to
     *         four digits in the fractional part.  The value can be positive
     *         or negative (indicated by a minus sign at the beginning).  This
     *         property is mutually exclusive with the {@link
     *         Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#DATE DATE}: Valid only for 'string' columns.
     *         Indicates that this field represents a date and will be provided
     *         in the format 'YYYY-MM-DD'.  The allowable range is 1000-01-01
     *         through 2900-01-01.  This property is mutually exclusive with
     *         the {@link Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#TIME TIME}: Valid only for 'string' columns.
     *         Indicates that this field represents a time-of-day and will be
     *         provided in the format 'HH:MM:SS.mmm'.  The allowable range is
     *         00:00:00.000 through 23:59:59.999.  This property is mutually
     *         exclusive with the {@link Properties#TEXT_SEARCH TEXT_SEARCH}
     *         property.
     *     <li>{@link Properties#DATETIME DATETIME}: Valid only for 'string'
     *         columns.  Indicates that this field represents a datetime and
     *         will be provided in the format 'YYYY-MM-DD HH:MM:SS.mmm'.  The
     *         allowable range is 1000-01-01 00:00:00.000 through 2900-01-01
     *         23:59:59.999.  This property is mutually exclusive with the
     *         {@link Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#CHAR1 CHAR1}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 1 character.
     *     <li>{@link Properties#CHAR2 CHAR2}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 2 characters.
     *     <li>{@link Properties#CHAR4 CHAR4}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 4 characters.
     *     <li>{@link Properties#CHAR8 CHAR8}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 8 characters.
     *     <li>{@link Properties#CHAR16 CHAR16}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 16 characters.
     *     <li>{@link Properties#CHAR32 CHAR32}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 32 characters.
     *     <li>{@link Properties#CHAR64 CHAR64}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 64 characters.
     *     <li>{@link Properties#CHAR128 CHAR128}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 128
     *         characters.
     *     <li>{@link Properties#CHAR256 CHAR256}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 256
     *         characters.
     *     <li>{@link Properties#BOOLEAN BOOLEAN}: This property provides
     *         optimized memory and query performance for int columns. Ints
     *         with this property must be between 0 and 1(inclusive)
     *     <li>{@link Properties#INT8 INT8}: This property provides optimized
     *         memory and query performance for int columns. Ints with this
     *         property must be between -128 and +127 (inclusive)
     *     <li>{@link Properties#INT16 INT16}: This property provides optimized
     *         memory and query performance for int columns. Ints with this
     *         property must be between -32768 and +32767 (inclusive)
     *     <li>{@link Properties#IPV4 IPV4}: This property provides optimized
     *         memory, disk and query performance for string columns
     *         representing IPv4 addresses (i.e. 192.168.1.1). Strings with
     *         this property must be of the form: A.B.C.D where A, B, C and D
     *         are in the range of 0-255.
     *     <li>{@link Properties#ARRAY ARRAY}: Valid only for 'string' columns.
     *         Indicates that this field contains an array.  The value type and
     *         (optionally) the item count should be specified in parenthesis;
     *         e.g., 'array(int, 10)' for a 10-integer array.  Both
     *         'array(int)' and 'array(int, -1)' will designate an
     *         unlimited-length integer array, though no bounds checking is
     *         performed on arrays of any length.
     *     <li>{@link Properties#JSON JSON}: Valid only for 'string' columns.
     *         Indicates that this field contains values in JSON format.
     *     <li>{@link Properties#VECTOR VECTOR}: Valid only for 'bytes'
     *         columns. Indicates that this field contains a vector of floats.
     *         The length should be specified in parenthesis, e.g.,
     *         'vector(1000)'.
     *     <li>{@link Properties#WKT WKT}: Valid only for 'string' and 'bytes'
     *         columns. Indicates that this field contains geospatial geometry
     *         objects in Well-Known Text (WKT) or Well-Known Binary (WKB)
     *         format.
     *     <li>{@link Properties#PRIMARY_KEY PRIMARY_KEY}: This property
     *         indicates that this column will be part of (or the entire) <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>.
     *     <li>{@link Properties#SOFT_PRIMARY_KEY SOFT_PRIMARY_KEY}: This
     *         property indicates that this column will be part of (or the
     *         entire) <a
     *         href="../../../../../../concepts/tables/#soft-primary-keys"
     *         target="_top">soft primary key</a>.
     *     <li>{@link Properties#SHARD_KEY SHARD_KEY}: This property indicates
     *         that this column will be part of (or the entire) <a
     *         href="../../../../../../concepts/tables/#shard-keys"
     *         target="_top">shard key</a>.
     *     <li>{@link Properties#NULLABLE NULLABLE}: This property indicates
     *         that this column is nullable.  However, setting this property is
     *         insufficient for making the column nullable.  The user must
     *         declare the type of the column as a union between its regular
     *         type and 'null' in the Avro schema for the record type in {@link
     *         #getTypeDefinition() typeDefinition}.  For example, if a column
     *         is of type integer and is nullable, then the entry for the
     *         column in the Avro schema must be: ['int', 'null'].  The C++,
     *         C#, Java, and Python APIs have built-in convenience for
     *         bypassing setting the Avro schema by hand.  For those languages,
     *         one can use this property as usual and not have to worry about
     *         the Avro schema for the record.
     *     <li>{@link Properties#COMPRESS COMPRESS}: This property indicates
     *         that this column should be <a
     *         href="../../../../../../concepts/column_compression/"
     *         target="_top">compressed</a> with the given codec and optional
     *         level; e.g., 'compress(snappy)' for Snappy compression and
     *         'compress(zstd(7))' for zstd level 7 compression.  This property
     *         is primarily used in order to save disk space.
     *     <li>{@link Properties#DICT DICT}: This property indicates that this
     *         column should be <a
     *         href="../../../../../../concepts/dictionary_encoding/"
     *         target="_top">dictionary encoded</a>. It can only be used in
     *         conjunction with restricted string (charN), int, long or date
     *         columns. Dictionary encoding is best for columns where the
     *         cardinality (the number of unique values) is expected to be low.
     *         This property can save a large amount of memory.
     *     <li>{@link Properties#INIT_WITH_NOW INIT_WITH_NOW}: For 'date',
     *         'time', 'datetime', or 'timestamp' column types, replace empty
     *         strings and invalid timestamps with 'NOW()' upon insert.
     *     <li>{@link Properties#INIT_WITH_UUID INIT_WITH_UUID}: For 'uuid'
     *         type, replace empty strings and invalid UUID values with
     *         randomly-generated UUIDs upon insert.
     *     <li>{@link Properties#UPDATE_WITH_NOW UPDATE_WITH_NOW}: For 'date',
     *         'time', 'datetime', or 'timestamp' column types, always update
     *         the field with 'NOW()' upon any update.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code properties}.
     */
    public Map<String, List<String>> getProperties() {
        return properties;
    }

    /**
     * [DEPRECATED--please use these property values in the {@link
     * #getTypeDefinition() typeDefinition} directly, as described at the top,
     * instead]  Each key-value pair specifies the properties to use for a
     * given column where the key is the column name.  All keys used must be
     * relevant column names for the given table.  Specifying any property
     * overrides the default properties for that column (which is based on the
     * column's data type).
     * Valid values are:
     * <ul>
     *     <li>{@link Properties#DATA DATA}: Default property for all numeric
     *         and string type columns; makes the column available for GPU
     *         queries.
     *     <li>{@link Properties#TEXT_SEARCH TEXT_SEARCH}: Valid only for
     *         select 'string' columns. Enables full text search--see <a
     *         href="../../../../../../concepts/full_text_search/"
     *         target="_top">Full Text Search</a> for details and applicable
     *         string column types.
     *     <li>{@link Properties#TIMESTAMP TIMESTAMP}: Valid only for 'long'
     *         columns. Indicates that this field represents a timestamp and
     *         will be provided in milliseconds since the Unix epoch: 00:00:00
     *         Jan 1 1970.  Dates represented by a timestamp must fall between
     *         the year 1000 and the year 2900.
     *     <li>{@link Properties#ULONG ULONG}: Valid only for 'string' columns.
     *         It represents an unsigned long integer data type. The string can
     *         only be interpreted as an unsigned long data type with minimum
     *         value of zero, and maximum value of 18446744073709551615.
     *     <li>{@link Properties#UUID UUID}: Valid only for 'string' columns.
     *         It represents an uuid data type. Internally, it is stored as a
     *         128-bit integer.
     *     <li>{@link Properties#DECIMAL DECIMAL}: Valid only for 'string'
     *         columns.  It represents a SQL type NUMERIC(19, 4) data type.
     *         There can be up to 15 digits before the decimal point and up to
     *         four digits in the fractional part.  The value can be positive
     *         or negative (indicated by a minus sign at the beginning).  This
     *         property is mutually exclusive with the {@link
     *         Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#DATE DATE}: Valid only for 'string' columns.
     *         Indicates that this field represents a date and will be provided
     *         in the format 'YYYY-MM-DD'.  The allowable range is 1000-01-01
     *         through 2900-01-01.  This property is mutually exclusive with
     *         the {@link Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#TIME TIME}: Valid only for 'string' columns.
     *         Indicates that this field represents a time-of-day and will be
     *         provided in the format 'HH:MM:SS.mmm'.  The allowable range is
     *         00:00:00.000 through 23:59:59.999.  This property is mutually
     *         exclusive with the {@link Properties#TEXT_SEARCH TEXT_SEARCH}
     *         property.
     *     <li>{@link Properties#DATETIME DATETIME}: Valid only for 'string'
     *         columns.  Indicates that this field represents a datetime and
     *         will be provided in the format 'YYYY-MM-DD HH:MM:SS.mmm'.  The
     *         allowable range is 1000-01-01 00:00:00.000 through 2900-01-01
     *         23:59:59.999.  This property is mutually exclusive with the
     *         {@link Properties#TEXT_SEARCH TEXT_SEARCH} property.
     *     <li>{@link Properties#CHAR1 CHAR1}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 1 character.
     *     <li>{@link Properties#CHAR2 CHAR2}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 2 characters.
     *     <li>{@link Properties#CHAR4 CHAR4}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 4 characters.
     *     <li>{@link Properties#CHAR8 CHAR8}: This property provides optimized
     *         memory, disk and query performance for string columns. Strings
     *         with this property must be no longer than 8 characters.
     *     <li>{@link Properties#CHAR16 CHAR16}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 16 characters.
     *     <li>{@link Properties#CHAR32 CHAR32}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 32 characters.
     *     <li>{@link Properties#CHAR64 CHAR64}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 64 characters.
     *     <li>{@link Properties#CHAR128 CHAR128}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 128
     *         characters.
     *     <li>{@link Properties#CHAR256 CHAR256}: This property provides
     *         optimized memory, disk and query performance for string columns.
     *         Strings with this property must be no longer than 256
     *         characters.
     *     <li>{@link Properties#BOOLEAN BOOLEAN}: This property provides
     *         optimized memory and query performance for int columns. Ints
     *         with this property must be between 0 and 1(inclusive)
     *     <li>{@link Properties#INT8 INT8}: This property provides optimized
     *         memory and query performance for int columns. Ints with this
     *         property must be between -128 and +127 (inclusive)
     *     <li>{@link Properties#INT16 INT16}: This property provides optimized
     *         memory and query performance for int columns. Ints with this
     *         property must be between -32768 and +32767 (inclusive)
     *     <li>{@link Properties#IPV4 IPV4}: This property provides optimized
     *         memory, disk and query performance for string columns
     *         representing IPv4 addresses (i.e. 192.168.1.1). Strings with
     *         this property must be of the form: A.B.C.D where A, B, C and D
     *         are in the range of 0-255.
     *     <li>{@link Properties#ARRAY ARRAY}: Valid only for 'string' columns.
     *         Indicates that this field contains an array.  The value type and
     *         (optionally) the item count should be specified in parenthesis;
     *         e.g., 'array(int, 10)' for a 10-integer array.  Both
     *         'array(int)' and 'array(int, -1)' will designate an
     *         unlimited-length integer array, though no bounds checking is
     *         performed on arrays of any length.
     *     <li>{@link Properties#JSON JSON}: Valid only for 'string' columns.
     *         Indicates that this field contains values in JSON format.
     *     <li>{@link Properties#VECTOR VECTOR}: Valid only for 'bytes'
     *         columns. Indicates that this field contains a vector of floats.
     *         The length should be specified in parenthesis, e.g.,
     *         'vector(1000)'.
     *     <li>{@link Properties#WKT WKT}: Valid only for 'string' and 'bytes'
     *         columns. Indicates that this field contains geospatial geometry
     *         objects in Well-Known Text (WKT) or Well-Known Binary (WKB)
     *         format.
     *     <li>{@link Properties#PRIMARY_KEY PRIMARY_KEY}: This property
     *         indicates that this column will be part of (or the entire) <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>.
     *     <li>{@link Properties#SOFT_PRIMARY_KEY SOFT_PRIMARY_KEY}: This
     *         property indicates that this column will be part of (or the
     *         entire) <a
     *         href="../../../../../../concepts/tables/#soft-primary-keys"
     *         target="_top">soft primary key</a>.
     *     <li>{@link Properties#SHARD_KEY SHARD_KEY}: This property indicates
     *         that this column will be part of (or the entire) <a
     *         href="../../../../../../concepts/tables/#shard-keys"
     *         target="_top">shard key</a>.
     *     <li>{@link Properties#NULLABLE NULLABLE}: This property indicates
     *         that this column is nullable.  However, setting this property is
     *         insufficient for making the column nullable.  The user must
     *         declare the type of the column as a union between its regular
     *         type and 'null' in the Avro schema for the record type in {@link
     *         #getTypeDefinition() typeDefinition}.  For example, if a column
     *         is of type integer and is nullable, then the entry for the
     *         column in the Avro schema must be: ['int', 'null'].  The C++,
     *         C#, Java, and Python APIs have built-in convenience for
     *         bypassing setting the Avro schema by hand.  For those languages,
     *         one can use this property as usual and not have to worry about
     *         the Avro schema for the record.
     *     <li>{@link Properties#COMPRESS COMPRESS}: This property indicates
     *         that this column should be <a
     *         href="../../../../../../concepts/column_compression/"
     *         target="_top">compressed</a> with the given codec and optional
     *         level; e.g., 'compress(snappy)' for Snappy compression and
     *         'compress(zstd(7))' for zstd level 7 compression.  This property
     *         is primarily used in order to save disk space.
     *     <li>{@link Properties#DICT DICT}: This property indicates that this
     *         column should be <a
     *         href="../../../../../../concepts/dictionary_encoding/"
     *         target="_top">dictionary encoded</a>. It can only be used in
     *         conjunction with restricted string (charN), int, long or date
     *         columns. Dictionary encoding is best for columns where the
     *         cardinality (the number of unique values) is expected to be low.
     *         This property can save a large amount of memory.
     *     <li>{@link Properties#INIT_WITH_NOW INIT_WITH_NOW}: For 'date',
     *         'time', 'datetime', or 'timestamp' column types, replace empty
     *         strings and invalid timestamps with 'NOW()' upon insert.
     *     <li>{@link Properties#INIT_WITH_UUID INIT_WITH_UUID}: For 'uuid'
     *         type, replace empty strings and invalid UUID values with
     *         randomly-generated UUIDs upon insert.
     *     <li>{@link Properties#UPDATE_WITH_NOW UPDATE_WITH_NOW}: For 'date',
     *         'time', 'datetime', or 'timestamp' column types, always update
     *         the field with 'NOW()' upon any update.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param properties  The new value for {@code properties}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTypeRequest setProperties(Map<String, List<String>> properties) {
        this.properties = (properties == null) ? new LinkedHashMap<String, List<String>>() : properties;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for this type's columns.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for this type's columns.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTypeRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.typeDefinition;

            case 1:
                return this.label;

            case 2:
                return this.properties;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.typeDefinition = (String)value;
                break;

            case 1:
                this.label = (String)value;
                break;

            case 2:
                this.properties = (Map<String, List<String>>)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateTypeRequest that = (CreateTypeRequest)obj;

        return ( this.typeDefinition.equals( that.typeDefinition )
                 && this.label.equals( that.label )
                 && this.properties.equals( that.properties )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "typeDefinition" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeDefinition ) );
        builder.append( ", " );
        builder.append( gd.toString( "label" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.label ) );
        builder.append( ", " );
        builder.append( gd.toString( "properties" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.properties ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.typeDefinition.hashCode();
        hashCode = (31 * hashCode) + this.label.hashCode();
        hashCode = (31 * hashCode) + this.properties.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
