/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#aggregateUnpivot(AggregateUnpivotRequest)
 * GPUdb.aggregateUnpivot}.
 * <p>
 * Rotate the column values into rows values.
 * <p>
 * For unpivot details and examples, see <a
 * href="../../../../../../concepts/unpivot/" target="_top">Unpivot</a>.  For
 * limitations, see <a href="../../../../../../concepts/unpivot/#limitations"
 * target="_top">Unpivot Limitations</a>.
 * <p>
 * Unpivot is used to normalize tables that are built for cross tabular
 * reporting purposes. The unpivot operator rotates the column values for all
 * the pivoted columns. A variable column, value column and all columns from
 * the source table except the unpivot columns are projected into the result
 * table. The variable column and value columns in the result table indicate
 * the pivoted column name and values respectively.
 * <p>
 * The response is returned as a dynamic schema. For details see: <a
 * href="../../../../../../api/concepts/#dynamic-schemas" target="_top">dynamic
 * schemas documentation</a>.
 */
public class AggregateUnpivotRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AggregateUnpivotRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("columnNames").type().array().items().stringType().noDefault()
                .name("variableColumnName").type().stringType().noDefault()
                .name("valueColumnName").type().stringType().noDefault()
                .name("pivotedColumns").type().array().items().stringType().noDefault()
                .name("encoding").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AggregateUnpivotRequest}
     * parameter {@link #getEncoding() encoding}.
     * <p>
     * Specifies the encoding for returned records.
     */
    public static final class Encoding {
        /**
         * Indicates that the returned records should be binary encoded.
         */
        public static final String BINARY = "binary";

        /**
         * Indicates that the returned records should be json encoded.
         */
        public static final String JSON = "json";

        private Encoding() {  }
    }

    /**
     * A set of string constants for the {@link AggregateUnpivotRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * Options#RESULT_TABLE RESULT_TABLE}. If {@link
         * Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
         * Options#FALSE FALSE} (or unspecified), then this is always allowed
         * even if the caller does not have permission to create tables. The
         * generated name is returned in {@link
         * com.gpudb.protocol.AggregateUnpivotResponse.Info#QUALIFIED_RESULT_TABLE_NAME
         * QUALIFIED_RESULT_TABLE_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * [DEPRECATED--please specify the containing schema as part of {@link
         * Options#RESULT_TABLE RESULT_TABLE} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of a
         * schema which is to contain the table specified in {@link
         * Options#RESULT_TABLE RESULT_TABLE}. If the schema is non-existent,
         * it will be automatically created.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * The name of a table used to store the results, in
         * [schema_name.]table_name format, using standard <a
         * href="../../../../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>. If present, no results are
         * returned in the response.
         */
        public static final String RESULT_TABLE = "result_table";

        /**
         * If {@link Options#TRUE TRUE}, then the result table specified in
         * {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and will
         * not expire unless a {@link Options#TTL TTL} is specified.   If
         * {@link Options#FALSE FALSE}, then the result table will be an
         * in-memory table and will expire unless a {@link Options#TTL TTL} is
         * specified otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RESULT_TABLE_PERSIST = "result_table_persist";

        /**
         * Filter expression to apply to the table prior to unpivot processing.
         */
        public static final String EXPRESSION = "expression";

        /**
         * Comma-separated list of the columns to be sorted by;
         * e.g.&nbsp;'timestamp asc, x desc'.  The columns specified must be
         * present in input table.  If any alias is given for any column name,
         * the alias must be used, rather than the original column name. The
         * default value is ''.
         */
        public static final String ORDER_BY = "order_by";

        /**
         * Indicates the number of records per chunk to be used for the result
         * table. Must be used in combination with the {@link
         * Options#RESULT_TABLE RESULT_TABLE} option.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Indicates the target maximum data size for each column in a chunk to
         * be used for the result table. Must be used in combination with the
         * {@link Options#RESULT_TABLE RESULT_TABLE} option.
         */
        public static final String CHUNK_COLUMN_MAX_MEMORY = "chunk_column_max_memory";

        /**
         * Indicates the target maximum data size for all columns in a chunk to
         * be used for the result table. Must be used in combination with the
         * {@link Options#RESULT_TABLE RESULT_TABLE} option.
         */
        public static final String CHUNK_MAX_MEMORY = "chunk_max_memory";

        /**
         * The default <a href="../../../../../../concepts/column_compression/"
         * target="_top">compression codec</a> for the result table's columns.
         */
        public static final String COMPRESSION_CODEC = "compression_codec";

        /**
         * The number of records to keep. The default value is ''.
         */
        public static final String LIMIT = "limit";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the table specified in {@link
         * Options#RESULT_TABLE RESULT_TABLE}.
         */
        public static final String TTL = "ttl";

        /**
         * view this result table is part of. The default value is ''.
         */
        public static final String VIEW_ID = "view_id";

        /**
         * Comma-separated list of columns on which to create indexes on the
         * table specified in {@link Options#RESULT_TABLE RESULT_TABLE}. The
         * columns specified must be present in output column names.  If any
         * alias is given for any column name, the alias must be used, rather
         * than the original column name.
         */
        public static final String CREATE_INDEXES = "create_indexes";

        /**
         * Force the result table to be replicated (ignores any sharding). Must
         * be used in combination with the {@link Options#RESULT_TABLE
         * RESULT_TABLE} option.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RESULT_TABLE_FORCE_REPLICATED = "result_table_force_replicated";

        private Options() {  }
    }

    private String tableName;
    private List<String> columnNames;
    private String variableColumnName;
    private String valueColumnName;
    private List<String> pivotedColumns;
    private String encoding;
    private Map<String, String> options;

    /**
     * Constructs an AggregateUnpivotRequest object with default parameters.
     */
    public AggregateUnpivotRequest() {
        tableName = "";
        columnNames = new ArrayList<>();
        variableColumnName = "";
        valueColumnName = "";
        pivotedColumns = new ArrayList<>();
        encoding = Encoding.BINARY;
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AggregateUnpivotRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table/view, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * @param columnNames  List of column names or expressions. A wildcard '*'
     *                     can be used to include all the non-pivoted columns
     *                     from the source table.
     * @param variableColumnName  Specifies the variable/parameter column name.
     *                            The default value is ''.
     * @param valueColumnName  Specifies the value column name. The default
     *                         value is ''.
     * @param pivotedColumns  List of one or more values typically the column
     *                        names of the input table. All the columns in the
     *                        source table must have the same data type.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@link Options#RESULT_TABLE
     *                         RESULT_TABLE}. If {@link
     *                         Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST} is {@link Options#FALSE
     *                         FALSE} (or unspecified), then this is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.AggregateUnpivotResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *                         QUALIFIED_RESULT_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema as part of {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema which is to
     *                         contain the table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE}. If the
     *                         schema is non-existent, it will be automatically
     *                         created.
     *                     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The
     *                         name of a table used to store the results, in
     *                         [schema_name.]table_name format, using standard
     *                         <a
     *                         href="../../../../../../concepts/tables/#table-name-resolution"
     *                         target="_top">name resolution rules</a> and
     *                         meeting <a
     *                         href="../../../../../../concepts/tables/#table-naming-criteria"
     *                         target="_top">table naming criteria</a>. If
     *                         present, no results are returned in the
     *                         response.
     *                     <li>{@link Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST}: If {@link Options#TRUE
     *                         TRUE}, then the result table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE} will be
     *                         persisted and will not expire unless a {@link
     *                         Options#TTL TTL} is specified.   If {@link
     *                         Options#FALSE FALSE}, then the result table will
     *                         be an in-memory table and will expire unless a
     *                         {@link Options#TTL TTL} is specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#EXPRESSION EXPRESSION}: Filter
     *                         expression to apply to the table prior to
     *                         unpivot processing.
     *                     <li>{@link Options#ORDER_BY ORDER_BY}:
     *                         Comma-separated list of the columns to be sorted
     *                         by; e.g. 'timestamp asc, x desc'.  The columns
     *                         specified must be present in input table.  If
     *                         any alias is given for any column name, the
     *                         alias must be used, rather than the original
     *                         column name. The default value is ''.
     *                     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates
     *                         the number of records per chunk to be used for
     *                         the result table. Must be used in combination
     *                         with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY
     *                         CHUNK_COLUMN_MAX_MEMORY}: Indicates the target
     *                         maximum data size for each column in a chunk to
     *                         be used for the result table. Must be used in
     *                         combination with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#CHUNK_MAX_MEMORY
     *                         CHUNK_MAX_MEMORY}: Indicates the target maximum
     *                         data size for all columns in a chunk to be used
     *                         for the result table. Must be used in
     *                         combination with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#COMPRESSION_CODEC
     *                         COMPRESSION_CODEC}: The default <a
     *                         href="../../../../../../concepts/column_compression/"
     *                         target="_top">compression codec</a> for the
     *                         result table's columns.
     *                     <li>{@link Options#LIMIT LIMIT}: The number of
     *                         records to keep. The default value is ''.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the table specified in
     *                         {@link Options#RESULT_TABLE RESULT_TABLE}.
     *                     <li>{@link Options#VIEW_ID VIEW_ID}: view this
     *                         result table is part of. The default value is
     *                         ''.
     *                     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}:
     *                         Comma-separated list of columns on which to
     *                         create indexes on the table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE}. The columns
     *                         specified must be present in output column
     *                         names.  If any alias is given for any column
     *                         name, the alias must be used, rather than the
     *                         original column name.
     *                     <li>{@link Options#RESULT_TABLE_FORCE_REPLICATED
     *                         RESULT_TABLE_FORCE_REPLICATED}: Force the result
     *                         table to be replicated (ignores any sharding).
     *                         Must be used in combination with the {@link
     *                         Options#RESULT_TABLE RESULT_TABLE} option.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AggregateUnpivotRequest(String tableName, List<String> columnNames, String variableColumnName, String valueColumnName, List<String> pivotedColumns, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        this.variableColumnName = (variableColumnName == null) ? "" : variableColumnName;
        this.valueColumnName = (valueColumnName == null) ? "" : valueColumnName;
        this.pivotedColumns = (pivotedColumns == null) ? new ArrayList<String>() : pivotedColumns;
        this.encoding = Encoding.BINARY;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Constructs an AggregateUnpivotRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table/view, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * @param columnNames  List of column names or expressions. A wildcard '*'
     *                     can be used to include all the non-pivoted columns
     *                     from the source table.
     * @param variableColumnName  Specifies the variable/parameter column name.
     *                            The default value is ''.
     * @param valueColumnName  Specifies the value column name. The default
     *                         value is ''.
     * @param pivotedColumns  List of one or more values typically the column
     *                        names of the input table. All the columns in the
     *                        source table must have the same data type.
     * @param encoding  Specifies the encoding for returned records.
     *                  Supported values:
     *                  <ul>
     *                      <li>{@link Encoding#BINARY BINARY}: Indicates that
     *                          the returned records should be binary encoded.
     *                      <li>{@link Encoding#JSON JSON}: Indicates that the
     *                          returned records should be json encoded.
     *                  </ul>
     *                  The default value is {@link Encoding#BINARY BINARY}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@link Options#RESULT_TABLE
     *                         RESULT_TABLE}. If {@link
     *                         Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST} is {@link Options#FALSE
     *                         FALSE} (or unspecified), then this is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.AggregateUnpivotResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *                         QUALIFIED_RESULT_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema as part of {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema which is to
     *                         contain the table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE}. If the
     *                         schema is non-existent, it will be automatically
     *                         created.
     *                     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The
     *                         name of a table used to store the results, in
     *                         [schema_name.]table_name format, using standard
     *                         <a
     *                         href="../../../../../../concepts/tables/#table-name-resolution"
     *                         target="_top">name resolution rules</a> and
     *                         meeting <a
     *                         href="../../../../../../concepts/tables/#table-naming-criteria"
     *                         target="_top">table naming criteria</a>. If
     *                         present, no results are returned in the
     *                         response.
     *                     <li>{@link Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST}: If {@link Options#TRUE
     *                         TRUE}, then the result table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE} will be
     *                         persisted and will not expire unless a {@link
     *                         Options#TTL TTL} is specified.   If {@link
     *                         Options#FALSE FALSE}, then the result table will
     *                         be an in-memory table and will expire unless a
     *                         {@link Options#TTL TTL} is specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#EXPRESSION EXPRESSION}: Filter
     *                         expression to apply to the table prior to
     *                         unpivot processing.
     *                     <li>{@link Options#ORDER_BY ORDER_BY}:
     *                         Comma-separated list of the columns to be sorted
     *                         by; e.g. 'timestamp asc, x desc'.  The columns
     *                         specified must be present in input table.  If
     *                         any alias is given for any column name, the
     *                         alias must be used, rather than the original
     *                         column name. The default value is ''.
     *                     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates
     *                         the number of records per chunk to be used for
     *                         the result table. Must be used in combination
     *                         with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY
     *                         CHUNK_COLUMN_MAX_MEMORY}: Indicates the target
     *                         maximum data size for each column in a chunk to
     *                         be used for the result table. Must be used in
     *                         combination with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#CHUNK_MAX_MEMORY
     *                         CHUNK_MAX_MEMORY}: Indicates the target maximum
     *                         data size for all columns in a chunk to be used
     *                         for the result table. Must be used in
     *                         combination with the {@link Options#RESULT_TABLE
     *                         RESULT_TABLE} option.
     *                     <li>{@link Options#COMPRESSION_CODEC
     *                         COMPRESSION_CODEC}: The default <a
     *                         href="../../../../../../concepts/column_compression/"
     *                         target="_top">compression codec</a> for the
     *                         result table's columns.
     *                     <li>{@link Options#LIMIT LIMIT}: The number of
     *                         records to keep. The default value is ''.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the table specified in
     *                         {@link Options#RESULT_TABLE RESULT_TABLE}.
     *                     <li>{@link Options#VIEW_ID VIEW_ID}: view this
     *                         result table is part of. The default value is
     *                         ''.
     *                     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}:
     *                         Comma-separated list of columns on which to
     *                         create indexes on the table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE}. The columns
     *                         specified must be present in output column
     *                         names.  If any alias is given for any column
     *                         name, the alias must be used, rather than the
     *                         original column name.
     *                     <li>{@link Options#RESULT_TABLE_FORCE_REPLICATED
     *                         RESULT_TABLE_FORCE_REPLICATED}: Force the result
     *                         table to be replicated (ignores any sharding).
     *                         Must be used in combination with the {@link
     *                         Options#RESULT_TABLE RESULT_TABLE} option.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AggregateUnpivotRequest(String tableName, List<String> columnNames, String variableColumnName, String valueColumnName, List<String> pivotedColumns, String encoding, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        this.variableColumnName = (variableColumnName == null) ? "" : variableColumnName;
        this.valueColumnName = (valueColumnName == null) ? "" : valueColumnName;
        this.pivotedColumns = (pivotedColumns == null) ? new ArrayList<String>() : pivotedColumns;
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table on which the operation will be performed. Must be an
     * existing table/view, in [schema_name.]table_name format, using standard
     * <a href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table on which the operation will be performed. Must be an
     * existing table/view, in [schema_name.]table_name format, using standard
     * <a href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * List of column names or expressions. A wildcard '*' can be used to
     * include all the non-pivoted columns from the source table.
     *
     * @return The current value of {@code columnNames}.
     */
    public List<String> getColumnNames() {
        return columnNames;
    }

    /**
     * List of column names or expressions. A wildcard '*' can be used to
     * include all the non-pivoted columns from the source table.
     *
     * @param columnNames  The new value for {@code columnNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setColumnNames(List<String> columnNames) {
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        return this;
    }

    /**
     * Specifies the variable/parameter column name. The default value is ''.
     *
     * @return The current value of {@code variableColumnName}.
     */
    public String getVariableColumnName() {
        return variableColumnName;
    }

    /**
     * Specifies the variable/parameter column name. The default value is ''.
     *
     * @param variableColumnName  The new value for {@code variableColumnName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setVariableColumnName(String variableColumnName) {
        this.variableColumnName = (variableColumnName == null) ? "" : variableColumnName;
        return this;
    }

    /**
     * Specifies the value column name. The default value is ''.
     *
     * @return The current value of {@code valueColumnName}.
     */
    public String getValueColumnName() {
        return valueColumnName;
    }

    /**
     * Specifies the value column name. The default value is ''.
     *
     * @param valueColumnName  The new value for {@code valueColumnName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setValueColumnName(String valueColumnName) {
        this.valueColumnName = (valueColumnName == null) ? "" : valueColumnName;
        return this;
    }

    /**
     * List of one or more values typically the column names of the input
     * table. All the columns in the source table must have the same data type.
     *
     * @return The current value of {@code pivotedColumns}.
     */
    public List<String> getPivotedColumns() {
        return pivotedColumns;
    }

    /**
     * List of one or more values typically the column names of the input
     * table. All the columns in the source table must have the same data type.
     *
     * @param pivotedColumns  The new value for {@code pivotedColumns}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setPivotedColumns(List<String> pivotedColumns) {
        this.pivotedColumns = (pivotedColumns == null) ? new ArrayList<String>() : pivotedColumns;
        return this;
    }

    /**
     * Specifies the encoding for returned records.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}: Indicates that the returned
     *         records should be binary encoded.
     *     <li>{@link Encoding#JSON JSON}: Indicates that the returned records
     *         should be json encoded.
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @return The current value of {@code encoding}.
     */
    public String getEncoding() {
        return encoding;
    }

    /**
     * Specifies the encoding for returned records.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}: Indicates that the returned
     *         records should be binary encoded.
     *     <li>{@link Encoding#JSON JSON}: Indicates that the returned records
     *         should be json encoded.
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @param encoding  The new value for {@code encoding}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setEncoding(String encoding) {
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If {@link
     *         Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
     *         Options#FALSE FALSE} (or unspecified), then this is always
     *         allowed even if the caller does not have permission to create
     *         tables. The generated name is returned in {@link
     *         com.gpudb.protocol.AggregateUnpivotResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema as part of
     *         {@link Options#RESULT_TABLE RESULT_TABLE} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the table specified in {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If the schema is
     *         non-existent, it will be automatically created.
     *     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The name of a table
     *         used to store the results, in [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>. If present, no results
     *         are returned in the response.
     *     <li>{@link Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST}: If
     *         {@link Options#TRUE TRUE}, then the result table specified in
     *         {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and
     *         will not expire unless a {@link Options#TTL TTL} is specified.
     *         If {@link Options#FALSE FALSE}, then the result table will be an
     *         in-memory table and will expire unless a {@link Options#TTL TTL}
     *         is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#EXPRESSION EXPRESSION}: Filter expression to
     *         apply to the table prior to unpivot processing.
     *     <li>{@link Options#ORDER_BY ORDER_BY}: Comma-separated list of the
     *         columns to be sorted by; e.g. 'timestamp asc, x desc'.  The
     *         columns specified must be present in input table.  If any alias
     *         is given for any column name, the alias must be used, rather
     *         than the original column name. The default value is ''.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for the result table. Must be used
     *         in combination with the {@link Options#RESULT_TABLE
     *         RESULT_TABLE} option.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for the result table. Must be used in
     *         combination with the {@link Options#RESULT_TABLE RESULT_TABLE}
     *         option.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for the result table. Must be used in combination with the
     *         {@link Options#RESULT_TABLE RESULT_TABLE} option.
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for the result table's
     *         columns.
     *     <li>{@link Options#LIMIT LIMIT}: The number of records to keep. The
     *         default value is ''.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link Options#RESULT_TABLE
     *         RESULT_TABLE}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: view this result table is part
     *         of. The default value is ''.
     *     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}: Comma-separated
     *         list of columns on which to create indexes on the table
     *         specified in {@link Options#RESULT_TABLE RESULT_TABLE}. The
     *         columns specified must be present in output column names.  If
     *         any alias is given for any column name, the alias must be used,
     *         rather than the original column name.
     *     <li>{@link Options#RESULT_TABLE_FORCE_REPLICATED
     *         RESULT_TABLE_FORCE_REPLICATED}: Force the result table to be
     *         replicated (ignores any sharding). Must be used in combination
     *         with the {@link Options#RESULT_TABLE RESULT_TABLE} option.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If {@link
     *         Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
     *         Options#FALSE FALSE} (or unspecified), then this is always
     *         allowed even if the caller does not have permission to create
     *         tables. The generated name is returned in {@link
     *         com.gpudb.protocol.AggregateUnpivotResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema as part of
     *         {@link Options#RESULT_TABLE RESULT_TABLE} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the table specified in {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If the schema is
     *         non-existent, it will be automatically created.
     *     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The name of a table
     *         used to store the results, in [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>. If present, no results
     *         are returned in the response.
     *     <li>{@link Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST}: If
     *         {@link Options#TRUE TRUE}, then the result table specified in
     *         {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and
     *         will not expire unless a {@link Options#TTL TTL} is specified.
     *         If {@link Options#FALSE FALSE}, then the result table will be an
     *         in-memory table and will expire unless a {@link Options#TTL TTL}
     *         is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#EXPRESSION EXPRESSION}: Filter expression to
     *         apply to the table prior to unpivot processing.
     *     <li>{@link Options#ORDER_BY ORDER_BY}: Comma-separated list of the
     *         columns to be sorted by; e.g. 'timestamp asc, x desc'.  The
     *         columns specified must be present in input table.  If any alias
     *         is given for any column name, the alias must be used, rather
     *         than the original column name. The default value is ''.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for the result table. Must be used
     *         in combination with the {@link Options#RESULT_TABLE
     *         RESULT_TABLE} option.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for the result table. Must be used in
     *         combination with the {@link Options#RESULT_TABLE RESULT_TABLE}
     *         option.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for the result table. Must be used in combination with the
     *         {@link Options#RESULT_TABLE RESULT_TABLE} option.
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for the result table's
     *         columns.
     *     <li>{@link Options#LIMIT LIMIT}: The number of records to keep. The
     *         default value is ''.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link Options#RESULT_TABLE
     *         RESULT_TABLE}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: view this result table is part
     *         of. The default value is ''.
     *     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}: Comma-separated
     *         list of columns on which to create indexes on the table
     *         specified in {@link Options#RESULT_TABLE RESULT_TABLE}. The
     *         columns specified must be present in output column names.  If
     *         any alias is given for any column name, the alias must be used,
     *         rather than the original column name.
     *     <li>{@link Options#RESULT_TABLE_FORCE_REPLICATED
     *         RESULT_TABLE_FORCE_REPLICATED}: Force the result table to be
     *         replicated (ignores any sharding). Must be used in combination
     *         with the {@link Options#RESULT_TABLE RESULT_TABLE} option.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateUnpivotRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.columnNames;

            case 2:
                return this.variableColumnName;

            case 3:
                return this.valueColumnName;

            case 4:
                return this.pivotedColumns;

            case 5:
                return this.encoding;

            case 6:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.columnNames = (List<String>)value;
                break;

            case 2:
                this.variableColumnName = (String)value;
                break;

            case 3:
                this.valueColumnName = (String)value;
                break;

            case 4:
                this.pivotedColumns = (List<String>)value;
                break;

            case 5:
                this.encoding = (String)value;
                break;

            case 6:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AggregateUnpivotRequest that = (AggregateUnpivotRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.columnNames.equals( that.columnNames )
                 && this.variableColumnName.equals( that.variableColumnName )
                 && this.valueColumnName.equals( that.valueColumnName )
                 && this.pivotedColumns.equals( that.pivotedColumns )
                 && this.encoding.equals( that.encoding )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "variableColumnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.variableColumnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "valueColumnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.valueColumnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "pivotedColumns" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.pivotedColumns ) );
        builder.append( ", " );
        builder.append( gd.toString( "encoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.encoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.columnNames.hashCode();
        hashCode = (31 * hashCode) + this.variableColumnName.hashCode();
        hashCode = (31 * hashCode) + this.valueColumnName.hashCode();
        hashCode = (31 * hashCode) + this.pivotedColumns.hashCode();
        hashCode = (31 * hashCode) + this.encoding.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
