/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#matchGraph(MatchGraphRequest)}.
 * <p>
 * Matches a directed route implied by a given set of
 * latitude/longitude points to an existing underlying road network graph using
 * a
 * given solution type.

 * IMPORTANT: It's highly recommended that you review the
 * <a href="../../../../../../graph_solver/network_graph_solver/"
 * target="_top">Network Graphs & Solvers</a>
 * concepts documentation, the
 * <a href="../../../../../../guides/graph_rest_guide/" target="_top">Graph
 * REST Tutorial</a>,
 * and/or some
 * <a href="../../../../../../guide-tags/graph-match/"
 * target="_top">/match/graph examples</a>
 * before using this endpoint.
 */
public class MatchGraphRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("MatchGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("samplePoints").type().array().items().stringType().noDefault()
                .name("solveMethod").type().stringType().noDefault()
                .name("solutionTable").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * The type of solver to use for graph matching.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     * MARKOV_CHAIN}: Matches {@code samplePoints} to the graph using the
     * Hidden Markov Model (HMM)-based method, which conducts a range-tree
     * closest-edge search to find the best combinations of possible road
     * segments ({@code num_segments}) for each sample point to create the best
     * route. The route is secured one point at a time while looking ahead
     * {@code chain_width} number of points, so the prediction is corrected
     * after each point. This solution type is the most accurate but also the
     * most computationally intensive. Related options: {@code num_segments}
     * and {@code chain_width}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_OD_PAIRS
     * MATCH_OD_PAIRS}: Matches {@code samplePoints} to find the most probable
     * path between origin and destination pairs with cost constraints.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SUPPLY_DEMAND
     * MATCH_SUPPLY_DEMAND}: Matches {@code samplePoints} to optimize
     * scheduling multiple supplies (trucks) with varying sizes to varying
     * demand sites with varying capacities per depot. Related options: {@code
     * partial_loading} and {@code max_combinations}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_BATCH_SOLVES
     * MATCH_BATCH_SOLVES}: Matches {@code samplePoints} source and destination
     * pairs for the shortest path solves in batch mode.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_LOOPS
     * MATCH_LOOPS}: Matches closed loops (Eulerian paths) originating and
     * ending at each graph node within min and max hops (levels).
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CHARGING_STATIONS
     * MATCH_CHARGING_STATIONS}: Matches an optimal path across a number of
     * ev-charging stations between source and target locations.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SIMILARITY
     * MATCH_SIMILARITY}: Matches the intersection set(s) by computing the
     * Jaccard similarity score between node pairs.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PICKUP_DROPOFF
     * MATCH_PICKUP_DROPOFF}: Matches the pickups and dropoffs by optimizing
     * the total trip costs
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CLUSTERS
     * MATCH_CLUSTERS}: Matches the graph nodes with a cluster index using
     * Louvain clustering algorithm
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PATTERN
     * MATCH_PATTERN}: Matches a pattern in the graph
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     * MARKOV_CHAIN}.
     * A set of string constants for the parameter {@code solveMethod}.
     */
    public static final class SolveMethod {

        /**
         * Matches {@code samplePoints} to the graph using the Hidden Markov
         * Model (HMM)-based method, which conducts a range-tree closest-edge
         * search to find the best combinations of possible road segments
         * ({@code num_segments}) for each sample point to create the best
         * route. The route is secured one point at a time while looking ahead
         * {@code chain_width} number of points, so the prediction is corrected
         * after each point. This solution type is the most accurate but also
         * the most computationally intensive. Related options: {@code
         * num_segments} and {@code chain_width}.
         */
        public static final String MARKOV_CHAIN = "markov_chain";

        /**
         * Matches {@code samplePoints} to find the most probable path between
         * origin and destination pairs with cost constraints.
         */
        public static final String MATCH_OD_PAIRS = "match_od_pairs";

        /**
         * Matches {@code samplePoints} to optimize scheduling multiple
         * supplies (trucks) with varying sizes to varying demand sites with
         * varying capacities per depot. Related options: {@code
         * partial_loading} and {@code max_combinations}.
         */
        public static final String MATCH_SUPPLY_DEMAND = "match_supply_demand";

        /**
         * Matches {@code samplePoints} source and destination pairs for the
         * shortest path solves in batch mode.
         */
        public static final String MATCH_BATCH_SOLVES = "match_batch_solves";

        /**
         * Matches closed loops (Eulerian paths) originating and ending at each
         * graph node within min and max hops (levels).
         */
        public static final String MATCH_LOOPS = "match_loops";

        /**
         * Matches an optimal path across a number of ev-charging stations
         * between source and target locations.
         */
        public static final String MATCH_CHARGING_STATIONS = "match_charging_stations";

        /**
         * Matches the intersection set(s) by computing the Jaccard similarity
         * score between node pairs.
         */
        public static final String MATCH_SIMILARITY = "match_similarity";

        /**
         * Matches the pickups and dropoffs by optimizing the total trip costs
         */
        public static final String MATCH_PICKUP_DROPOFF = "match_pickup_dropoff";

        /**
         * Matches the graph nodes with a cluster index using Louvain
         * clustering algorithm
         */
        public static final String MATCH_CLUSTERS = "match_clusters";

        /**
         * Matches a pattern in the graph
         */
        public static final String MATCH_PATTERN = "match_pattern";

        private SolveMethod() {  }
    }


    /**
     * Additional parameters
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#GPS_NOISE GPS_NOISE}: GPS
     * noise value (in meters) to remove redundant sample points. Use -1 to
     * disable noise reduction. The default value accounts for 95% of point
     * variation (+ or -5 meters).  The default value is '5.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#NUM_SEGMENTS NUM_SEGMENTS}:
     * Maximum number of potentially matching road segments for each sample
     * point. For the {@code markov_chain} solver, the default is 3.  The
     * default value is '3'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_RADIUS
     * SEARCH_RADIUS}: Maximum search radius used when snapping sample points
     * onto potentially matching surrounding segments. The default value
     * corresponds to approximately 100 meters.  The default value is '0.001'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#CHAIN_WIDTH CHAIN_WIDTH}:
     * For the {@code markov_chain} solver only. Length of the sample points
     * lookahead window within the Markov kernel; the larger the number, the
     * more accurate the solution.  The default value is '9'.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#SOURCE
     * SOURCE}: Optional WKT starting point from {@code samplePoints} for the
     * solver. The default behavior for the endpoint is to use time to
     * determine the starting point.  The default value is 'POINT NULL'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#DESTINATION DESTINATION}:
     * Optional WKT ending point from {@code samplePoints} for the solver. The
     * default behavior for the endpoint is to use time to determine the
     * destination point.  The default value is 'POINT NULL'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#PARTIAL_LOADING
     * PARTIAL_LOADING}: For the {@code match_supply_demand} solver only. When
     * false (non-default), trucks do not off-load at the demand (store) side
     * if the remainder is less than the store's need
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Partial off-loading at multiple store (demand) locations
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: No partial off-loading allowed if supply is less than the
     * store's demand.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_COMBINATIONS
     * MAX_COMBINATIONS}: For the {@code match_supply_demand} solver only. This
     * is the cutoff for the number of generated combinations for sequencing
     * the demand locations - can increase this up to 2M.  The default value is
     * '10000'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_SUPPLY_COMBINATIONS
     * MAX_SUPPLY_COMBINATIONS}: For the {@code match_supply_demand} solver
     * only. This is the cutoff for the number of generated combinations for
     * sequencing the supply locations if/when 'permute_supplies' is true.  The
     * default value is '10000'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#LEFT_TURN_PENALTY
     * LEFT_TURN_PENALTY}: This will add an additonal weight over the edges
     * labelled as 'left turn' if the 'add_turn' option parameter of the {@link
     * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at graph
     * creation.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#RIGHT_TURN_PENALTY
     * RIGHT_TURN_PENALTY}: This will add an additonal weight over the edges
     * labelled as' right turn' if the 'add_turn' option parameter of the
     * {@link com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
     * graph creation.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#INTERSECTION_PENALTY
     * INTERSECTION_PENALTY}: This will add an additonal weight over the edges
     * labelled as 'intersection' if the 'add_turn' option parameter of the
     * {@link com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
     * graph creation.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SHARP_TURN_PENALTY
     * SHARP_TURN_PENALTY}: This will add an additonal weight over the edges
     * labelled as 'sharp turn' or 'u-turn' if the 'add_turn' option parameter
     * of the {@link com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     * invoked at graph creation.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#AGGREGATED_OUTPUT
     * AGGREGATED_OUTPUT}: For the {@code match_supply_demand} solver only.
     * When it is true (default), each record in the output table shows a
     * particular truck's scheduled cumulative round trip path
     * (MULTILINESTRING) and the corresponding aggregated cost. Otherwise, each
     * record shows a single scheduled truck route (LINESTRING) towards a
     * particular demand location (store id) with its corresponding cost.  The
     * default value is 'true'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_TRACKS
     * OUTPUT_TRACKS}: For the {@code match_supply_demand} solver only. When it
     * is true (non-default), the output will be in tracks format for all the
     * round trips of each truck in which the timestamps are populated directly
     * from the edge weights starting from their originating depots.  The
     * default value is 'false'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_TRIP_COST
     * MAX_TRIP_COST}: For the {@code match_supply_demand} and {@code
     * match_pickup_dropoff} solvers only. If this constraint is greater than
     * zero (default) then the trucks/rides will skip travelling from one
     * demand/pick location to another if the cost between them is greater than
     * this number (distance or time). Zero (default) value means no check is
     * performed.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FILTER_FOLDING_PATHS
     * FILTER_FOLDING_PATHS}: For the {@code markov_chain} solver only. When
     * true (non-default), the paths per sequence combination is checked for
     * folding over patterns and can significantly increase the execution time
     * depending on the chain width and the number of gps samples.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Filter out the folded paths.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: Do not filter out the folded paths
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#UNIT_UNLOADING_COST
     * UNIT_UNLOADING_COST}: For the {@code match_supply_demand} solver only.
     * The unit cost per load amount to be delivered. If this value is greater
     * than zero (default) then the additional cost of this unit load
     * multiplied by the total dropped load will be added over to the trip cost
     * to the demand location.  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_THREADS
     * MAX_NUM_THREADS}: For the {@code markov_chain} solver only. If specified
     * (greater than zero), the maximum number of threads will not be greater
     * than the specified value. It can be lower due to the memory and the
     * number cores available. Default value of zero allows the algorithm to
     * set the maximal number of threads within these constraints.  The default
     * value is '0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_LIMIT
     * SERVICE_LIMIT}: For the {@code match_supply_demand} solver only. If
     * specified (greater than zero), any supply actor's total service cost
     * (distance or time) will be limited by the specified value including
     * multiple rounds (if set).  The default value is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#ENABLE_REUSE ENABLE_REUSE}:
     * For the {@code match_supply_demand} solver only. If specified (true),
     * all supply actors can be scheduled for second rounds from their
     * originating depots.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Allows reusing supply actors (trucks, e.g.) for scheduling again.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: Supply actors are scheduled only once from their depots.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_STOPS MAX_STOPS}: For
     * the {@code match_supply_demand} solver only. If specified (greater than
     * zero), a supply actor (truck) can at most have this many stops (demand
     * locations) in one round trip. Otherwise, it is unlimited. If
     * 'enable_truck_reuse' is on, this condition will be applied separately at
     * each round trip use of the same truck.  The default value is '0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_RADIUS
     * SERVICE_RADIUS}: For the {@code match_supply_demand} and {@code
     * match_pickup_dropoff} solvers only. If specified (greater than zero), it
     * filters the demands/picks outside this radius centered around the supply
     * actor/ride's originating location (distance or time).  The default value
     * is '0.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#PERMUTE_SUPPLIES
     * PERMUTE_SUPPLIES}: For the {@code match_supply_demand} solver only. If
     * specified (true), supply side actors are permuted for the demand
     * combinations during msdo optimization - note that this option increases
     * optimization time significantly - use of 'max_combinations' option is
     * recommended to prevent prohibitively long runs
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Generates sequences over supply side permutations if total supply
     * is less than twice the total demand
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: Permutations are not performed, rather a specific order of
     * supplies based on capacity is computed
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#BATCH_TSM_MODE
     * BATCH_TSM_MODE}: For the {@code match_supply_demand} solver only. When
     * enabled, it sets the number of visits on each demand location by a
     * single salesman at each trip is considered to be (one) 1, otherwise
     * there is no bound.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Sets only one visit per demand location by a salesman (tsm mode)
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: No preset limit (usual msdo mode)
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#ROUND_TRIP ROUND_TRIP}: For
     * the {@code match_supply_demand} solver only. When enabled, the supply
     * will have to return back to the origination location.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: The optimization is done for trips in round trip manner always
     * returning to originating locations
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: Supplies do not have to come back to their originating locations
     * in their routes. The routes are considered finished at the final
     * dropoff.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#NUM_CYCLES NUM_CYCLES}: For
     * the {@code match_clusters} solver only. Terminates the cluster exchange
     * iterations across 2-step-cycles (outer loop) when quality does not
     * improve during iterations.  The default value is '10'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#NUM_LOOPS_PER_CYCLE
     * NUM_LOOPS_PER_CYCLE}: For the {@code match_clusters} solver only.
     * Terminates the cluster exchanges within the first step iterations of a
     * cycle (inner loop) unless convergence is reached.  The default value is
     * '10'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#NUM_OUTPUT_CLUSTERS
     * NUM_OUTPUT_CLUSTERS}: For the {@code match_clusters} solver only.
     * Limits the output to the top 'num_output_clusters' clusters based on
     * density. Default value of zero outputs all clusters.  The default value
     * is '0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_CLUSTERS
     * MAX_NUM_CLUSTERS}: For the {@code match_clusters} solver only. If set
     * (value greater than zero), it terminates when the number of clusters
     * goes below than this number.  The default value is '0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#CLUSTER_QUALITY_METRIC
     * CLUSTER_QUALITY_METRIC}: For the {@code match_clusters} solver only. The
     * quality metric for Louvain modularity optimization solver.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN
     * GIRVAN}: Uses the Newman Girvan quality metric for cluster solver
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SPECTRAL SPECTRAL}: Applies
     * recursive spectral bisection (RSB) partitioning solver
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN GIRVAN}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#RESTRICTED_TYPE
     * RESTRICTED_TYPE}: For the {@code match_supply_demand} solver only.
     * Optimization is performed by restricting routes labeled by
     * 'MSDO_ODDEVEN_RESTRICTED' only for this supply actor (truck) type
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#ODD
     * ODD}: Applies odd/even rule restrictions to odd tagged vehicles.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#EVEN
     * EVEN}: Applies odd/even rule restrictions to even tagged vehicles.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#NONE
     * NONE}: Does not apply odd/even rule restrictions to any vehicles.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SERVER_ID SERVER_ID}:
     * Indicates which graph server(s) to send the request to. Default is to
     * send to the server, amongst those containing the corresponding graph,
     * that has the most computational bandwidth.  The default value is ''.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#INVERSE_SOLVE
     * INVERSE_SOLVE}: For the {@code match_batch_solves} solver only. Solves
     * source-destination pairs using inverse shortest path solver.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}: Solves using inverse shortest path solver.
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}: Solves using direct shortest path solver.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MIN_LOOP_LEVEL
     * MIN_LOOP_LEVEL}: For the {@code match_loops} solver only. Finds closed
     * loops around each node deducible not less than this minimal hop (level)
     * deep.  The default value is '0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_LOOP_LEVEL
     * MAX_LOOP_LEVEL}: For the {@code match_loops} solver only. Finds closed
     * loops around each node deducible not more than this maximal hop (level)
     * deep.  The default value is '5'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_LIMIT SEARCH_LIMIT}:
     * For the {@code match_loops} solver only. Searches within this limit of
     * nodes per vertex to detect loops. The value zero means there is no
     * limit.  The default value is '10000'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_BATCH_SIZE
     * OUTPUT_BATCH_SIZE}: For the {@code match_loops} solver only. Uses this
     * value as the batch size of the number of loops in flushing(inserting) to
     * the output table.  The default value is '1000'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CAPACITY
     * CHARGING_CAPACITY}: For the {@code match_charging_stations} solver only.
     * This is the maximum ev-charging capacity of a vehicle (distance in
     * meters or time in seconds depending on the unit of the graph weights).
     * The default value is '300000.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CANDIDATES
     * CHARGING_CANDIDATES}: For the {@code match_charging_stations} solver
     * only. Solver searches for this many number of stations closest around
     * each base charging location found by capacity.  The default value is
     * '10'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_PENALTY
     * CHARGING_PENALTY}: For the {@code match_charging_stations} solver only.
     * This is the penalty for full charging.  The default value is '30000.0'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#MAX_HOPS MAX_HOPS}: For the
     * {@code match_similarity} solver only. Searches within this maximum hops
     * for source and target node pairs to compute the Jaccard scores.  The
     * default value is '3'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#TRAVERSAL_NODE_LIMIT
     * TRAVERSAL_NODE_LIMIT}: For the {@code match_similarity} solver only.
     * Limits the traversal depth if it reaches this many number of nodes.  The
     * default value is '1000'.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#PAIRED_SIMILARITY
     * PAIRED_SIMILARITY}: For the {@code match_similarity} solver only. If
     * true, it computes Jaccard score between each pair, otherwise it will
     * compute Jaccard from the intersection set between the source and target
     * nodes
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FORCE_UNDIRECTED
     * FORCE_UNDIRECTED}: For the {@code match_pattern} solver only. Pattern
     * matching will be using both pattern and graph as undirected if set to
     * true.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * GPS noise value (in meters) to remove redundant sample points. Use
         * -1 to disable noise reduction. The default value accounts for 95% of
         * point variation (+ or -5 meters).  The default value is '5.0'.
         */
        public static final String GPS_NOISE = "gps_noise";

        /**
         * Maximum number of potentially matching road segments for each sample
         * point. For the {@code markov_chain} solver, the default is 3.  The
         * default value is '3'.
         */
        public static final String NUM_SEGMENTS = "num_segments";

        /**
         * Maximum search radius used when snapping sample points onto
         * potentially matching surrounding segments. The default value
         * corresponds to approximately 100 meters.  The default value is
         * '0.001'.
         */
        public static final String SEARCH_RADIUS = "search_radius";

        /**
         * For the {@code markov_chain} solver only. Length of the sample
         * points lookahead window within the Markov kernel; the larger the
         * number, the more accurate the solution.  The default value is '9'.
         */
        public static final String CHAIN_WIDTH = "chain_width";

        /**
         * Optional WKT starting point from {@code samplePoints} for the
         * solver. The default behavior for the endpoint is to use time to
         * determine the starting point.  The default value is 'POINT NULL'.
         */
        public static final String SOURCE = "source";

        /**
         * Optional WKT ending point from {@code samplePoints} for the solver.
         * The default behavior for the endpoint is to use time to determine
         * the destination point.  The default value is 'POINT NULL'.
         */
        public static final String DESTINATION = "destination";

        /**
         * For the {@code match_supply_demand} solver only. When false
         * (non-default), trucks do not off-load at the demand (store) side if
         * the remainder is less than the store's need
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Partial
         * off-loading at multiple store (demand) locations
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: No
         * partial off-loading allowed if supply is less than the store's
         * demand.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
         */
        public static final String PARTIAL_LOADING = "partial_loading";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * For the {@code match_supply_demand} solver only. This is the cutoff
         * for the number of generated combinations for sequencing the demand
         * locations - can increase this up to 2M.  The default value is
         * '10000'.
         */
        public static final String MAX_COMBINATIONS = "max_combinations";

        /**
         * For the {@code match_supply_demand} solver only. This is the cutoff
         * for the number of generated combinations for sequencing the supply
         * locations if/when 'permute_supplies' is true.  The default value is
         * '10000'.
         */
        public static final String MAX_SUPPLY_COMBINATIONS = "max_supply_combinations";

        /**
         * This will add an additonal weight over the edges labelled as 'left
         * turn' if the 'add_turn' option parameter of the {@link
         * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
         * graph creation.  The default value is '0.0'.
         */
        public static final String LEFT_TURN_PENALTY = "left_turn_penalty";

        /**
         * This will add an additonal weight over the edges labelled as' right
         * turn' if the 'add_turn' option parameter of the {@link
         * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
         * graph creation.  The default value is '0.0'.
         */
        public static final String RIGHT_TURN_PENALTY = "right_turn_penalty";

        /**
         * This will add an additonal weight over the edges labelled as
         * 'intersection' if the 'add_turn' option parameter of the {@link
         * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
         * graph creation.  The default value is '0.0'.
         */
        public static final String INTERSECTION_PENALTY = "intersection_penalty";

        /**
         * This will add an additonal weight over the edges labelled as 'sharp
         * turn' or 'u-turn' if the 'add_turn' option parameter of the {@link
         * com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
         * graph creation.  The default value is '0.0'.
         */
        public static final String SHARP_TURN_PENALTY = "sharp_turn_penalty";

        /**
         * For the {@code match_supply_demand} solver only. When it is true
         * (default), each record in the output table shows a particular
         * truck's scheduled cumulative round trip path (MULTILINESTRING) and
         * the corresponding aggregated cost. Otherwise, each record shows a
         * single scheduled truck route (LINESTRING) towards a particular
         * demand location (store id) with its corresponding cost.  The default
         * value is 'true'.
         */
        public static final String AGGREGATED_OUTPUT = "aggregated_output";

        /**
         * For the {@code match_supply_demand} solver only. When it is true
         * (non-default), the output will be in tracks format for all the round
         * trips of each truck in which the timestamps are populated directly
         * from the edge weights starting from their originating depots.  The
         * default value is 'false'.
         */
        public static final String OUTPUT_TRACKS = "output_tracks";

        /**
         * For the {@code match_supply_demand} and {@code match_pickup_dropoff}
         * solvers only. If this constraint is greater than zero (default) then
         * the trucks/rides will skip travelling from one demand/pick location
         * to another if the cost between them is greater than this number
         * (distance or time). Zero (default) value means no check is
         * performed.  The default value is '0.0'.
         */
        public static final String MAX_TRIP_COST = "max_trip_cost";

        /**
         * For the {@code markov_chain} solver only. When true (non-default),
         * the paths per sequence combination is checked for folding over
         * patterns and can significantly increase the execution time depending
         * on the chain width and the number of gps samples.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Filter out
         * the folded paths.
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: Do not
         * filter out the folded paths
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
         */
        public static final String FILTER_FOLDING_PATHS = "filter_folding_paths";

        /**
         * For the {@code match_supply_demand} solver only. The unit cost per
         * load amount to be delivered. If this value is greater than zero
         * (default) then the additional cost of this unit load multiplied by
         * the total dropped load will be added over to the trip cost to the
         * demand location.  The default value is '0.0'.
         */
        public static final String UNIT_UNLOADING_COST = "unit_unloading_cost";

        /**
         * For the {@code markov_chain} solver only. If specified (greater than
         * zero), the maximum number of threads will not be greater than the
         * specified value. It can be lower due to the memory and the number
         * cores available. Default value of zero allows the algorithm to set
         * the maximal number of threads within these constraints.  The default
         * value is '0'.
         */
        public static final String MAX_NUM_THREADS = "max_num_threads";

        /**
         * For the {@code match_supply_demand} solver only. If specified
         * (greater than zero), any supply actor's total service cost (distance
         * or time) will be limited by the specified value including multiple
         * rounds (if set).  The default value is '0.0'.
         */
        public static final String SERVICE_LIMIT = "service_limit";

        /**
         * For the {@code match_supply_demand} solver only. If specified
         * (true), all supply actors can be scheduled for second rounds from
         * their originating depots.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Allows
         * reusing supply actors (trucks, e.g.) for scheduling again.
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: Supply
         * actors are scheduled only once from their depots.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
         */
        public static final String ENABLE_REUSE = "enable_reuse";

        /**
         * For the {@code match_supply_demand} solver only. If specified
         * (greater than zero), a supply actor (truck) can at most have this
         * many stops (demand locations) in one round trip. Otherwise, it is
         * unlimited. If 'enable_truck_reuse' is on, this condition will be
         * applied separately at each round trip use of the same truck.  The
         * default value is '0'.
         */
        public static final String MAX_STOPS = "max_stops";

        /**
         * For the {@code match_supply_demand} and {@code match_pickup_dropoff}
         * solvers only. If specified (greater than zero), it filters the
         * demands/picks outside this radius centered around the supply
         * actor/ride's originating location (distance or time).  The default
         * value is '0.0'.
         */
        public static final String SERVICE_RADIUS = "service_radius";

        /**
         * For the {@code match_supply_demand} solver only. If specified
         * (true), supply side actors are permuted for the demand combinations
         * during msdo optimization - note that this option increases
         * optimization time significantly - use of 'max_combinations' option
         * is recommended to prevent prohibitively long runs
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Generates
         * sequences over supply side permutations if total supply is less than
         * twice the total demand
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}:
         * Permutations are not performed, rather a specific order of supplies
         * based on capacity is computed
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
         */
        public static final String PERMUTE_SUPPLIES = "permute_supplies";

        /**
         * For the {@code match_supply_demand} solver only. When enabled, it
         * sets the number of visits on each demand location by a single
         * salesman at each trip is considered to be (one) 1, otherwise there
         * is no bound.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Sets only
         * one visit per demand location by a salesman (tsm mode)
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: No preset
         * limit (usual msdo mode)
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
         */
        public static final String BATCH_TSM_MODE = "batch_tsm_mode";

        /**
         * For the {@code match_supply_demand} solver only. When enabled, the
         * supply will have to return back to the origination location.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: The
         * optimization is done for trips in round trip manner always returning
         * to originating locations
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: Supplies
         * do not have to come back to their originating locations in their
         * routes. The routes are considered finished at the final dropoff.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
         */
        public static final String ROUND_TRIP = "round_trip";

        /**
         * For the {@code match_clusters} solver only. Terminates the cluster
         * exchange iterations across 2-step-cycles (outer loop) when quality
         * does not improve during iterations.  The default value is '10'.
         */
        public static final String NUM_CYCLES = "num_cycles";

        /**
         * For the {@code match_clusters} solver only. Terminates the cluster
         * exchanges within the first step iterations of a cycle (inner loop)
         * unless convergence is reached.  The default value is '10'.
         */
        public static final String NUM_LOOPS_PER_CYCLE = "num_loops_per_cycle";

        /**
         * For the {@code match_clusters} solver only.  Limits the output to
         * the top 'num_output_clusters' clusters based on density. Default
         * value of zero outputs all clusters.  The default value is '0'.
         */
        public static final String NUM_OUTPUT_CLUSTERS = "num_output_clusters";

        /**
         * For the {@code match_clusters} solver only. If set (value greater
         * than zero), it terminates when the number of clusters goes below
         * than this number.  The default value is '0'.
         */
        public static final String MAX_NUM_CLUSTERS = "max_num_clusters";

        /**
         * For the {@code match_clusters} solver only. The quality metric for
         * Louvain modularity optimization solver.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN GIRVAN}: Uses
         * the Newman Girvan quality metric for cluster solver
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#SPECTRAL SPECTRAL}:
         * Applies recursive spectral bisection (RSB) partitioning solver
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN GIRVAN}.
         */
        public static final String CLUSTER_QUALITY_METRIC = "cluster_quality_metric";

        /**
         * Uses the Newman Girvan quality metric for cluster solver
         */
        public static final String GIRVAN = "girvan";

        /**
         * Applies recursive spectral bisection (RSB) partitioning solver
         */
        public static final String SPECTRAL = "spectral";

        /**
         * For the {@code match_supply_demand} solver only. Optimization is
         * performed by restricting routes labeled by 'MSDO_ODDEVEN_RESTRICTED'
         * only for this supply actor (truck) type
         * Supported values:
         * <ul>
         *         <li> {@link com.gpudb.protocol.MatchGraphRequest.Options#ODD
         * ODD}: Applies odd/even rule restrictions to odd tagged vehicles.
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#EVEN EVEN}: Applies
         * odd/even rule restrictions to even tagged vehicles.
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}: Does not
         * apply odd/even rule restrictions to any vehicles.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}.
         */
        public static final String RESTRICTED_TYPE = "restricted_type";

        /**
         * Applies odd/even rule restrictions to odd tagged vehicles.
         */
        public static final String ODD = "odd";

        /**
         * Applies odd/even rule restrictions to even tagged vehicles.
         */
        public static final String EVEN = "even";

        /**
         * Does not apply odd/even rule restrictions to any vehicles.
         */
        public static final String NONE = "none";

        /**
         * Indicates which graph server(s) to send the request to. Default is
         * to send to the server, amongst those containing the corresponding
         * graph, that has the most computational bandwidth.  The default value
         * is ''.
         */
        public static final String SERVER_ID = "server_id";

        /**
         * For the {@code match_batch_solves} solver only. Solves
         * source-destination pairs using inverse shortest path solver.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Solves
         * using inverse shortest path solver.
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: Solves
         * using direct shortest path solver.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
         */
        public static final String INVERSE_SOLVE = "inverse_solve";

        /**
         * For the {@code match_loops} solver only. Finds closed loops around
         * each node deducible not less than this minimal hop (level) deep.
         * The default value is '0'.
         */
        public static final String MIN_LOOP_LEVEL = "min_loop_level";

        /**
         * For the {@code match_loops} solver only. Finds closed loops around
         * each node deducible not more than this maximal hop (level) deep.
         * The default value is '5'.
         */
        public static final String MAX_LOOP_LEVEL = "max_loop_level";

        /**
         * For the {@code match_loops} solver only. Searches within this limit
         * of nodes per vertex to detect loops. The value zero means there is
         * no limit.  The default value is '10000'.
         */
        public static final String SEARCH_LIMIT = "search_limit";

        /**
         * For the {@code match_loops} solver only. Uses this value as the
         * batch size of the number of loops in flushing(inserting) to the
         * output table.  The default value is '1000'.
         */
        public static final String OUTPUT_BATCH_SIZE = "output_batch_size";

        /**
         * For the {@code match_charging_stations} solver only. This is the
         * maximum ev-charging capacity of a vehicle (distance in meters or
         * time in seconds depending on the unit of the graph weights).  The
         * default value is '300000.0'.
         */
        public static final String CHARGING_CAPACITY = "charging_capacity";

        /**
         * For the {@code match_charging_stations} solver only. Solver searches
         * for this many number of stations closest around each base charging
         * location found by capacity.  The default value is '10'.
         */
        public static final String CHARGING_CANDIDATES = "charging_candidates";

        /**
         * For the {@code match_charging_stations} solver only. This is the
         * penalty for full charging.  The default value is '30000.0'.
         */
        public static final String CHARGING_PENALTY = "charging_penalty";

        /**
         * For the {@code match_similarity} solver only. Searches within this
         * maximum hops for source and target node pairs to compute the Jaccard
         * scores.  The default value is '3'.
         */
        public static final String MAX_HOPS = "max_hops";

        /**
         * For the {@code match_similarity} solver only. Limits the traversal
         * depth if it reaches this many number of nodes.  The default value is
         * '1000'.
         */
        public static final String TRAVERSAL_NODE_LIMIT = "traversal_node_limit";

        /**
         * For the {@code match_similarity} solver only. If true, it computes
         * Jaccard score between each pair, otherwise it will compute Jaccard
         * from the intersection set between the source and target nodes
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
         */
        public static final String PAIRED_SIMILARITY = "paired_similarity";

        /**
         * For the {@code match_pattern} solver only. Pattern matching will be
         * using both pattern and graph as undirected if set to true.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
         */
        public static final String FORCE_UNDIRECTED = "force_undirected";

        private Options() {  }
    }

    private String graphName;
    private List<String> samplePoints;
    private String solveMethod;
    private String solutionTable;
    private Map<String, String> options;


    /**
     * Constructs a MatchGraphRequest object with default parameters.
     */
    public MatchGraphRequest() {
        graphName = "";
        samplePoints = new ArrayList<>();
        solveMethod = "";
        solutionTable = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a MatchGraphRequest object with the specified parameters.
     * 
     * @param graphName  Name of the underlying geospatial graph resource to
     *                   match to using {@code samplePoints}.
     * @param samplePoints  Sample points used to match to an underlying
     *                      geospatial
     *                      graph. Sample points must be specified using
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#match-identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#match-combinations"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with: existing column
     *                      names, e.g.,
     *                      'table.column AS SAMPLE_X'; expressions, e.g.,
     *                      'ST_MAKEPOINT(table.x, table.y) AS
     *                      SAMPLE_WKTPOINT'; or constant values, e.g.,
     *                      '{1, 2, 10} AS SAMPLE_TRIPID'.
     * @param solveMethod  The type of solver to use for graph matching.
     *                     Supported values:
     *                     <ul>
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}: Matches {@code samplePoints} to the
     *                     graph using the Hidden Markov Model (HMM)-based
     *                     method, which conducts a range-tree closest-edge
     *                     search to find the best combinations of possible
     *                     road segments ({@code num_segments}) for each sample
     *                     point to create the best route. The route is secured
     *                     one point at a time while looking ahead {@code
     *                     chain_width} number of points, so the prediction is
     *                     corrected after each point. This solution type is
     *                     the most accurate but also the most computationally
     *                     intensive. Related options: {@code num_segments} and
     *                     {@code chain_width}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_OD_PAIRS
     *                     MATCH_OD_PAIRS}: Matches {@code samplePoints} to
     *                     find the most probable path between origin and
     *                     destination pairs with cost constraints.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SUPPLY_DEMAND
     *                     MATCH_SUPPLY_DEMAND}: Matches {@code samplePoints}
     *                     to optimize scheduling multiple supplies (trucks)
     *                     with varying sizes to varying demand sites with
     *                     varying capacities per depot. Related options:
     *                     {@code partial_loading} and {@code
     *                     max_combinations}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_BATCH_SOLVES
     *                     MATCH_BATCH_SOLVES}: Matches {@code samplePoints}
     *                     source and destination pairs for the shortest path
     *                     solves in batch mode.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_LOOPS
     *                     MATCH_LOOPS}: Matches closed loops (Eulerian paths)
     *                     originating and ending at each graph node within min
     *                     and max hops (levels).
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CHARGING_STATIONS
     *                     MATCH_CHARGING_STATIONS}: Matches an optimal path
     *                     across a number of ev-charging stations between
     *                     source and target locations.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SIMILARITY
     *                     MATCH_SIMILARITY}: Matches the intersection set(s)
     *                     by computing the Jaccard similarity score between
     *                     node pairs.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PICKUP_DROPOFF
     *                     MATCH_PICKUP_DROPOFF}: Matches the pickups and
     *                     dropoffs by optimizing the total trip costs
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CLUSTERS
     *                     MATCH_CLUSTERS}: Matches the graph nodes with a
     *                     cluster index using Louvain clustering algorithm
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PATTERN
     *                     MATCH_PATTERN}: Matches a pattern in the graph
     *                     </ul>
     *                     The default value is {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}.
     * @param solutionTable  The name of the table used to store the results,
     *                       in [schema_name.]table_name format, using standard
     *                       <a
     *                       href="../../../../../../concepts/tables/#table-name-resolution"
     *                       target="_top">name resolution rules</a> and
     *                       meeting <a
     *                       href="../../../../../../concepts/tables/#table-naming-criteria"
     *                       target="_top">table naming criteria</a>.  This
     *                       table contains a <a
     *                       href="../../../../../../location_intelligence/geo_objects/#geospatial-tracks"
     *                       target="_top">track</a> of geospatial points for
     *                       the matched portion of the graph, a track ID, and
     *                       a score value. Also outputs a details table
     *                       containing a trip ID (that matches the track ID),
     *                       the latitude/longitude pair, the timestamp the
     *                       point was recorded at, and an edge ID
     *                       corresponding to the matched road segment. Must
     *                       not be an existing table of the same name.  The
     *                       default value is ''.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GPS_NOISE
     *                 GPS_NOISE}: GPS noise value (in meters) to remove
     *                 redundant sample points. Use -1 to disable noise
     *                 reduction. The default value accounts for 95% of point
     *                 variation (+ or -5 meters).  The default value is '5.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_SEGMENTS
     *                 NUM_SEGMENTS}: Maximum number of potentially matching
     *                 road segments for each sample point. For the {@code
     *                 markov_chain} solver, the default is 3.  The default
     *                 value is '3'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_RADIUS
     *                 SEARCH_RADIUS}: Maximum search radius used when snapping
     *                 sample points onto potentially matching surrounding
     *                 segments. The default value corresponds to approximately
     *                 100 meters.  The default value is '0.001'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHAIN_WIDTH
     *                 CHAIN_WIDTH}: For the {@code markov_chain} solver only.
     *                 Length of the sample points lookahead window within the
     *                 Markov kernel; the larger the number, the more accurate
     *                 the solution.  The default value is '9'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SOURCE
     *                 SOURCE}: Optional WKT starting point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the starting
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#DESTINATION
     *                 DESTINATION}: Optional WKT ending point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the destination
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PARTIAL_LOADING
     *                 PARTIAL_LOADING}: For the {@code match_supply_demand}
     *                 solver only. When false (non-default), trucks do not
     *                 off-load at the demand (store) side if the remainder is
     *                 less than the store's need
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Partial off-loading at multiple store (demand) locations
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: No partial off-loading allowed if supply is less
     *                 than the store's demand.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_COMBINATIONS
     *                 MAX_COMBINATIONS}: For the {@code match_supply_demand}
     *                 solver only. This is the cutoff for the number of
     *                 generated combinations for sequencing the demand
     *                 locations - can increase this up to 2M.  The default
     *                 value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_SUPPLY_COMBINATIONS
     *                 MAX_SUPPLY_COMBINATIONS}: For the {@code
     *                 match_supply_demand} solver only. This is the cutoff for
     *                 the number of generated combinations for sequencing the
     *                 supply locations if/when 'permute_supplies' is true.
     *                 The default value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#LEFT_TURN_PENALTY
     *                 LEFT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'left turn' if the 'add_turn'
     *                 option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#RIGHT_TURN_PENALTY
     *                 RIGHT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as' right turn' if the
     *                 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#INTERSECTION_PENALTY
     *                 INTERSECTION_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'intersection' if the
     *                 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SHARP_TURN_PENALTY
     *                 SHARP_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'sharp turn' or 'u-turn' if
     *                 the 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#AGGREGATED_OUTPUT
     *                 AGGREGATED_OUTPUT}: For the {@code match_supply_demand}
     *                 solver only. When it is true (default), each record in
     *                 the output table shows a particular truck's scheduled
     *                 cumulative round trip path (MULTILINESTRING) and the
     *                 corresponding aggregated cost. Otherwise, each record
     *                 shows a single scheduled truck route (LINESTRING)
     *                 towards a particular demand location (store id) with its
     *                 corresponding cost.  The default value is 'true'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_TRACKS
     *                 OUTPUT_TRACKS}: For the {@code match_supply_demand}
     *                 solver only. When it is true (non-default), the output
     *                 will be in tracks format for all the round trips of each
     *                 truck in which the timestamps are populated directly
     *                 from the edge weights starting from their originating
     *                 depots.  The default value is 'false'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_TRIP_COST
     *                 MAX_TRIP_COST}: For the {@code match_supply_demand} and
     *                 {@code match_pickup_dropoff} solvers only. If this
     *                 constraint is greater than zero (default) then the
     *                 trucks/rides will skip travelling from one demand/pick
     *                 location to another if the cost between them is greater
     *                 than this number (distance or time). Zero (default)
     *                 value means no check is performed.  The default value is
     *                 '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FILTER_FOLDING_PATHS
     *                 FILTER_FOLDING_PATHS}: For the {@code markov_chain}
     *                 solver only. When true (non-default), the paths per
     *                 sequence combination is checked for folding over
     *                 patterns and can significantly increase the execution
     *                 time depending on the chain width and the number of gps
     *                 samples.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Filter out the folded paths.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Do not filter out the folded paths
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#UNIT_UNLOADING_COST
     *                 UNIT_UNLOADING_COST}: For the {@code
     *                 match_supply_demand} solver only. The unit cost per load
     *                 amount to be delivered. If this value is greater than
     *                 zero (default) then the additional cost of this unit
     *                 load multiplied by the total dropped load will be added
     *                 over to the trip cost to the demand location.  The
     *                 default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_THREADS
     *                 MAX_NUM_THREADS}: For the {@code markov_chain} solver
     *                 only. If specified (greater than zero), the maximum
     *                 number of threads will not be greater than the specified
     *                 value. It can be lower due to the memory and the number
     *                 cores available. Default value of zero allows the
     *                 algorithm to set the maximal number of threads within
     *                 these constraints.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_LIMIT
     *                 SERVICE_LIMIT}: For the {@code match_supply_demand}
     *                 solver only. If specified (greater than zero), any
     *                 supply actor's total service cost (distance or time)
     *                 will be limited by the specified value including
     *                 multiple rounds (if set).  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ENABLE_REUSE
     *                 ENABLE_REUSE}: For the {@code match_supply_demand}
     *                 solver only. If specified (true), all supply actors can
     *                 be scheduled for second rounds from their originating
     *                 depots.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Allows reusing supply actors (trucks, e.g.) for
     *                 scheduling again.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Supply actors are scheduled only once from their
     *                 depots.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_STOPS
     *                 MAX_STOPS}: For the {@code match_supply_demand} solver
     *                 only. If specified (greater than zero), a supply actor
     *                 (truck) can at most have this many stops (demand
     *                 locations) in one round trip. Otherwise, it is
     *                 unlimited. If 'enable_truck_reuse' is on, this condition
     *                 will be applied separately at each round trip use of the
     *                 same truck.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_RADIUS
     *                 SERVICE_RADIUS}: For the {@code match_supply_demand} and
     *                 {@code match_pickup_dropoff} solvers only. If specified
     *                 (greater than zero), it filters the demands/picks
     *                 outside this radius centered around the supply
     *                 actor/ride's originating location (distance or time).
     *                 The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PERMUTE_SUPPLIES
     *                 PERMUTE_SUPPLIES}: For the {@code match_supply_demand}
     *                 solver only. If specified (true), supply side actors are
     *                 permuted for the demand combinations during msdo
     *                 optimization - note that this option increases
     *                 optimization time significantly - use of
     *                 'max_combinations' option is recommended to prevent
     *                 prohibitively long runs
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Generates sequences over supply side permutations if
     *                 total supply is less than twice the total demand
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Permutations are not performed, rather a
     *                 specific order of supplies based on capacity is computed
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#BATCH_TSM_MODE
     *                 BATCH_TSM_MODE}: For the {@code match_supply_demand}
     *                 solver only. When enabled, it sets the number of visits
     *                 on each demand location by a single salesman at each
     *                 trip is considered to be (one) 1, otherwise there is no
     *                 bound.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Sets only one visit per demand location by a salesman
     *                 (tsm mode)
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: No preset limit (usual msdo mode)
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ROUND_TRIP
     *                 ROUND_TRIP}: For the {@code match_supply_demand} solver
     *                 only. When enabled, the supply will have to return back
     *                 to the origination location.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 The optimization is done for trips in round trip manner
     *                 always returning to originating locations
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Supplies do not have to come back to their
     *                 originating locations in their routes. The routes are
     *                 considered finished at the final dropoff.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_CYCLES
     *                 NUM_CYCLES}: For the {@code match_clusters} solver only.
     *                 Terminates the cluster exchange iterations across
     *                 2-step-cycles (outer loop) when quality does not improve
     *                 during iterations.  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_LOOPS_PER_CYCLE
     *                 NUM_LOOPS_PER_CYCLE}: For the {@code match_clusters}
     *                 solver only. Terminates the cluster exchanges within the
     *                 first step iterations of a cycle (inner loop) unless
     *                 convergence is reached.  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_OUTPUT_CLUSTERS
     *                 NUM_OUTPUT_CLUSTERS}: For the {@code match_clusters}
     *                 solver only.  Limits the output to the top
     *                 'num_output_clusters' clusters based on density. Default
     *                 value of zero outputs all clusters.  The default value
     *                 is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_CLUSTERS
     *                 MAX_NUM_CLUSTERS}: For the {@code match_clusters} solver
     *                 only. If set (value greater than zero), it terminates
     *                 when the number of clusters goes below than this number.
     *                 The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CLUSTER_QUALITY_METRIC
     *                 CLUSTER_QUALITY_METRIC}: For the {@code match_clusters}
     *                 solver only. The quality metric for Louvain modularity
     *                 optimization solver.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN
     *                 GIRVAN}: Uses the Newman Girvan quality metric for
     *                 cluster solver
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SPECTRAL
     *                 SPECTRAL}: Applies recursive spectral bisection (RSB)
     *                 partitioning solver
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN
     *                 GIRVAN}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#RESTRICTED_TYPE
     *                 RESTRICTED_TYPE}: For the {@code match_supply_demand}
     *                 solver only. Optimization is performed by restricting
     *                 routes labeled by 'MSDO_ODDEVEN_RESTRICTED' only for
     *                 this supply actor (truck) type
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ODD ODD}:
     *                 Applies odd/even rule restrictions to odd tagged
     *                 vehicles.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#EVEN EVEN}:
     *                 Applies odd/even rule restrictions to even tagged
     *                 vehicles.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}:
     *                 Does not apply odd/even rule restrictions to any
     *                 vehicles.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to the server, amongst
     *                 those containing the corresponding graph, that has the
     *                 most computational bandwidth.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#INVERSE_SOLVE
     *                 INVERSE_SOLVE}: For the {@code match_batch_solves}
     *                 solver only. Solves source-destination pairs using
     *                 inverse shortest path solver.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Solves using inverse shortest path solver.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Solves using direct shortest path solver.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MIN_LOOP_LEVEL
     *                 MIN_LOOP_LEVEL}: For the {@code match_loops} solver
     *                 only. Finds closed loops around each node deducible not
     *                 less than this minimal hop (level) deep.  The default
     *                 value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_LOOP_LEVEL
     *                 MAX_LOOP_LEVEL}: For the {@code match_loops} solver
     *                 only. Finds closed loops around each node deducible not
     *                 more than this maximal hop (level) deep.  The default
     *                 value is '5'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_LIMIT
     *                 SEARCH_LIMIT}: For the {@code match_loops} solver only.
     *                 Searches within this limit of nodes per vertex to detect
     *                 loops. The value zero means there is no limit.  The
     *                 default value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_BATCH_SIZE
     *                 OUTPUT_BATCH_SIZE}: For the {@code match_loops} solver
     *                 only. Uses this value as the batch size of the number of
     *                 loops in flushing(inserting) to the output table.  The
     *                 default value is '1000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CAPACITY
     *                 CHARGING_CAPACITY}: For the {@code
     *                 match_charging_stations} solver only. This is the
     *                 maximum ev-charging capacity of a vehicle (distance in
     *                 meters or time in seconds depending on the unit of the
     *                 graph weights).  The default value is '300000.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CANDIDATES
     *                 CHARGING_CANDIDATES}: For the {@code
     *                 match_charging_stations} solver only. Solver searches
     *                 for this many number of stations closest around each
     *                 base charging location found by capacity.  The default
     *                 value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_PENALTY
     *                 CHARGING_PENALTY}: For the {@code
     *                 match_charging_stations} solver only. This is the
     *                 penalty for full charging.  The default value is
     *                 '30000.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_HOPS
     *                 MAX_HOPS}: For the {@code match_similarity} solver only.
     *                 Searches within this maximum hops for source and target
     *                 node pairs to compute the Jaccard scores.  The default
     *                 value is '3'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRAVERSAL_NODE_LIMIT
     *                 TRAVERSAL_NODE_LIMIT}: For the {@code match_similarity}
     *                 solver only. Limits the traversal depth if it reaches
     *                 this many number of nodes.  The default value is '1000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PAIRED_SIMILARITY
     *                 PAIRED_SIMILARITY}: For the {@code match_similarity}
     *                 solver only. If true, it computes Jaccard score between
     *                 each pair, otherwise it will compute Jaccard from the
     *                 intersection set between the source and target nodes
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FORCE_UNDIRECTED
     *                 FORCE_UNDIRECTED}: For the {@code match_pattern} solver
     *                 only. Pattern matching will be using both pattern and
     *                 graph as undirected if set to true.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public MatchGraphRequest(String graphName, List<String> samplePoints, String solveMethod, String solutionTable, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.samplePoints = (samplePoints == null) ? new ArrayList<String>() : samplePoints;
        this.solveMethod = (solveMethod == null) ? "" : solveMethod;
        this.solutionTable = (solutionTable == null) ? "" : solutionTable;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the underlying geospatial graph resource to match to
     *         using {@code samplePoints}.
     * 
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * 
     * @param graphName  Name of the underlying geospatial graph resource to
     *                   match to using {@code samplePoints}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MatchGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * 
     * @return Sample points used to match to an underlying geospatial
     *         graph. Sample points must be specified using
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#match-identifiers"
     *         target="_top">identifiers</a>;
     *         identifiers are grouped as
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#match-combinations"
     *         target="_top">combinations</a>.
     *         Identifiers can be used with: existing column names, e.g.,
     *         'table.column AS SAMPLE_X'; expressions, e.g.,
     *         'ST_MAKEPOINT(table.x, table.y) AS SAMPLE_WKTPOINT'; or constant
     *         values, e.g.,
     *         '{1, 2, 10} AS SAMPLE_TRIPID'.
     * 
     */
    public List<String> getSamplePoints() {
        return samplePoints;
    }

    /**
     * 
     * @param samplePoints  Sample points used to match to an underlying
     *                      geospatial
     *                      graph. Sample points must be specified using
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#match-identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#match-combinations"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with: existing column
     *                      names, e.g.,
     *                      'table.column AS SAMPLE_X'; expressions, e.g.,
     *                      'ST_MAKEPOINT(table.x, table.y) AS
     *                      SAMPLE_WKTPOINT'; or constant values, e.g.,
     *                      '{1, 2, 10} AS SAMPLE_TRIPID'.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MatchGraphRequest setSamplePoints(List<String> samplePoints) {
        this.samplePoints = (samplePoints == null) ? new ArrayList<String>() : samplePoints;
        return this;
    }

    /**
     * 
     * @return The type of solver to use for graph matching.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *         MARKOV_CHAIN}: Matches {@code samplePoints} to the graph using
     *         the Hidden Markov Model (HMM)-based method, which conducts a
     *         range-tree closest-edge search to find the best combinations of
     *         possible road segments ({@code num_segments}) for each sample
     *         point to create the best route. The route is secured one point
     *         at a time while looking ahead {@code chain_width} number of
     *         points, so the prediction is corrected after each point. This
     *         solution type is the most accurate but also the most
     *         computationally intensive. Related options: {@code num_segments}
     *         and {@code chain_width}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_OD_PAIRS
     *         MATCH_OD_PAIRS}: Matches {@code samplePoints} to find the most
     *         probable path between origin and destination pairs with cost
     *         constraints.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SUPPLY_DEMAND
     *         MATCH_SUPPLY_DEMAND}: Matches {@code samplePoints} to optimize
     *         scheduling multiple supplies (trucks) with varying sizes to
     *         varying demand sites with varying capacities per depot. Related
     *         options: {@code partial_loading} and {@code max_combinations}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_BATCH_SOLVES
     *         MATCH_BATCH_SOLVES}: Matches {@code samplePoints} source and
     *         destination pairs for the shortest path solves in batch mode.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_LOOPS
     *         MATCH_LOOPS}: Matches closed loops (Eulerian paths) originating
     *         and ending at each graph node within min and max hops (levels).
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CHARGING_STATIONS
     *         MATCH_CHARGING_STATIONS}: Matches an optimal path across a
     *         number of ev-charging stations between source and target
     *         locations.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SIMILARITY
     *         MATCH_SIMILARITY}: Matches the intersection set(s) by computing
     *         the Jaccard similarity score between node pairs.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PICKUP_DROPOFF
     *         MATCH_PICKUP_DROPOFF}: Matches the pickups and dropoffs by
     *         optimizing the total trip costs
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CLUSTERS
     *         MATCH_CLUSTERS}: Matches the graph nodes with a cluster index
     *         using Louvain clustering algorithm
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PATTERN
     *         MATCH_PATTERN}: Matches a pattern in the graph
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *         MARKOV_CHAIN}.
     * 
     */
    public String getSolveMethod() {
        return solveMethod;
    }

    /**
     * 
     * @param solveMethod  The type of solver to use for graph matching.
     *                     Supported values:
     *                     <ul>
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}: Matches {@code samplePoints} to the
     *                     graph using the Hidden Markov Model (HMM)-based
     *                     method, which conducts a range-tree closest-edge
     *                     search to find the best combinations of possible
     *                     road segments ({@code num_segments}) for each sample
     *                     point to create the best route. The route is secured
     *                     one point at a time while looking ahead {@code
     *                     chain_width} number of points, so the prediction is
     *                     corrected after each point. This solution type is
     *                     the most accurate but also the most computationally
     *                     intensive. Related options: {@code num_segments} and
     *                     {@code chain_width}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_OD_PAIRS
     *                     MATCH_OD_PAIRS}: Matches {@code samplePoints} to
     *                     find the most probable path between origin and
     *                     destination pairs with cost constraints.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SUPPLY_DEMAND
     *                     MATCH_SUPPLY_DEMAND}: Matches {@code samplePoints}
     *                     to optimize scheduling multiple supplies (trucks)
     *                     with varying sizes to varying demand sites with
     *                     varying capacities per depot. Related options:
     *                     {@code partial_loading} and {@code
     *                     max_combinations}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_BATCH_SOLVES
     *                     MATCH_BATCH_SOLVES}: Matches {@code samplePoints}
     *                     source and destination pairs for the shortest path
     *                     solves in batch mode.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_LOOPS
     *                     MATCH_LOOPS}: Matches closed loops (Eulerian paths)
     *                     originating and ending at each graph node within min
     *                     and max hops (levels).
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CHARGING_STATIONS
     *                     MATCH_CHARGING_STATIONS}: Matches an optimal path
     *                     across a number of ev-charging stations between
     *                     source and target locations.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SIMILARITY
     *                     MATCH_SIMILARITY}: Matches the intersection set(s)
     *                     by computing the Jaccard similarity score between
     *                     node pairs.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PICKUP_DROPOFF
     *                     MATCH_PICKUP_DROPOFF}: Matches the pickups and
     *                     dropoffs by optimizing the total trip costs
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_CLUSTERS
     *                     MATCH_CLUSTERS}: Matches the graph nodes with a
     *                     cluster index using Louvain clustering algorithm
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_PATTERN
     *                     MATCH_PATTERN}: Matches a pattern in the graph
     *                     </ul>
     *                     The default value is {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MatchGraphRequest setSolveMethod(String solveMethod) {
        this.solveMethod = (solveMethod == null) ? "" : solveMethod;
        return this;
    }

    /**
     * 
     * @return The name of the table used to store the results, in
     *         [schema_name.]table_name format, using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  This table contains a
     *         <a
     *         href="../../../../../../location_intelligence/geo_objects/#geospatial-tracks"
     *         target="_top">track</a> of geospatial points for the matched
     *         portion of the graph, a track ID, and a score value. Also
     *         outputs a details table containing a trip ID (that matches the
     *         track ID), the latitude/longitude pair, the timestamp the point
     *         was recorded at, and an edge ID corresponding to the matched
     *         road segment. Must not be an existing table of the same name.
     *         The default value is ''.
     * 
     */
    public String getSolutionTable() {
        return solutionTable;
    }

    /**
     * 
     * @param solutionTable  The name of the table used to store the results,
     *                       in [schema_name.]table_name format, using standard
     *                       <a
     *                       href="../../../../../../concepts/tables/#table-name-resolution"
     *                       target="_top">name resolution rules</a> and
     *                       meeting <a
     *                       href="../../../../../../concepts/tables/#table-naming-criteria"
     *                       target="_top">table naming criteria</a>.  This
     *                       table contains a <a
     *                       href="../../../../../../location_intelligence/geo_objects/#geospatial-tracks"
     *                       target="_top">track</a> of geospatial points for
     *                       the matched portion of the graph, a track ID, and
     *                       a score value. Also outputs a details table
     *                       containing a trip ID (that matches the track ID),
     *                       the latitude/longitude pair, the timestamp the
     *                       point was recorded at, and an edge ID
     *                       corresponding to the matched road segment. Must
     *                       not be an existing table of the same name.  The
     *                       default value is ''.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MatchGraphRequest setSolutionTable(String solutionTable) {
        this.solutionTable = (solutionTable == null) ? "" : solutionTable;
        return this;
    }

    /**
     * 
     * @return Additional parameters
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#GPS_NOISE
     *         GPS_NOISE}: GPS noise value (in meters) to remove redundant
     *         sample points. Use -1 to disable noise reduction. The default
     *         value accounts for 95% of point variation (+ or -5 meters).  The
     *         default value is '5.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NUM_SEGMENTS
     *         NUM_SEGMENTS}: Maximum number of potentially matching road
     *         segments for each sample point. For the {@code markov_chain}
     *         solver, the default is 3.  The default value is '3'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_RADIUS
     *         SEARCH_RADIUS}: Maximum search radius used when snapping sample
     *         points onto potentially matching surrounding segments. The
     *         default value corresponds to approximately 100 meters.  The
     *         default value is '0.001'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#CHAIN_WIDTH
     *         CHAIN_WIDTH}: For the {@code markov_chain} solver only. Length
     *         of the sample points lookahead window within the Markov kernel;
     *         the larger the number, the more accurate the solution.  The
     *         default value is '9'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SOURCE SOURCE}:
     *         Optional WKT starting point from {@code samplePoints} for the
     *         solver. The default behavior for the endpoint is to use time to
     *         determine the starting point.  The default value is 'POINT
     *         NULL'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#DESTINATION
     *         DESTINATION}: Optional WKT ending point from {@code
     *         samplePoints} for the solver. The default behavior for the
     *         endpoint is to use time to determine the destination point.  The
     *         default value is 'POINT NULL'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#PARTIAL_LOADING
     *         PARTIAL_LOADING}: For the {@code match_supply_demand} solver
     *         only. When false (non-default), trucks do not off-load at the
     *         demand (store) side if the remainder is less than the store's
     *         need
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Partial
     *         off-loading at multiple store (demand) locations
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: No
     *         partial off-loading allowed if supply is less than the store's
     *         demand.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_COMBINATIONS
     *         MAX_COMBINATIONS}: For the {@code match_supply_demand} solver
     *         only. This is the cutoff for the number of generated
     *         combinations for sequencing the demand locations - can increase
     *         this up to 2M.  The default value is '10000'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_SUPPLY_COMBINATIONS
     *         MAX_SUPPLY_COMBINATIONS}: For the {@code match_supply_demand}
     *         solver only. This is the cutoff for the number of generated
     *         combinations for sequencing the supply locations if/when
     *         'permute_supplies' is true.  The default value is '10000'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#LEFT_TURN_PENALTY
     *         LEFT_TURN_PENALTY}: This will add an additonal weight over the
     *         edges labelled as 'left turn' if the 'add_turn' option parameter
     *         of the {@link com.gpudb.GPUdb#createGraph(CreateGraphRequest)}
     *         was invoked at graph creation.  The default value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#RIGHT_TURN_PENALTY
     *         RIGHT_TURN_PENALTY}: This will add an additonal weight over the
     *         edges labelled as' right turn' if the 'add_turn' option
     *         parameter of the {@link
     *         com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
     *         graph creation.  The default value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#INTERSECTION_PENALTY
     *         INTERSECTION_PENALTY}: This will add an additonal weight over
     *         the edges labelled as 'intersection' if the 'add_turn' option
     *         parameter of the {@link
     *         com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
     *         graph creation.  The default value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SHARP_TURN_PENALTY
     *         SHARP_TURN_PENALTY}: This will add an additonal weight over the
     *         edges labelled as 'sharp turn' or 'u-turn' if the 'add_turn'
     *         option parameter of the {@link
     *         com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was invoked at
     *         graph creation.  The default value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#AGGREGATED_OUTPUT
     *         AGGREGATED_OUTPUT}: For the {@code match_supply_demand} solver
     *         only. When it is true (default), each record in the output table
     *         shows a particular truck's scheduled cumulative round trip path
     *         (MULTILINESTRING) and the corresponding aggregated cost.
     *         Otherwise, each record shows a single scheduled truck route
     *         (LINESTRING) towards a particular demand location (store id)
     *         with its corresponding cost.  The default value is 'true'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_TRACKS
     *         OUTPUT_TRACKS}: For the {@code match_supply_demand} solver only.
     *         When it is true (non-default), the output will be in tracks
     *         format for all the round trips of each truck in which the
     *         timestamps are populated directly from the edge weights starting
     *         from their originating depots.  The default value is 'false'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_TRIP_COST
     *         MAX_TRIP_COST}: For the {@code match_supply_demand} and {@code
     *         match_pickup_dropoff} solvers only. If this constraint is
     *         greater than zero (default) then the trucks/rides will skip
     *         travelling from one demand/pick location to another if the cost
     *         between them is greater than this number (distance or time).
     *         Zero (default) value means no check is performed.  The default
     *         value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FILTER_FOLDING_PATHS
     *         FILTER_FOLDING_PATHS}: For the {@code markov_chain} solver only.
     *         When true (non-default), the paths per sequence combination is
     *         checked for folding over patterns and can significantly increase
     *         the execution time depending on the chain width and the number
     *         of gps samples.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Filter
     *         out the folded paths.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: Do
     *         not filter out the folded paths
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#UNIT_UNLOADING_COST
     *         UNIT_UNLOADING_COST}: For the {@code match_supply_demand} solver
     *         only. The unit cost per load amount to be delivered. If this
     *         value is greater than zero (default) then the additional cost of
     *         this unit load multiplied by the total dropped load will be
     *         added over to the trip cost to the demand location.  The default
     *         value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_THREADS
     *         MAX_NUM_THREADS}: For the {@code markov_chain} solver only. If
     *         specified (greater than zero), the maximum number of threads
     *         will not be greater than the specified value. It can be lower
     *         due to the memory and the number cores available. Default value
     *         of zero allows the algorithm to set the maximal number of
     *         threads within these constraints.  The default value is '0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_LIMIT
     *         SERVICE_LIMIT}: For the {@code match_supply_demand} solver only.
     *         If specified (greater than zero), any supply actor's total
     *         service cost (distance or time) will be limited by the specified
     *         value including multiple rounds (if set).  The default value is
     *         '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#ENABLE_REUSE
     *         ENABLE_REUSE}: For the {@code match_supply_demand} solver only.
     *         If specified (true), all supply actors can be scheduled for
     *         second rounds from their originating depots.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Allows
     *         reusing supply actors (trucks, e.g.) for scheduling again.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}:
     *         Supply actors are scheduled only once from their depots.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_STOPS
     *         MAX_STOPS}: For the {@code match_supply_demand} solver only. If
     *         specified (greater than zero), a supply actor (truck) can at
     *         most have this many stops (demand locations) in one round trip.
     *         Otherwise, it is unlimited. If 'enable_truck_reuse' is on, this
     *         condition will be applied separately at each round trip use of
     *         the same truck.  The default value is '0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_RADIUS
     *         SERVICE_RADIUS}: For the {@code match_supply_demand} and {@code
     *         match_pickup_dropoff} solvers only. If specified (greater than
     *         zero), it filters the demands/picks outside this radius centered
     *         around the supply actor/ride's originating location (distance or
     *         time).  The default value is '0.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#PERMUTE_SUPPLIES
     *         PERMUTE_SUPPLIES}: For the {@code match_supply_demand} solver
     *         only. If specified (true), supply side actors are permuted for
     *         the demand combinations during msdo optimization - note that
     *         this option increases optimization time significantly - use of
     *         'max_combinations' option is recommended to prevent
     *         prohibitively long runs
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *         Generates sequences over supply side permutations if total
     *         supply is less than twice the total demand
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}:
     *         Permutations are not performed, rather a specific order of
     *         supplies based on capacity is computed
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#BATCH_TSM_MODE
     *         BATCH_TSM_MODE}: For the {@code match_supply_demand} solver
     *         only. When enabled, it sets the number of visits on each demand
     *         location by a single salesman at each trip is considered to be
     *         (one) 1, otherwise there is no bound.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Sets
     *         only one visit per demand location by a salesman (tsm mode)
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}: No
     *         preset limit (usual msdo mode)
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#ROUND_TRIP
     *         ROUND_TRIP}: For the {@code match_supply_demand} solver only.
     *         When enabled, the supply will have to return back to the
     *         origination location.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: The
     *         optimization is done for trips in round trip manner always
     *         returning to originating locations
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}:
     *         Supplies do not have to come back to their originating locations
     *         in their routes. The routes are considered finished at the final
     *         dropoff.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NUM_CYCLES
     *         NUM_CYCLES}: For the {@code match_clusters} solver only.
     *         Terminates the cluster exchange iterations across 2-step-cycles
     *         (outer loop) when quality does not improve during iterations.
     *         The default value is '10'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NUM_LOOPS_PER_CYCLE
     *         NUM_LOOPS_PER_CYCLE}: For the {@code match_clusters} solver
     *         only. Terminates the cluster exchanges within the first step
     *         iterations of a cycle (inner loop) unless convergence is
     *         reached.  The default value is '10'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NUM_OUTPUT_CLUSTERS
     *         NUM_OUTPUT_CLUSTERS}: For the {@code match_clusters} solver
     *         only.  Limits the output to the top 'num_output_clusters'
     *         clusters based on density. Default value of zero outputs all
     *         clusters.  The default value is '0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_CLUSTERS
     *         MAX_NUM_CLUSTERS}: For the {@code match_clusters} solver only.
     *         If set (value greater than zero), it terminates when the number
     *         of clusters goes below than this number.  The default value is
     *         '0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#CLUSTER_QUALITY_METRIC
     *         CLUSTER_QUALITY_METRIC}: For the {@code match_clusters} solver
     *         only. The quality metric for Louvain modularity optimization
     *         solver.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN GIRVAN}:
     *         Uses the Newman Girvan quality metric for cluster solver
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SPECTRAL SPECTRAL}:
     *         Applies recursive spectral bisection (RSB) partitioning solver
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN GIRVAN}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#RESTRICTED_TYPE
     *         RESTRICTED_TYPE}: For the {@code match_supply_demand} solver
     *         only. Optimization is performed by restricting routes labeled by
     *         'MSDO_ODDEVEN_RESTRICTED' only for this supply actor (truck)
     *         type
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#ODD ODD}: Applies
     *         odd/even rule restrictions to odd tagged vehicles.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#EVEN EVEN}: Applies
     *         odd/even rule restrictions to even tagged vehicles.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}: Does
     *         not apply odd/even rule restrictions to any vehicles.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SERVER_ID
     *         SERVER_ID}: Indicates which graph server(s) to send the request
     *         to. Default is to send to the server, amongst those containing
     *         the corresponding graph, that has the most computational
     *         bandwidth.  The default value is ''.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#INVERSE_SOLVE
     *         INVERSE_SOLVE}: For the {@code match_batch_solves} solver only.
     *         Solves source-destination pairs using inverse shortest path
     *         solver.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}: Solves
     *         using inverse shortest path solver.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}:
     *         Solves using direct shortest path solver.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MIN_LOOP_LEVEL
     *         MIN_LOOP_LEVEL}: For the {@code match_loops} solver only. Finds
     *         closed loops around each node deducible not less than this
     *         minimal hop (level) deep.  The default value is '0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_LOOP_LEVEL
     *         MAX_LOOP_LEVEL}: For the {@code match_loops} solver only. Finds
     *         closed loops around each node deducible not more than this
     *         maximal hop (level) deep.  The default value is '5'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_LIMIT
     *         SEARCH_LIMIT}: For the {@code match_loops} solver only. Searches
     *         within this limit of nodes per vertex to detect loops. The value
     *         zero means there is no limit.  The default value is '10000'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_BATCH_SIZE
     *         OUTPUT_BATCH_SIZE}: For the {@code match_loops} solver only.
     *         Uses this value as the batch size of the number of loops in
     *         flushing(inserting) to the output table.  The default value is
     *         '1000'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CAPACITY
     *         CHARGING_CAPACITY}: For the {@code match_charging_stations}
     *         solver only. This is the maximum ev-charging capacity of a
     *         vehicle (distance in meters or time in seconds depending on the
     *         unit of the graph weights).  The default value is '300000.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CANDIDATES
     *         CHARGING_CANDIDATES}: For the {@code match_charging_stations}
     *         solver only. Solver searches for this many number of stations
     *         closest around each base charging location found by capacity.
     *         The default value is '10'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_PENALTY
     *         CHARGING_PENALTY}: For the {@code match_charging_stations}
     *         solver only. This is the penalty for full charging.  The default
     *         value is '30000.0'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#MAX_HOPS MAX_HOPS}:
     *         For the {@code match_similarity} solver only. Searches within
     *         this maximum hops for source and target node pairs to compute
     *         the Jaccard scores.  The default value is '3'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRAVERSAL_NODE_LIMIT
     *         TRAVERSAL_NODE_LIMIT}: For the {@code match_similarity} solver
     *         only. Limits the traversal depth if it reaches this many number
     *         of nodes.  The default value is '1000'.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#PAIRED_SIMILARITY
     *         PAIRED_SIMILARITY}: For the {@code match_similarity} solver
     *         only. If true, it computes Jaccard score between each pair,
     *         otherwise it will compute Jaccard from the intersection set
     *         between the source and target nodes
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FORCE_UNDIRECTED
     *         FORCE_UNDIRECTED}: For the {@code match_pattern} solver only.
     *         Pattern matching will be using both pattern and graph as
     *         undirected if set to true.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.MatchGraphRequest.Options#FALSE FALSE}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GPS_NOISE
     *                 GPS_NOISE}: GPS noise value (in meters) to remove
     *                 redundant sample points. Use -1 to disable noise
     *                 reduction. The default value accounts for 95% of point
     *                 variation (+ or -5 meters).  The default value is '5.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_SEGMENTS
     *                 NUM_SEGMENTS}: Maximum number of potentially matching
     *                 road segments for each sample point. For the {@code
     *                 markov_chain} solver, the default is 3.  The default
     *                 value is '3'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_RADIUS
     *                 SEARCH_RADIUS}: Maximum search radius used when snapping
     *                 sample points onto potentially matching surrounding
     *                 segments. The default value corresponds to approximately
     *                 100 meters.  The default value is '0.001'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHAIN_WIDTH
     *                 CHAIN_WIDTH}: For the {@code markov_chain} solver only.
     *                 Length of the sample points lookahead window within the
     *                 Markov kernel; the larger the number, the more accurate
     *                 the solution.  The default value is '9'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SOURCE
     *                 SOURCE}: Optional WKT starting point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the starting
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#DESTINATION
     *                 DESTINATION}: Optional WKT ending point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the destination
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PARTIAL_LOADING
     *                 PARTIAL_LOADING}: For the {@code match_supply_demand}
     *                 solver only. When false (non-default), trucks do not
     *                 off-load at the demand (store) side if the remainder is
     *                 less than the store's need
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Partial off-loading at multiple store (demand) locations
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: No partial off-loading allowed if supply is less
     *                 than the store's demand.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_COMBINATIONS
     *                 MAX_COMBINATIONS}: For the {@code match_supply_demand}
     *                 solver only. This is the cutoff for the number of
     *                 generated combinations for sequencing the demand
     *                 locations - can increase this up to 2M.  The default
     *                 value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_SUPPLY_COMBINATIONS
     *                 MAX_SUPPLY_COMBINATIONS}: For the {@code
     *                 match_supply_demand} solver only. This is the cutoff for
     *                 the number of generated combinations for sequencing the
     *                 supply locations if/when 'permute_supplies' is true.
     *                 The default value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#LEFT_TURN_PENALTY
     *                 LEFT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'left turn' if the 'add_turn'
     *                 option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#RIGHT_TURN_PENALTY
     *                 RIGHT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as' right turn' if the
     *                 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#INTERSECTION_PENALTY
     *                 INTERSECTION_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'intersection' if the
     *                 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SHARP_TURN_PENALTY
     *                 SHARP_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'sharp turn' or 'u-turn' if
     *                 the 'add_turn' option parameter of the {@link
     *                 com.gpudb.GPUdb#createGraph(CreateGraphRequest)} was
     *                 invoked at graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#AGGREGATED_OUTPUT
     *                 AGGREGATED_OUTPUT}: For the {@code match_supply_demand}
     *                 solver only. When it is true (default), each record in
     *                 the output table shows a particular truck's scheduled
     *                 cumulative round trip path (MULTILINESTRING) and the
     *                 corresponding aggregated cost. Otherwise, each record
     *                 shows a single scheduled truck route (LINESTRING)
     *                 towards a particular demand location (store id) with its
     *                 corresponding cost.  The default value is 'true'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_TRACKS
     *                 OUTPUT_TRACKS}: For the {@code match_supply_demand}
     *                 solver only. When it is true (non-default), the output
     *                 will be in tracks format for all the round trips of each
     *                 truck in which the timestamps are populated directly
     *                 from the edge weights starting from their originating
     *                 depots.  The default value is 'false'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_TRIP_COST
     *                 MAX_TRIP_COST}: For the {@code match_supply_demand} and
     *                 {@code match_pickup_dropoff} solvers only. If this
     *                 constraint is greater than zero (default) then the
     *                 trucks/rides will skip travelling from one demand/pick
     *                 location to another if the cost between them is greater
     *                 than this number (distance or time). Zero (default)
     *                 value means no check is performed.  The default value is
     *                 '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FILTER_FOLDING_PATHS
     *                 FILTER_FOLDING_PATHS}: For the {@code markov_chain}
     *                 solver only. When true (non-default), the paths per
     *                 sequence combination is checked for folding over
     *                 patterns and can significantly increase the execution
     *                 time depending on the chain width and the number of gps
     *                 samples.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Filter out the folded paths.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Do not filter out the folded paths
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#UNIT_UNLOADING_COST
     *                 UNIT_UNLOADING_COST}: For the {@code
     *                 match_supply_demand} solver only. The unit cost per load
     *                 amount to be delivered. If this value is greater than
     *                 zero (default) then the additional cost of this unit
     *                 load multiplied by the total dropped load will be added
     *                 over to the trip cost to the demand location.  The
     *                 default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_THREADS
     *                 MAX_NUM_THREADS}: For the {@code markov_chain} solver
     *                 only. If specified (greater than zero), the maximum
     *                 number of threads will not be greater than the specified
     *                 value. It can be lower due to the memory and the number
     *                 cores available. Default value of zero allows the
     *                 algorithm to set the maximal number of threads within
     *                 these constraints.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_LIMIT
     *                 SERVICE_LIMIT}: For the {@code match_supply_demand}
     *                 solver only. If specified (greater than zero), any
     *                 supply actor's total service cost (distance or time)
     *                 will be limited by the specified value including
     *                 multiple rounds (if set).  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ENABLE_REUSE
     *                 ENABLE_REUSE}: For the {@code match_supply_demand}
     *                 solver only. If specified (true), all supply actors can
     *                 be scheduled for second rounds from their originating
     *                 depots.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Allows reusing supply actors (trucks, e.g.) for
     *                 scheduling again.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Supply actors are scheduled only once from their
     *                 depots.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_STOPS
     *                 MAX_STOPS}: For the {@code match_supply_demand} solver
     *                 only. If specified (greater than zero), a supply actor
     *                 (truck) can at most have this many stops (demand
     *                 locations) in one round trip. Otherwise, it is
     *                 unlimited. If 'enable_truck_reuse' is on, this condition
     *                 will be applied separately at each round trip use of the
     *                 same truck.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVICE_RADIUS
     *                 SERVICE_RADIUS}: For the {@code match_supply_demand} and
     *                 {@code match_pickup_dropoff} solvers only. If specified
     *                 (greater than zero), it filters the demands/picks
     *                 outside this radius centered around the supply
     *                 actor/ride's originating location (distance or time).
     *                 The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PERMUTE_SUPPLIES
     *                 PERMUTE_SUPPLIES}: For the {@code match_supply_demand}
     *                 solver only. If specified (true), supply side actors are
     *                 permuted for the demand combinations during msdo
     *                 optimization - note that this option increases
     *                 optimization time significantly - use of
     *                 'max_combinations' option is recommended to prevent
     *                 prohibitively long runs
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Generates sequences over supply side permutations if
     *                 total supply is less than twice the total demand
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Permutations are not performed, rather a
     *                 specific order of supplies based on capacity is computed
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#BATCH_TSM_MODE
     *                 BATCH_TSM_MODE}: For the {@code match_supply_demand}
     *                 solver only. When enabled, it sets the number of visits
     *                 on each demand location by a single salesman at each
     *                 trip is considered to be (one) 1, otherwise there is no
     *                 bound.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Sets only one visit per demand location by a salesman
     *                 (tsm mode)
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: No preset limit (usual msdo mode)
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ROUND_TRIP
     *                 ROUND_TRIP}: For the {@code match_supply_demand} solver
     *                 only. When enabled, the supply will have to return back
     *                 to the origination location.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 The optimization is done for trips in round trip manner
     *                 always returning to originating locations
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Supplies do not have to come back to their
     *                 originating locations in their routes. The routes are
     *                 considered finished at the final dropoff.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_CYCLES
     *                 NUM_CYCLES}: For the {@code match_clusters} solver only.
     *                 Terminates the cluster exchange iterations across
     *                 2-step-cycles (outer loop) when quality does not improve
     *                 during iterations.  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_LOOPS_PER_CYCLE
     *                 NUM_LOOPS_PER_CYCLE}: For the {@code match_clusters}
     *                 solver only. Terminates the cluster exchanges within the
     *                 first step iterations of a cycle (inner loop) unless
     *                 convergence is reached.  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_OUTPUT_CLUSTERS
     *                 NUM_OUTPUT_CLUSTERS}: For the {@code match_clusters}
     *                 solver only.  Limits the output to the top
     *                 'num_output_clusters' clusters based on density. Default
     *                 value of zero outputs all clusters.  The default value
     *                 is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_CLUSTERS
     *                 MAX_NUM_CLUSTERS}: For the {@code match_clusters} solver
     *                 only. If set (value greater than zero), it terminates
     *                 when the number of clusters goes below than this number.
     *                 The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CLUSTER_QUALITY_METRIC
     *                 CLUSTER_QUALITY_METRIC}: For the {@code match_clusters}
     *                 solver only. The quality metric for Louvain modularity
     *                 optimization solver.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN
     *                 GIRVAN}: Uses the Newman Girvan quality metric for
     *                 cluster solver
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SPECTRAL
     *                 SPECTRAL}: Applies recursive spectral bisection (RSB)
     *                 partitioning solver
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GIRVAN
     *                 GIRVAN}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#RESTRICTED_TYPE
     *                 RESTRICTED_TYPE}: For the {@code match_supply_demand}
     *                 solver only. Optimization is performed by restricting
     *                 routes labeled by 'MSDO_ODDEVEN_RESTRICTED' only for
     *                 this supply actor (truck) type
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ODD ODD}:
     *                 Applies odd/even rule restrictions to odd tagged
     *                 vehicles.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#EVEN EVEN}:
     *                 Applies odd/even rule restrictions to even tagged
     *                 vehicles.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}:
     *                 Does not apply odd/even rule restrictions to any
     *                 vehicles.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NONE NONE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to the server, amongst
     *                 those containing the corresponding graph, that has the
     *                 most computational bandwidth.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#INVERSE_SOLVE
     *                 INVERSE_SOLVE}: For the {@code match_batch_solves}
     *                 solver only. Solves source-destination pairs using
     *                 inverse shortest path solver.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Solves using inverse shortest path solver.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Solves using direct shortest path solver.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MIN_LOOP_LEVEL
     *                 MIN_LOOP_LEVEL}: For the {@code match_loops} solver
     *                 only. Finds closed loops around each node deducible not
     *                 less than this minimal hop (level) deep.  The default
     *                 value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_LOOP_LEVEL
     *                 MAX_LOOP_LEVEL}: For the {@code match_loops} solver
     *                 only. Finds closed loops around each node deducible not
     *                 more than this maximal hop (level) deep.  The default
     *                 value is '5'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_LIMIT
     *                 SEARCH_LIMIT}: For the {@code match_loops} solver only.
     *                 Searches within this limit of nodes per vertex to detect
     *                 loops. The value zero means there is no limit.  The
     *                 default value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#OUTPUT_BATCH_SIZE
     *                 OUTPUT_BATCH_SIZE}: For the {@code match_loops} solver
     *                 only. Uses this value as the batch size of the number of
     *                 loops in flushing(inserting) to the output table.  The
     *                 default value is '1000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CAPACITY
     *                 CHARGING_CAPACITY}: For the {@code
     *                 match_charging_stations} solver only. This is the
     *                 maximum ev-charging capacity of a vehicle (distance in
     *                 meters or time in seconds depending on the unit of the
     *                 graph weights).  The default value is '300000.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_CANDIDATES
     *                 CHARGING_CANDIDATES}: For the {@code
     *                 match_charging_stations} solver only. Solver searches
     *                 for this many number of stations closest around each
     *                 base charging location found by capacity.  The default
     *                 value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHARGING_PENALTY
     *                 CHARGING_PENALTY}: For the {@code
     *                 match_charging_stations} solver only. This is the
     *                 penalty for full charging.  The default value is
     *                 '30000.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_HOPS
     *                 MAX_HOPS}: For the {@code match_similarity} solver only.
     *                 Searches within this maximum hops for source and target
     *                 node pairs to compute the Jaccard scores.  The default
     *                 value is '3'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRAVERSAL_NODE_LIMIT
     *                 TRAVERSAL_NODE_LIMIT}: For the {@code match_similarity}
     *                 solver only. Limits the traversal depth if it reaches
     *                 this many number of nodes.  The default value is '1000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PAIRED_SIMILARITY
     *                 PAIRED_SIMILARITY}: For the {@code match_similarity}
     *                 solver only. If true, it computes Jaccard score between
     *                 each pair, otherwise it will compute Jaccard from the
     *                 intersection set between the source and target nodes
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FORCE_UNDIRECTED
     *                 FORCE_UNDIRECTED}: For the {@code match_pattern} solver
     *                 only. Pattern matching will be using both pattern and
     *                 graph as undirected if set to true.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public MatchGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.samplePoints;

            case 2:
                return this.solveMethod;

            case 3:
                return this.solutionTable;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.samplePoints = (List<String>)value;
                break;

            case 2:
                this.solveMethod = (String)value;
                break;

            case 3:
                this.solutionTable = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        MatchGraphRequest that = (MatchGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.samplePoints.equals( that.samplePoints )
                 && this.solveMethod.equals( that.solveMethod )
                 && this.solutionTable.equals( that.solutionTable )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "samplePoints" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.samplePoints ) );
        builder.append( ", " );
        builder.append( gd.toString( "solveMethod" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.solveMethod ) );
        builder.append( ", " );
        builder.append( gd.toString( "solutionTable" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.solutionTable ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.samplePoints.hashCode();
        hashCode = (31 * hashCode) + this.solveMethod.hashCode();
        hashCode = (31 * hashCode) + this.solutionTable.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
