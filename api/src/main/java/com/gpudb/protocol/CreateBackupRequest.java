/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createBackup(CreateBackupRequest) GPUdb.createBackup}.
 * <p>
 * Creates a database backup containing a current snapshot of existing objects.
 */
public class CreateBackupRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateBackupRequest")
            .namespace("com.gpudb")
            .fields()
                .name("backupName").type().stringType().noDefault()
                .name("backupType").type().stringType().noDefault()
                .name("backupObjectsMap").type().map().values().stringType().noDefault()
                .name("datasinkName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateBackupRequest} parameter
     * {@link #getBackupType() backupType}.
     * <p>
     * Type of backup to create
     */
    public static final class BackupType {
        public static final String INCREMENTAL = "incremental";
        public static final String DIFFERENTIAL = "differential";
        public static final String FULL = "full";

        private BackupType() {  }
    }

    /**
     * A set of string constants for the {@link CreateBackupRequest} parameter
     * {@link #getBackupObjectsMap() backupObjectsMap}.
     * <p>
     * Map of objects to be captured in the backup. Error if empty and creating
     * full backup. Error if non-empty when creating an incremental or
     * differential backup.
     */
    public static final class BackupObjectsMap {
        /**
         * All object types in a schema (excludes permissions, system
         * configuration, host secret key, KiFS directories and user defined
         * functions)
         */
        public static final String ALL = "all";

        /**
         * Database Table
         */
        public static final String TABLE = "table";

        /**
         * Credential
         */
        public static final String CREDENTIAL = "credential";

        /**
         * Context
         */
        public static final String CONTEXT = "context";

        /**
         * Data Sink
         */
        public static final String DATASINK = "datasink";

        /**
         * Data Source
         */
        public static final String DATASOURCE = "datasource";

        /**
         * SQL Procedure
         */
        public static final String STORED_PROCEDURE = "stored_procedure";

        /**
         * Table Monitor (Stream)
         */
        public static final String MONITOR = "monitor";

        /**
         * User (internal and external) and associated permissions
         */
        public static final String USER = "user";

        /**
         * Role, role members (roles or users, recursively) and associated
         * permissions
         */
        public static final String ROLE = "role";

        /**
         * If {@link BackupObjectsMap#TRUE TRUE}, backup the database
         * configuration file.
         * Supported values:
         * <ul>
         *     <li>{@link BackupObjectsMap#FALSE FALSE}
         *     <li>{@link BackupObjectsMap#TRUE TRUE}
         * </ul>
         * The default value is {@link BackupObjectsMap#FALSE FALSE}.
         */
        public static final String CONFIGURATION = "configuration";

        public static final String FALSE = "false";
        public static final String TRUE = "true";

        private BackupObjectsMap() {  }
    }

    /**
     * A set of string constants for the {@link CreateBackupRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Comments to store with this backup
         */
        public static final String COMMENT = "comment";

        /**
         * Calculate checksum for backup files.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String CHECKSUM = "checksum";

        public static final String FALSE = "false";
        public static final String TRUE = "true";

        /**
         * Only save the DDL, do not backup table data.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DDL_ONLY = "ddl_only";

        /**
         * Maximum number of incremental backups to keep. The default value is
         * '-1'.
         */
        public static final String MAX_INCREMENTAL_BACKUPS_TO_KEEP = "max_incremental_backups_to_keep";

        /**
         * When the backup type is differential, delete any intermediate
         * incremental or differential backups. This overrides {@link
         * Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
         * MAX_INCREMENTAL_BACKUPS_TO_KEEP}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DELETE_INTERMEDIATE_BACKUPS = "delete_intermediate_backups";

        /**
         * Replace the existing backup object with a new full backup if it
         * already exists.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RECREATE = "recreate";

        /**
         * Dry run of backup.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        private Options() {  }
    }

    private String backupName;
    private String backupType;
    private Map<String, String> backupObjectsMap;
    private String datasinkName;
    private Map<String, String> options;

    /**
     * Constructs a CreateBackupRequest object with default parameters.
     */
    public CreateBackupRequest() {
        backupName = "";
        backupType = "";
        backupObjectsMap = new LinkedHashMap<>();
        datasinkName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateBackupRequest object with the specified parameters.
     *
     * @param backupName  Name for this backup object. If the backup object
     *                    already exists, only an incremental or differential
     *                    backup can be made, unless recreate is specified
     * @param backupType  Type of backup to create.
     *                    Supported values:
     *                    <ul>
     *                        <li>{@link BackupType#INCREMENTAL INCREMENTAL}
     *                        <li>{@link BackupType#DIFFERENTIAL DIFFERENTIAL}
     *                        <li>{@link BackupType#FULL FULL}
     *                    </ul>
     * @param backupObjectsMap  Map of objects to be captured in the backup.
     *                          Error if empty and creating full backup. Error
     *                          if non-empty when creating an incremental or
     *                          differential backup.
     *                          <ul>
     *                              <li>{@link BackupObjectsMap#ALL ALL}: All
     *                                  object types in a schema (excludes
     *                                  permissions, system configuration, host
     *                                  secret key, KiFS directories and user
     *                                  defined functions)
     *                              <li>{@link BackupObjectsMap#TABLE TABLE}:
     *                                  Database Table
     *                              <li>{@link BackupObjectsMap#CREDENTIAL
     *                                  CREDENTIAL}: Credential
     *                              <li>{@link BackupObjectsMap#CONTEXT
     *                                  CONTEXT}: Context
     *                              <li>{@link BackupObjectsMap#DATASINK
     *                                  DATASINK}: Data Sink
     *                              <li>{@link BackupObjectsMap#DATASOURCE
     *                                  DATASOURCE}: Data Source
     *                              <li>{@link
     *                                  BackupObjectsMap#STORED_PROCEDURE
     *                                  STORED_PROCEDURE}: SQL Procedure
     *                              <li>{@link BackupObjectsMap#MONITOR
     *                                  MONITOR}: Table Monitor (Stream)
     *                              <li>{@link BackupObjectsMap#USER USER}:
     *                                  User (internal and external) and
     *                                  associated permissions
     *                              <li>{@link BackupObjectsMap#ROLE ROLE}:
     *                                  Role, role members (roles or users,
     *                                  recursively) and associated permissions
     *                              <li>{@link BackupObjectsMap#CONFIGURATION
     *                                  CONFIGURATION}: If {@link
     *                                  BackupObjectsMap#TRUE TRUE}, backup the
     *                                  database configuration file.
     *                                  Supported values:
     *                                  <ul>
     *                                      <li>{@link BackupObjectsMap#FALSE
     *                                          FALSE}
     *                                      <li>{@link BackupObjectsMap#TRUE
     *                                          TRUE}
     *                                  </ul>
     *                                  The default value is {@link
     *                                  BackupObjectsMap#FALSE FALSE}.
     *                          </ul>
     * @param datasinkName  Datasink where backup will be stored.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COMMENT COMMENT}: Comments to
     *                         store with this backup
     *                     <li>{@link Options#CHECKSUM CHECKSUM}: Calculate
     *                         checksum for backup files.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only save the
     *                         DDL, do not backup table data.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *                         MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number
     *                         of incremental backups to keep. The default
     *                         value is '-1'.
     *                     <li>{@link Options#DELETE_INTERMEDIATE_BACKUPS
     *                         DELETE_INTERMEDIATE_BACKUPS}: When the backup
     *                         type is differential, delete any intermediate
     *                         incremental or differential backups. This
     *                         overrides {@link
     *                         Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *                         MAX_INCREMENTAL_BACKUPS_TO_KEEP}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#RECREATE RECREATE}: Replace the
     *                         existing backup object with a new full backup if
     *                         it already exists.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of
     *                         backup.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateBackupRequest(String backupName, String backupType, Map<String, String> backupObjectsMap, String datasinkName, Map<String, String> options) {
        this.backupName = (backupName == null) ? "" : backupName;
        this.backupType = (backupType == null) ? "" : backupType;
        this.backupObjectsMap = (backupObjectsMap == null) ? new LinkedHashMap<String, String>() : backupObjectsMap;
        this.datasinkName = (datasinkName == null) ? "" : datasinkName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name for this backup object. If the backup object already exists, only
     * an incremental or differential backup can be made, unless recreate is
     * specified
     *
     * @return The current value of {@code backupName}.
     */
    public String getBackupName() {
        return backupName;
    }

    /**
     * Name for this backup object. If the backup object already exists, only
     * an incremental or differential backup can be made, unless recreate is
     * specified
     *
     * @param backupName  The new value for {@code backupName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateBackupRequest setBackupName(String backupName) {
        this.backupName = (backupName == null) ? "" : backupName;
        return this;
    }

    /**
     * Type of backup to create.
     * Supported values:
     * <ul>
     *     <li>{@link BackupType#INCREMENTAL INCREMENTAL}
     *     <li>{@link BackupType#DIFFERENTIAL DIFFERENTIAL}
     *     <li>{@link BackupType#FULL FULL}
     * </ul>
     *
     * @return The current value of {@code backupType}.
     */
    public String getBackupType() {
        return backupType;
    }

    /**
     * Type of backup to create.
     * Supported values:
     * <ul>
     *     <li>{@link BackupType#INCREMENTAL INCREMENTAL}
     *     <li>{@link BackupType#DIFFERENTIAL DIFFERENTIAL}
     *     <li>{@link BackupType#FULL FULL}
     * </ul>
     *
     * @param backupType  The new value for {@code backupType}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateBackupRequest setBackupType(String backupType) {
        this.backupType = (backupType == null) ? "" : backupType;
        return this;
    }

    /**
     * Map of objects to be captured in the backup. Error if empty and creating
     * full backup. Error if non-empty when creating an incremental or
     * differential backup.
     * <ul>
     *     <li>{@link BackupObjectsMap#ALL ALL}: All object types in a schema
     *         (excludes permissions, system configuration, host secret key,
     *         KiFS directories and user defined functions)
     *     <li>{@link BackupObjectsMap#TABLE TABLE}: Database Table
     *     <li>{@link BackupObjectsMap#CREDENTIAL CREDENTIAL}: Credential
     *     <li>{@link BackupObjectsMap#CONTEXT CONTEXT}: Context
     *     <li>{@link BackupObjectsMap#DATASINK DATASINK}: Data Sink
     *     <li>{@link BackupObjectsMap#DATASOURCE DATASOURCE}: Data Source
     *     <li>{@link BackupObjectsMap#STORED_PROCEDURE STORED_PROCEDURE}: SQL
     *         Procedure
     *     <li>{@link BackupObjectsMap#MONITOR MONITOR}: Table Monitor (Stream)
     *     <li>{@link BackupObjectsMap#USER USER}: User (internal and external)
     *         and associated permissions
     *     <li>{@link BackupObjectsMap#ROLE ROLE}: Role, role members (roles or
     *         users, recursively) and associated permissions
     *     <li>{@link BackupObjectsMap#CONFIGURATION CONFIGURATION}: If {@link
     *         BackupObjectsMap#TRUE TRUE}, backup the database configuration
     *         file.
     *         Supported values:
     *         <ul>
     *             <li>{@link BackupObjectsMap#FALSE FALSE}
     *             <li>{@link BackupObjectsMap#TRUE TRUE}
     *         </ul>
     *         The default value is {@link BackupObjectsMap#FALSE FALSE}.
     * </ul>
     *
     * @return The current value of {@code backupObjectsMap}.
     */
    public Map<String, String> getBackupObjectsMap() {
        return backupObjectsMap;
    }

    /**
     * Map of objects to be captured in the backup. Error if empty and creating
     * full backup. Error if non-empty when creating an incremental or
     * differential backup.
     * <ul>
     *     <li>{@link BackupObjectsMap#ALL ALL}: All object types in a schema
     *         (excludes permissions, system configuration, host secret key,
     *         KiFS directories and user defined functions)
     *     <li>{@link BackupObjectsMap#TABLE TABLE}: Database Table
     *     <li>{@link BackupObjectsMap#CREDENTIAL CREDENTIAL}: Credential
     *     <li>{@link BackupObjectsMap#CONTEXT CONTEXT}: Context
     *     <li>{@link BackupObjectsMap#DATASINK DATASINK}: Data Sink
     *     <li>{@link BackupObjectsMap#DATASOURCE DATASOURCE}: Data Source
     *     <li>{@link BackupObjectsMap#STORED_PROCEDURE STORED_PROCEDURE}: SQL
     *         Procedure
     *     <li>{@link BackupObjectsMap#MONITOR MONITOR}: Table Monitor (Stream)
     *     <li>{@link BackupObjectsMap#USER USER}: User (internal and external)
     *         and associated permissions
     *     <li>{@link BackupObjectsMap#ROLE ROLE}: Role, role members (roles or
     *         users, recursively) and associated permissions
     *     <li>{@link BackupObjectsMap#CONFIGURATION CONFIGURATION}: If {@link
     *         BackupObjectsMap#TRUE TRUE}, backup the database configuration
     *         file.
     *         Supported values:
     *         <ul>
     *             <li>{@link BackupObjectsMap#FALSE FALSE}
     *             <li>{@link BackupObjectsMap#TRUE TRUE}
     *         </ul>
     *         The default value is {@link BackupObjectsMap#FALSE FALSE}.
     * </ul>
     *
     * @param backupObjectsMap  The new value for {@code backupObjectsMap}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateBackupRequest setBackupObjectsMap(Map<String, String> backupObjectsMap) {
        this.backupObjectsMap = (backupObjectsMap == null) ? new LinkedHashMap<String, String>() : backupObjectsMap;
        return this;
    }

    /**
     * Datasink where backup will be stored.
     *
     * @return The current value of {@code datasinkName}.
     */
    public String getDatasinkName() {
        return datasinkName;
    }

    /**
     * Datasink where backup will be stored.
     *
     * @param datasinkName  The new value for {@code datasinkName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateBackupRequest setDatasinkName(String datasinkName) {
        this.datasinkName = (datasinkName == null) ? "" : datasinkName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMMENT COMMENT}: Comments to store with this
     *         backup
     *     <li>{@link Options#CHECKSUM CHECKSUM}: Calculate checksum for backup
     *         files.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only save the DDL, do not
     *         backup table data.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number of incremental
     *         backups to keep. The default value is '-1'.
     *     <li>{@link Options#DELETE_INTERMEDIATE_BACKUPS
     *         DELETE_INTERMEDIATE_BACKUPS}: When the backup type is
     *         differential, delete any intermediate incremental or
     *         differential backups. This overrides {@link
     *         Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RECREATE RECREATE}: Replace the existing backup
     *         object with a new full backup if it already exists.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of backup.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMMENT COMMENT}: Comments to store with this
     *         backup
     *     <li>{@link Options#CHECKSUM CHECKSUM}: Calculate checksum for backup
     *         files.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only save the DDL, do not
     *         backup table data.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number of incremental
     *         backups to keep. The default value is '-1'.
     *     <li>{@link Options#DELETE_INTERMEDIATE_BACKUPS
     *         DELETE_INTERMEDIATE_BACKUPS}: When the backup type is
     *         differential, delete any intermediate incremental or
     *         differential backups. This overrides {@link
     *         Options#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RECREATE RECREATE}: Replace the existing backup
     *         object with a new full backup if it already exists.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of backup.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateBackupRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.backupName;

            case 1:
                return this.backupType;

            case 2:
                return this.backupObjectsMap;

            case 3:
                return this.datasinkName;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.backupName = (String)value;
                break;

            case 1:
                this.backupType = (String)value;
                break;

            case 2:
                this.backupObjectsMap = (Map<String, String>)value;
                break;

            case 3:
                this.datasinkName = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateBackupRequest that = (CreateBackupRequest)obj;

        return ( this.backupName.equals( that.backupName )
                 && this.backupType.equals( that.backupType )
                 && this.backupObjectsMap.equals( that.backupObjectsMap )
                 && this.datasinkName.equals( that.datasinkName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "backupName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupName ) );
        builder.append( ", " );
        builder.append( gd.toString( "backupType" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupType ) );
        builder.append( ", " );
        builder.append( gd.toString( "backupObjectsMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupObjectsMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasinkName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasinkName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.backupName.hashCode();
        hashCode = (31 * hashCode) + this.backupType.hashCode();
        hashCode = (31 * hashCode) + this.backupObjectsMap.hashCode();
        hashCode = (31 * hashCode) + this.datasinkName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
