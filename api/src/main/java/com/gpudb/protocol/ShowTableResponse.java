/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#showTable(ShowTableRequest) GPUdb.showTable}.
 */
public class ShowTableResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowTableResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("tableDescriptions").type().array().items().array().items().stringType().noDefault()
                .name("typeIds").type().array().items().stringType().noDefault()
                .name("typeSchemas").type().array().items().stringType().noDefault()
                .name("typeLabels").type().array().items().stringType().noDefault()
                .name("properties").type().array().items().map().values().array().items().stringType().noDefault()
                .name("additionalInfo").type().array().items().map().values().stringType().noDefault()
                .name("sizes").type().array().items().longType().noDefault()
                .name("fullSizes").type().array().items().longType().noDefault()
                .name("joinSizes").type().array().items().doubleType().noDefault()
                .name("totalSize").type().longType().noDefault()
                .name("totalFullSize").type().longType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ShowTableResponse} parameter
     * {@link #getTableDescriptions() tableDescriptions}.
     * <p>
     * List of descriptions for the respective tables in {@link
     * #getTableNames() tableNames}.
     */
    public static final class TableDescriptions {
        public static final String COLLECTION = "COLLECTION";
        public static final String JOIN = "JOIN";
        public static final String LOGICAL_EXTERNAL_TABLE = "LOGICAL_EXTERNAL_TABLE";
        public static final String LOGICAL_VIEW = "LOGICAL_VIEW";
        public static final String MATERIALIZED_EXTERNAL_TABLE = "MATERIALIZED_EXTERNAL_TABLE";
        public static final String MATERIALIZED_VIEW = "MATERIALIZED_VIEW";
        public static final String MATERIALIZED_VIEW_MEMBER = "MATERIALIZED_VIEW_MEMBER";
        public static final String MATERIALIZED_VIEW_UNDER_CONSTRUCTION = "MATERIALIZED_VIEW_UNDER_CONSTRUCTION";
        public static final String REPLICATED = "REPLICATED";
        public static final String RESULT_TABLE = "RESULT_TABLE";
        public static final String SCHEMA = "SCHEMA";
        public static final String VIEW = "VIEW";

        private TableDescriptions() {  }
    }

    /**
     * A set of string constants for the {@link ShowTableResponse} parameter
     * {@link #getAdditionalInfo() additionalInfo}.
     * <p>
     * Additional information about the respective tables in {@link
     * #getTableNames() tableNames}.
     */
    public static final class AdditionalInfo {
        /**
         * Method by which this table was created.
         * Supported values:
         * <ul>
         *     <li>{@link AdditionalInfo#CREATE_TABLE CREATE_TABLE}
         *     <li>{@link AdditionalInfo#CREATE_PROJECTION CREATE_PROJECTION}
         *     <li>{@link AdditionalInfo#CREATE_UNION CREATE_UNION}
         * </ul>
         */
        public static final String REQUEST_AVRO_TYPE = "request_avro_type";

        public static final String CREATE_TABLE = "create_table";
        public static final String CREATE_PROJECTION = "create_projection";
        public static final String CREATE_UNION = "create_union";

        /**
         * The JSON representation of request creating this table. The default
         * value is ''.
         */
        public static final String REQUEST_AVRO_JSON = "request_avro_json";

        /**
         * No longer used.  Indicated whether the respective table was
         * protected or not.
         * Supported values:
         * <ul>
         *     <li>{@link AdditionalInfo#TRUE TRUE}
         *     <li>{@link AdditionalInfo#FALSE FALSE}
         * </ul>
         */
        public static final String PROTECTED = "protected";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * The number of in-memory bytes per record which is the sum of the
         * byte sizes of all columns with property  'data'.
         */
        public static final String RECORD_BYTES = "record_bytes";

        /**
         * The total size in bytes of all data stored in the table.
         */
        public static final String TOTAL_BYTES = "total_bytes";

        /**
         * [DEPRECATED--use schema_name instead]  This will now contain the
         * name of the schema for the table.  There can only be one schema for
         * a table.
         */
        public static final String COLLECTION_NAMES = "collection_names";

        /**
         * The name of the schema for the table.  There can only be one schema
         * for a table.
         */
        public static final String SCHEMA_NAME = "schema_name";

        /**
         * The value of the <a href="../../../../../../concepts/ttl/"
         * target="_top">time-to-live</a> setting.  Not present for schemas.
         */
        public static final String TABLE_TTL = "table_ttl";

        /**
         * The remaining <a href="../../../../../../concepts/ttl/"
         * target="_top">time-to-live</a>, in minutes, before the respective
         * table expires (-1 if it will never expire).  Not present for
         * schemas.
         */
        public static final String REMAINING_TABLE_TTL = "remaining_table_ttl";

        /**
         * The primary key type of the table (if it has a primary key).
         * Supported values:
         * <ul>
         *     <li>{@link AdditionalInfo#MEMORY MEMORY}: In-memory primary key
         *     <li>{@link AdditionalInfo#DISK DISK}: On-disk primary key
         * </ul>
         */
        public static final String PRIMARY_KEY_TYPE = "primary_key_type";

        /**
         * In-memory primary key
         */
        public static final String MEMORY = "memory";

        /**
         * On-disk primary key
         */
        public static final String DISK = "disk";

        /**
         * Semicolon-separated list of <a
         * href="../../../../../../concepts/tables/#foreign-key"
         * target="_top">foreign keys</a>, of the format 'source_column
         * references target_table(primary_key_column)'. Not present for
         * schemas. The default value is ''.
         */
        public static final String FOREIGN_KEYS = "foreign_keys";

        /**
         * Foreign shard key description of the format: &lt;fk_foreign_key&gt;
         * references &lt;pk_column_name&gt; from
         * &lt;pk_table_name&gt;(&lt;pk_primary_key&gt;). Not present for
         * schemas. The default value is ''.
         */
        public static final String FOREIGN_SHARD_KEY = "foreign_shard_key";

        /**
         * <a href="../../../../../../concepts/tables/#partitioning"
         * target="_top">Partitioning</a> scheme used for this table.
         * Supported values:
         * <ul>
         *     <li>{@link AdditionalInfo#RANGE RANGE}: Using <a
         *         href="../../../../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range partitioning</a>
         *     <li>{@link AdditionalInfo#INTERVAL INTERVAL}: Using <a
         *         href="../../../../../../concepts/tables/#partitioning-by-interval"
         *         target="_top">interval partitioning</a>
         *     <li>{@link AdditionalInfo#LIST LIST}: Using <a
         *         href="../../../../../../concepts/tables/#partitioning-by-list-manual"
         *         target="_top">manual list partitioning</a>
         *     <li>{@link AdditionalInfo#HASH HASH}: Using <a
         *         href="../../../../../../concepts/tables/#partitioning-by-hash"
         *         target="_top">hash partitioning</a>.
         *     <li>{@link AdditionalInfo#SERIES SERIES}: Using <a
         *         href="../../../../../../concepts/tables/#partitioning-by-series"
         *         target="_top">series partitioning</a>.
         *     <li>{@link AdditionalInfo#NONE NONE}: Using no partitioning
         * </ul>
         * The default value is {@link AdditionalInfo#NONE NONE}.
         */
        public static final String PARTITION_TYPE = "partition_type";

        /**
         * Using <a
         * href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range partitioning</a>
         */
        public static final String RANGE = "RANGE";

        /**
         * Using <a
         * href="../../../../../../concepts/tables/#partitioning-by-interval"
         * target="_top">interval partitioning</a>
         */
        public static final String INTERVAL = "INTERVAL";

        /**
         * Using <a
         * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
         * target="_top">manual list partitioning</a>
         */
        public static final String LIST = "LIST";

        /**
         * Using <a
         * href="../../../../../../concepts/tables/#partitioning-by-hash"
         * target="_top">hash partitioning</a>.
         */
        public static final String HASH = "HASH";

        /**
         * Using <a
         * href="../../../../../../concepts/tables/#partitioning-by-series"
         * target="_top">series partitioning</a>.
         */
        public static final String SERIES = "SERIES";

        /**
         * Using no partitioning
         */
        public static final String NONE = "NONE";

        /**
         * Comma-separated list of partition keys. The default value is ''.
         */
        public static final String PARTITION_KEYS = "partition_keys";

        /**
         * Comma-separated list of partition definitions, whose format depends
         * on the partition_type.  See <a
         * href="../../../../../../concepts/tables/#partitioning"
         * target="_top">partitioning</a> documentation for details. The
         * default value is ''.
         */
        public static final String PARTITION_DEFINITIONS = "partition_definitions";

        /**
         * True if partitions will be created for LIST VALUES which don't fall
         * into existing partitions. The default value is ''.
         */
        public static final String IS_AUTOMATIC_PARTITION = "is_automatic_partition";

        /**
         * Semicolon-separated list of indexes. For <a
         * href="../../../../../../concepts/indexes/#column-index"
         * target="_top">column (attribute) indexes</a>, only the indexed
         * column name will be listed. For other index types, the index type
         * will be listed with the colon-delimited indexed column(s) and the
         * comma-delimited index option(s) using the form:
         * &lt;index_type&gt;@&lt;column_list&gt;@&lt;column_options&gt;.  Not
         * present for schemas. The default value is ''.
         */
        public static final String ATTRIBUTE_INDEXES = "attribute_indexes";

        /**
         * JSON-encoded string representing a map of column name to information
         * including memory usage if the {@link
         * com.gpudb.protocol.ShowTableRequest.Options#GET_COLUMN_INFO
         * GET_COLUMN_INFO} option is {@link
         * com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}. The default
         * value is ''.
         */
        public static final String COLUMN_INFO = "column_info";

        /**
         * Returns the global access mode (i.e.&nbsp;lock status) for the
         * table.
         * Supported values:
         * <ul>
         *     <li>{@link AdditionalInfo#NO_ACCESS NO_ACCESS}: No read/write
         *         operations are allowed on this table.
         *     <li>{@link AdditionalInfo#READ_ONLY READ_ONLY}: Only read
         *         operations are allowed on this table.
         *     <li>{@link AdditionalInfo#WRITE_ONLY WRITE_ONLY}: Only write
         *         operations are allowed on this table.
         *     <li>{@link AdditionalInfo#READ_WRITE READ_WRITE}: All read/write
         *         operations are allowed on this table.
         * </ul>
         */
        public static final String GLOBAL_ACCESS_MODE = "global_access_mode";

        /**
         * No read/write operations are allowed on this table.
         */
        public static final String NO_ACCESS = "no_access";

        /**
         * Only read operations are allowed on this table.
         */
        public static final String READ_ONLY = "read_only";

        /**
         * Only write operations are allowed on this table.
         */
        public static final String WRITE_ONLY = "write_only";

        /**
         * All read/write operations are allowed on this table.
         */
        public static final String READ_WRITE = "read_write";

        /**
         * For materialized view the name of the view this member table is part
         * of - if same as the table_name then this is the root of the view.
         * The default value is ''.
         */
        public static final String VIEW_TABLE_NAME = "view_table_name";

        /**
         * True if the view named view_table_name is persisted - reported for
         * each view member.  Means method of recreating this member is saved -
         * not the members data. The default value is ''.
         */
        public static final String IS_VIEW_PERSISTED = "is_view_persisted";

        /**
         * True if some input table of the materialized view that affects this
         * member table has been modified since the last refresh. The default
         * value is ''.
         */
        public static final String IS_DIRTY = "is_dirty";

        /**
         * For materialized view current refresh_method - one of manual,
         * periodic, on_change. The default value is ''.
         */
        public static final String REFRESH_METHOD = "refresh_method";

        /**
         * For materialized view with periodic refresh_method the initial
         * datetime string that periodic refreshes began. The default value is
         * ''.
         */
        public static final String REFRESH_START_TIME = "refresh_start_time";

        /**
         * Time at which the periodic view refresh stops. The default value is
         * ''.
         */
        public static final String REFRESH_STOP_TIME = "refresh_stop_time";

        /**
         * For materialized view with periodic refresh_method the current
         * refresh period in seconds. The default value is ''.
         */
        public static final String REFRESH_PERIOD = "refresh_period";

        /**
         * For materialized view the datetime string indicating the last time
         * the view was refreshed. The default value is ''.
         */
        public static final String LAST_REFRESH_TIME = "last_refresh_time";

        /**
         * For materialized view with periodic refresh_method a datetime string
         * indicating the next time the view is to be refreshed. The default
         * value is ''.
         */
        public static final String NEXT_REFRESH_TIME = "next_refresh_time";

        /**
         * User-specified number of records per chunk, if provided at table
         * creation time. The default value is ''.
         */
        public static final String USER_CHUNK_SIZE = "user_chunk_size";

        /**
         * User-specified target max bytes per column in a chunk, if provided
         * at table creation time. The default value is ''.
         */
        public static final String USER_CHUNK_COLUMN_MAX_MEMORY = "user_chunk_column_max_memory";

        /**
         * User-specified target max bytes for all columns in a chunk, if
         * provided at table creation time. The default value is ''.
         */
        public static final String USER_CHUNK_MAX_MEMORY = "user_chunk_max_memory";

        /**
         * Name of the owner resource group. The default value is ''.
         */
        public static final String OWNER_RESOURCE_GROUP = "owner_resource_group";

        /**
         * Semicolon-separated list of shard keys that were equated in joins
         * (applicable for join tables). The default value is ''.
         */
        public static final String ALTERNATE_SHARD_KEYS = "alternate_shard_keys";

        /**
         * Semicolon-separated list of datasource names the table has
         * subscribed to. The default value is ''.
         */
        public static final String DATASOURCE_SUBSCRIPTIONS = "datasource_subscriptions";

        /**
         * Comma-separated list of null modifying column names. The default
         * value is ''.
         */
        public static final String NULL_MODIFYING_COLUMNS = "null_modifying_columns";

        /**
         * Default <a href="../../../../../../concepts/column_compression/"
         * target="_top">compression codec</a> for the table. The default value
         * is ''.
         */
        public static final String COMPRESSION_CODEC = "compression_codec";

        /**
         * User that created this table or view. The default value is ''.
         */
        public static final String CREATED_BY = "created_by";

        /**
         * Time (UTC) when this table or view was created. The default value is
         * ''.
         */
        public static final String CREATED_TIME = "created_time";

        /**
         * User that last read this table or view. The default value is ''.
         */
        public static final String LAST_READ_BY = "last_read_by";

        /**
         * Time (UTC) when this table or view was last read. The default value
         * is ''.
         */
        public static final String LAST_READ_TIME = "last_read_time";

        /**
         * Count of times this table or view was read. The default value is ''.
         */
        public static final String READ_COUNT = "read_count";

        /**
         * User that last wrote to this table. The default value is ''.
         */
        public static final String LAST_WRITE_BY = "last_write_by";

        /**
         * Time (UTC) when this table was last written. The default value is
         * ''.
         */
        public static final String LAST_WRITE_TIME = "last_write_time";

        /**
         * Count of times this table was written. The default value is ''.
         */
        public static final String WRITE_COUNT = "write_count";

        /**
         * User that last altered this table or view. The default value is ''.
         */
        public static final String LAST_ALTER_BY = "last_alter_by";

        /**
         * Time (UTC) when this table or view was last altered. The default
         * value is ''.
         */
        public static final String LAST_ALTER_TIME = "last_alter_time";

        /**
         * Count of times this table or view was altered. The default value is
         * ''.
         */
        public static final String ALTER_COUNT = "alter_count";

        private AdditionalInfo() {  }
    }

    private String tableName;
    private List<String> tableNames;
    private List<List<String>> tableDescriptions;
    private List<String> typeIds;
    private List<String> typeSchemas;
    private List<String> typeLabels;
    private List<Map<String, List<String>>> properties;
    private List<Map<String, String>> additionalInfo;
    private List<Long> sizes;
    private List<Long> fullSizes;
    private List<Double> joinSizes;
    private long totalSize;
    private long totalFullSize;
    private Map<String, String> info;

    /**
     * Constructs a ShowTableResponse object with default parameters.
     */
    public ShowTableResponse() {
    }

    /**
     * Value of {@link com.gpudb.protocol.ShowTableRequest#getTableName()
     * tableName}.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Value of {@link com.gpudb.protocol.ShowTableRequest#getTableName()
     * tableName}.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest#getTableName() tableName}
     * is a table or view, then the single element of the array is {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName}. If {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName} is a
     * schema and {@link
     * com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN SHOW_CHILDREN}
     * is set to {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE},
     * then this array is populated with the names of all tables and views in
     * the given schema; if {@link
     * com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN SHOW_CHILDREN}
     * is {@link com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}, then
     * this array will only include the schema name itself. If {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName} is an
     * empty string, then the array contains the names of all tables in the
     * user's default schema.
     *
     * @return The current value of {@code tableNames}.
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest#getTableName() tableName}
     * is a table or view, then the single element of the array is {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName}. If {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName} is a
     * schema and {@link
     * com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN SHOW_CHILDREN}
     * is set to {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE},
     * then this array is populated with the names of all tables and views in
     * the given schema; if {@link
     * com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN SHOW_CHILDREN}
     * is {@link com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}, then
     * this array will only include the schema name itself. If {@link
     * com.gpudb.protocol.ShowTableRequest#getTableName() tableName} is an
     * empty string, then the array contains the names of all tables in the
     * user's default schema.
     *
     * @param tableNames  The new value for {@code tableNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * List of descriptions for the respective tables in {@link
     * #getTableNames() tableNames}.
     * Supported values:
     * <ul>
     *     <li>{@link TableDescriptions#COLLECTION COLLECTION}
     *     <li>{@link TableDescriptions#JOIN JOIN}
     *     <li>{@link TableDescriptions#LOGICAL_EXTERNAL_TABLE
     *         LOGICAL_EXTERNAL_TABLE}
     *     <li>{@link TableDescriptions#LOGICAL_VIEW LOGICAL_VIEW}
     *     <li>{@link TableDescriptions#MATERIALIZED_EXTERNAL_TABLE
     *         MATERIALIZED_EXTERNAL_TABLE}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW MATERIALIZED_VIEW}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW_MEMBER
     *         MATERIALIZED_VIEW_MEMBER}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW_UNDER_CONSTRUCTION
     *         MATERIALIZED_VIEW_UNDER_CONSTRUCTION}
     *     <li>{@link TableDescriptions#REPLICATED REPLICATED}
     *     <li>{@link TableDescriptions#RESULT_TABLE RESULT_TABLE}
     *     <li>{@link TableDescriptions#SCHEMA SCHEMA}
     *     <li>{@link TableDescriptions#VIEW VIEW}
     * </ul>
     *
     * @return The current value of {@code tableDescriptions}.
     */
    public List<List<String>> getTableDescriptions() {
        return tableDescriptions;
    }

    /**
     * List of descriptions for the respective tables in {@link
     * #getTableNames() tableNames}.
     * Supported values:
     * <ul>
     *     <li>{@link TableDescriptions#COLLECTION COLLECTION}
     *     <li>{@link TableDescriptions#JOIN JOIN}
     *     <li>{@link TableDescriptions#LOGICAL_EXTERNAL_TABLE
     *         LOGICAL_EXTERNAL_TABLE}
     *     <li>{@link TableDescriptions#LOGICAL_VIEW LOGICAL_VIEW}
     *     <li>{@link TableDescriptions#MATERIALIZED_EXTERNAL_TABLE
     *         MATERIALIZED_EXTERNAL_TABLE}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW MATERIALIZED_VIEW}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW_MEMBER
     *         MATERIALIZED_VIEW_MEMBER}
     *     <li>{@link TableDescriptions#MATERIALIZED_VIEW_UNDER_CONSTRUCTION
     *         MATERIALIZED_VIEW_UNDER_CONSTRUCTION}
     *     <li>{@link TableDescriptions#REPLICATED REPLICATED}
     *     <li>{@link TableDescriptions#RESULT_TABLE RESULT_TABLE}
     *     <li>{@link TableDescriptions#SCHEMA SCHEMA}
     *     <li>{@link TableDescriptions#VIEW VIEW}
     * </ul>
     *
     * @param tableDescriptions  The new value for {@code tableDescriptions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTableDescriptions(List<List<String>> tableDescriptions) {
        this.tableDescriptions = (tableDescriptions == null) ? new ArrayList<List<String>>() : tableDescriptions;
        return this;
    }

    /**
     * Type IDs of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @return The current value of {@code typeIds}.
     */
    public List<String> getTypeIds() {
        return typeIds;
    }

    /**
     * Type IDs of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @param typeIds  The new value for {@code typeIds}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTypeIds(List<String> typeIds) {
        this.typeIds = (typeIds == null) ? new ArrayList<String>() : typeIds;
        return this;
    }

    /**
     * Type schemas of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @return The current value of {@code typeSchemas}.
     */
    public List<String> getTypeSchemas() {
        return typeSchemas;
    }

    /**
     * Type schemas of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @param typeSchemas  The new value for {@code typeSchemas}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTypeSchemas(List<String> typeSchemas) {
        this.typeSchemas = (typeSchemas == null) ? new ArrayList<String>() : typeSchemas;
        return this;
    }

    /**
     * Type labels of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @return The current value of {@code typeLabels}.
     */
    public List<String> getTypeLabels() {
        return typeLabels;
    }

    /**
     * Type labels of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @param typeLabels  The new value for {@code typeLabels}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTypeLabels(List<String> typeLabels) {
        this.typeLabels = (typeLabels == null) ? new ArrayList<String>() : typeLabels;
        return this;
    }

    /**
     * Property maps of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @return The current value of {@code properties}.
     */
    public List<Map<String, List<String>>> getProperties() {
        return properties;
    }

    /**
     * Property maps of the respective tables in {@link #getTableNames()
     * tableNames}.
     *
     * @param properties  The new value for {@code properties}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setProperties(List<Map<String, List<String>>> properties) {
        this.properties = (properties == null) ? new ArrayList<Map<String, List<String>>>() : properties;
        return this;
    }

    /**
     * Additional information about the respective tables in {@link
     * #getTableNames() tableNames}.
     * <ul>
     *     <li>{@link AdditionalInfo#REQUEST_AVRO_TYPE REQUEST_AVRO_TYPE}:
     *         Method by which this table was created.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#CREATE_TABLE CREATE_TABLE}
     *             <li>{@link AdditionalInfo#CREATE_PROJECTION
     *                 CREATE_PROJECTION}
     *             <li>{@link AdditionalInfo#CREATE_UNION CREATE_UNION}
     *         </ul>
     *     <li>{@link AdditionalInfo#REQUEST_AVRO_JSON REQUEST_AVRO_JSON}: The
     *         JSON representation of request creating this table. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#PROTECTED PROTECTED}: No longer used.
     *         Indicated whether the respective table was protected or not.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#TRUE TRUE}
     *             <li>{@link AdditionalInfo#FALSE FALSE}
     *         </ul>
     *     <li>{@link AdditionalInfo#RECORD_BYTES RECORD_BYTES}: The number of
     *         in-memory bytes per record which is the sum of the byte sizes of
     *         all columns with property  'data'.
     *     <li>{@link AdditionalInfo#TOTAL_BYTES TOTAL_BYTES}: The total size
     *         in bytes of all data stored in the table.
     *     <li>{@link AdditionalInfo#COLLECTION_NAMES COLLECTION_NAMES}:
     *         [DEPRECATED--use schema_name instead]  This will now contain the
     *         name of the schema for the table.  There can only be one schema
     *         for a table.
     *     <li>{@link AdditionalInfo#SCHEMA_NAME SCHEMA_NAME}: The name of the
     *         schema for the table.  There can only be one schema for a table.
     *     <li>{@link AdditionalInfo#TABLE_TTL TABLE_TTL}: The value of the <a
     *         href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a> setting.  Not present for
     *         schemas.
     *     <li>{@link AdditionalInfo#REMAINING_TABLE_TTL REMAINING_TABLE_TTL}:
     *         The remaining <a href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a>, in minutes, before the
     *         respective table expires (-1 if it will never expire).  Not
     *         present for schemas.
     *     <li>{@link AdditionalInfo#PRIMARY_KEY_TYPE PRIMARY_KEY_TYPE}: The
     *         primary key type of the table (if it has a primary key).
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#MEMORY MEMORY}: In-memory primary
     *                 key
     *             <li>{@link AdditionalInfo#DISK DISK}: On-disk primary key
     *         </ul>
     *     <li>{@link AdditionalInfo#FOREIGN_KEYS FOREIGN_KEYS}:
     *         Semicolon-separated list of <a
     *         href="../../../../../../concepts/tables/#foreign-key"
     *         target="_top">foreign keys</a>, of the format 'source_column
     *         references target_table(primary_key_column)'. Not present for
     *         schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#FOREIGN_SHARD_KEY FOREIGN_SHARD_KEY}:
     *         Foreign shard key description of the format:
     *         &lt;fk_foreign_key&gt; references &lt;pk_column_name&gt; from
     *         &lt;pk_table_name&gt;(&lt;pk_primary_key&gt;). Not present for
     *         schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#PARTITION_TYPE PARTITION_TYPE}: <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">Partitioning</a> scheme used for this table.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#RANGE RANGE}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-range"
     *                 target="_top">range partitioning</a>
     *             <li>{@link AdditionalInfo#INTERVAL INTERVAL}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>
     *             <li>{@link AdditionalInfo#LIST LIST}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                 target="_top">manual list partitioning</a>
     *             <li>{@link AdditionalInfo#HASH HASH}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                 target="_top">hash partitioning</a>.
     *             <li>{@link AdditionalInfo#SERIES SERIES}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-series"
     *                 target="_top">series partitioning</a>.
     *             <li>{@link AdditionalInfo#NONE NONE}: Using no partitioning
     *         </ul>
     *         The default value is {@link AdditionalInfo#NONE NONE}.
     *     <li>{@link AdditionalInfo#PARTITION_KEYS PARTITION_KEYS}:
     *         Comma-separated list of partition keys. The default value is ''.
     *     <li>{@link AdditionalInfo#PARTITION_DEFINITIONS
     *         PARTITION_DEFINITIONS}: Comma-separated list of partition
     *         definitions, whose format depends on the partition_type.  See <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">partitioning</a> documentation for details. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#IS_AUTOMATIC_PARTITION
     *         IS_AUTOMATIC_PARTITION}: True if partitions will be created for
     *         LIST VALUES which don't fall into existing partitions. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#ATTRIBUTE_INDEXES ATTRIBUTE_INDEXES}:
     *         Semicolon-separated list of indexes. For <a
     *         href="../../../../../../concepts/indexes/#column-index"
     *         target="_top">column (attribute) indexes</a>, only the indexed
     *         column name will be listed. For other index types, the index
     *         type will be listed with the colon-delimited indexed column(s)
     *         and the comma-delimited index option(s) using the form:
     *         &lt;index_type&gt;@&lt;column_list&gt;@&lt;column_options&gt;.
     *         Not present for schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#COLUMN_INFO COLUMN_INFO}: JSON-encoded
     *         string representing a map of column name to information
     *         including memory usage if the {@link
     *         com.gpudb.protocol.ShowTableRequest.Options#GET_COLUMN_INFO
     *         GET_COLUMN_INFO} option is {@link
     *         com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#GLOBAL_ACCESS_MODE GLOBAL_ACCESS_MODE}:
     *         Returns the global access mode (i.e. lock status) for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#NO_ACCESS NO_ACCESS}: No
     *                 read/write operations are allowed on this table.
     *             <li>{@link AdditionalInfo#READ_ONLY READ_ONLY}: Only read
     *                 operations are allowed on this table.
     *             <li>{@link AdditionalInfo#WRITE_ONLY WRITE_ONLY}: Only write
     *                 operations are allowed on this table.
     *             <li>{@link AdditionalInfo#READ_WRITE READ_WRITE}: All
     *                 read/write operations are allowed on this table.
     *         </ul>
     *     <li>{@link AdditionalInfo#VIEW_TABLE_NAME VIEW_TABLE_NAME}: For
     *         materialized view the name of the view this member table is part
     *         of - if same as the table_name then this is the root of the
     *         view. The default value is ''.
     *     <li>{@link AdditionalInfo#IS_VIEW_PERSISTED IS_VIEW_PERSISTED}: True
     *         if the view named view_table_name is persisted - reported for
     *         each view member.  Means method of recreating this member is
     *         saved - not the members data. The default value is ''.
     *     <li>{@link AdditionalInfo#IS_DIRTY IS_DIRTY}: True if some input
     *         table of the materialized view that affects this member table
     *         has been modified since the last refresh. The default value is
     *         ''.
     *     <li>{@link AdditionalInfo#REFRESH_METHOD REFRESH_METHOD}: For
     *         materialized view current refresh_method - one of manual,
     *         periodic, on_change. The default value is ''.
     *     <li>{@link AdditionalInfo#REFRESH_START_TIME REFRESH_START_TIME}:
     *         For materialized view with periodic refresh_method the initial
     *         datetime string that periodic refreshes began. The default value
     *         is ''.
     *     <li>{@link AdditionalInfo#REFRESH_STOP_TIME REFRESH_STOP_TIME}: Time
     *         at which the periodic view refresh stops. The default value is
     *         ''.
     *     <li>{@link AdditionalInfo#REFRESH_PERIOD REFRESH_PERIOD}: For
     *         materialized view with periodic refresh_method the current
     *         refresh period in seconds. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_REFRESH_TIME LAST_REFRESH_TIME}: For
     *         materialized view the datetime string indicating the last time
     *         the view was refreshed. The default value is ''.
     *     <li>{@link AdditionalInfo#NEXT_REFRESH_TIME NEXT_REFRESH_TIME}: For
     *         materialized view with periodic refresh_method a datetime string
     *         indicating the next time the view is to be refreshed. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_SIZE USER_CHUNK_SIZE}:
     *         User-specified number of records per chunk, if provided at table
     *         creation time. The default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_COLUMN_MAX_MEMORY
     *         USER_CHUNK_COLUMN_MAX_MEMORY}: User-specified target max bytes
     *         per column in a chunk, if provided at table creation time. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_MAX_MEMORY
     *         USER_CHUNK_MAX_MEMORY}: User-specified target max bytes for all
     *         columns in a chunk, if provided at table creation time. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#OWNER_RESOURCE_GROUP
     *         OWNER_RESOURCE_GROUP}: Name of the owner resource group. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#ALTERNATE_SHARD_KEYS
     *         ALTERNATE_SHARD_KEYS}: Semicolon-separated list of shard keys
     *         that were equated in joins (applicable for join tables). The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#DATASOURCE_SUBSCRIPTIONS
     *         DATASOURCE_SUBSCRIPTIONS}: Semicolon-separated list of
     *         datasource names the table has subscribed to. The default value
     *         is ''.
     *     <li>{@link AdditionalInfo#NULL_MODIFYING_COLUMNS
     *         NULL_MODIFYING_COLUMNS}: Comma-separated list of null modifying
     *         column names. The default value is ''.
     *     <li>{@link AdditionalInfo#COMPRESSION_CODEC COMPRESSION_CODEC}:
     *         Default <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for the table. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#CREATED_BY CREATED_BY}: User that created
     *         this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#CREATED_TIME CREATED_TIME}: Time (UTC)
     *         when this table or view was created. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_READ_BY LAST_READ_BY}: User that last
     *         read this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_READ_TIME LAST_READ_TIME}: Time (UTC)
     *         when this table or view was last read. The default value is ''.
     *     <li>{@link AdditionalInfo#READ_COUNT READ_COUNT}: Count of times
     *         this table or view was read. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_WRITE_BY LAST_WRITE_BY}: User that
     *         last wrote to this table. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_WRITE_TIME LAST_WRITE_TIME}: Time
     *         (UTC) when this table was last written. The default value is ''.
     *     <li>{@link AdditionalInfo#WRITE_COUNT WRITE_COUNT}: Count of times
     *         this table was written. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_ALTER_BY LAST_ALTER_BY}: User that
     *         last altered this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_ALTER_TIME LAST_ALTER_TIME}: Time
     *         (UTC) when this table or view was last altered. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#ALTER_COUNT ALTER_COUNT}: Count of times
     *         this table or view was altered. The default value is ''.
     * </ul>
     *
     * @return The current value of {@code additionalInfo}.
     */
    public List<Map<String, String>> getAdditionalInfo() {
        return additionalInfo;
    }

    /**
     * Additional information about the respective tables in {@link
     * #getTableNames() tableNames}.
     * <ul>
     *     <li>{@link AdditionalInfo#REQUEST_AVRO_TYPE REQUEST_AVRO_TYPE}:
     *         Method by which this table was created.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#CREATE_TABLE CREATE_TABLE}
     *             <li>{@link AdditionalInfo#CREATE_PROJECTION
     *                 CREATE_PROJECTION}
     *             <li>{@link AdditionalInfo#CREATE_UNION CREATE_UNION}
     *         </ul>
     *     <li>{@link AdditionalInfo#REQUEST_AVRO_JSON REQUEST_AVRO_JSON}: The
     *         JSON representation of request creating this table. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#PROTECTED PROTECTED}: No longer used.
     *         Indicated whether the respective table was protected or not.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#TRUE TRUE}
     *             <li>{@link AdditionalInfo#FALSE FALSE}
     *         </ul>
     *     <li>{@link AdditionalInfo#RECORD_BYTES RECORD_BYTES}: The number of
     *         in-memory bytes per record which is the sum of the byte sizes of
     *         all columns with property  'data'.
     *     <li>{@link AdditionalInfo#TOTAL_BYTES TOTAL_BYTES}: The total size
     *         in bytes of all data stored in the table.
     *     <li>{@link AdditionalInfo#COLLECTION_NAMES COLLECTION_NAMES}:
     *         [DEPRECATED--use schema_name instead]  This will now contain the
     *         name of the schema for the table.  There can only be one schema
     *         for a table.
     *     <li>{@link AdditionalInfo#SCHEMA_NAME SCHEMA_NAME}: The name of the
     *         schema for the table.  There can only be one schema for a table.
     *     <li>{@link AdditionalInfo#TABLE_TTL TABLE_TTL}: The value of the <a
     *         href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a> setting.  Not present for
     *         schemas.
     *     <li>{@link AdditionalInfo#REMAINING_TABLE_TTL REMAINING_TABLE_TTL}:
     *         The remaining <a href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a>, in minutes, before the
     *         respective table expires (-1 if it will never expire).  Not
     *         present for schemas.
     *     <li>{@link AdditionalInfo#PRIMARY_KEY_TYPE PRIMARY_KEY_TYPE}: The
     *         primary key type of the table (if it has a primary key).
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#MEMORY MEMORY}: In-memory primary
     *                 key
     *             <li>{@link AdditionalInfo#DISK DISK}: On-disk primary key
     *         </ul>
     *     <li>{@link AdditionalInfo#FOREIGN_KEYS FOREIGN_KEYS}:
     *         Semicolon-separated list of <a
     *         href="../../../../../../concepts/tables/#foreign-key"
     *         target="_top">foreign keys</a>, of the format 'source_column
     *         references target_table(primary_key_column)'. Not present for
     *         schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#FOREIGN_SHARD_KEY FOREIGN_SHARD_KEY}:
     *         Foreign shard key description of the format:
     *         &lt;fk_foreign_key&gt; references &lt;pk_column_name&gt; from
     *         &lt;pk_table_name&gt;(&lt;pk_primary_key&gt;). Not present for
     *         schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#PARTITION_TYPE PARTITION_TYPE}: <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">Partitioning</a> scheme used for this table.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#RANGE RANGE}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-range"
     *                 target="_top">range partitioning</a>
     *             <li>{@link AdditionalInfo#INTERVAL INTERVAL}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>
     *             <li>{@link AdditionalInfo#LIST LIST}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                 target="_top">manual list partitioning</a>
     *             <li>{@link AdditionalInfo#HASH HASH}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                 target="_top">hash partitioning</a>.
     *             <li>{@link AdditionalInfo#SERIES SERIES}: Using <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-series"
     *                 target="_top">series partitioning</a>.
     *             <li>{@link AdditionalInfo#NONE NONE}: Using no partitioning
     *         </ul>
     *         The default value is {@link AdditionalInfo#NONE NONE}.
     *     <li>{@link AdditionalInfo#PARTITION_KEYS PARTITION_KEYS}:
     *         Comma-separated list of partition keys. The default value is ''.
     *     <li>{@link AdditionalInfo#PARTITION_DEFINITIONS
     *         PARTITION_DEFINITIONS}: Comma-separated list of partition
     *         definitions, whose format depends on the partition_type.  See <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">partitioning</a> documentation for details. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#IS_AUTOMATIC_PARTITION
     *         IS_AUTOMATIC_PARTITION}: True if partitions will be created for
     *         LIST VALUES which don't fall into existing partitions. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#ATTRIBUTE_INDEXES ATTRIBUTE_INDEXES}:
     *         Semicolon-separated list of indexes. For <a
     *         href="../../../../../../concepts/indexes/#column-index"
     *         target="_top">column (attribute) indexes</a>, only the indexed
     *         column name will be listed. For other index types, the index
     *         type will be listed with the colon-delimited indexed column(s)
     *         and the comma-delimited index option(s) using the form:
     *         &lt;index_type&gt;@&lt;column_list&gt;@&lt;column_options&gt;.
     *         Not present for schemas. The default value is ''.
     *     <li>{@link AdditionalInfo#COLUMN_INFO COLUMN_INFO}: JSON-encoded
     *         string representing a map of column name to information
     *         including memory usage if the {@link
     *         com.gpudb.protocol.ShowTableRequest.Options#GET_COLUMN_INFO
     *         GET_COLUMN_INFO} option is {@link
     *         com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#GLOBAL_ACCESS_MODE GLOBAL_ACCESS_MODE}:
     *         Returns the global access mode (i.e. lock status) for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link AdditionalInfo#NO_ACCESS NO_ACCESS}: No
     *                 read/write operations are allowed on this table.
     *             <li>{@link AdditionalInfo#READ_ONLY READ_ONLY}: Only read
     *                 operations are allowed on this table.
     *             <li>{@link AdditionalInfo#WRITE_ONLY WRITE_ONLY}: Only write
     *                 operations are allowed on this table.
     *             <li>{@link AdditionalInfo#READ_WRITE READ_WRITE}: All
     *                 read/write operations are allowed on this table.
     *         </ul>
     *     <li>{@link AdditionalInfo#VIEW_TABLE_NAME VIEW_TABLE_NAME}: For
     *         materialized view the name of the view this member table is part
     *         of - if same as the table_name then this is the root of the
     *         view. The default value is ''.
     *     <li>{@link AdditionalInfo#IS_VIEW_PERSISTED IS_VIEW_PERSISTED}: True
     *         if the view named view_table_name is persisted - reported for
     *         each view member.  Means method of recreating this member is
     *         saved - not the members data. The default value is ''.
     *     <li>{@link AdditionalInfo#IS_DIRTY IS_DIRTY}: True if some input
     *         table of the materialized view that affects this member table
     *         has been modified since the last refresh. The default value is
     *         ''.
     *     <li>{@link AdditionalInfo#REFRESH_METHOD REFRESH_METHOD}: For
     *         materialized view current refresh_method - one of manual,
     *         periodic, on_change. The default value is ''.
     *     <li>{@link AdditionalInfo#REFRESH_START_TIME REFRESH_START_TIME}:
     *         For materialized view with periodic refresh_method the initial
     *         datetime string that periodic refreshes began. The default value
     *         is ''.
     *     <li>{@link AdditionalInfo#REFRESH_STOP_TIME REFRESH_STOP_TIME}: Time
     *         at which the periodic view refresh stops. The default value is
     *         ''.
     *     <li>{@link AdditionalInfo#REFRESH_PERIOD REFRESH_PERIOD}: For
     *         materialized view with periodic refresh_method the current
     *         refresh period in seconds. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_REFRESH_TIME LAST_REFRESH_TIME}: For
     *         materialized view the datetime string indicating the last time
     *         the view was refreshed. The default value is ''.
     *     <li>{@link AdditionalInfo#NEXT_REFRESH_TIME NEXT_REFRESH_TIME}: For
     *         materialized view with periodic refresh_method a datetime string
     *         indicating the next time the view is to be refreshed. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_SIZE USER_CHUNK_SIZE}:
     *         User-specified number of records per chunk, if provided at table
     *         creation time. The default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_COLUMN_MAX_MEMORY
     *         USER_CHUNK_COLUMN_MAX_MEMORY}: User-specified target max bytes
     *         per column in a chunk, if provided at table creation time. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#USER_CHUNK_MAX_MEMORY
     *         USER_CHUNK_MAX_MEMORY}: User-specified target max bytes for all
     *         columns in a chunk, if provided at table creation time. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#OWNER_RESOURCE_GROUP
     *         OWNER_RESOURCE_GROUP}: Name of the owner resource group. The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#ALTERNATE_SHARD_KEYS
     *         ALTERNATE_SHARD_KEYS}: Semicolon-separated list of shard keys
     *         that were equated in joins (applicable for join tables). The
     *         default value is ''.
     *     <li>{@link AdditionalInfo#DATASOURCE_SUBSCRIPTIONS
     *         DATASOURCE_SUBSCRIPTIONS}: Semicolon-separated list of
     *         datasource names the table has subscribed to. The default value
     *         is ''.
     *     <li>{@link AdditionalInfo#NULL_MODIFYING_COLUMNS
     *         NULL_MODIFYING_COLUMNS}: Comma-separated list of null modifying
     *         column names. The default value is ''.
     *     <li>{@link AdditionalInfo#COMPRESSION_CODEC COMPRESSION_CODEC}:
     *         Default <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for the table. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#CREATED_BY CREATED_BY}: User that created
     *         this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#CREATED_TIME CREATED_TIME}: Time (UTC)
     *         when this table or view was created. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_READ_BY LAST_READ_BY}: User that last
     *         read this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_READ_TIME LAST_READ_TIME}: Time (UTC)
     *         when this table or view was last read. The default value is ''.
     *     <li>{@link AdditionalInfo#READ_COUNT READ_COUNT}: Count of times
     *         this table or view was read. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_WRITE_BY LAST_WRITE_BY}: User that
     *         last wrote to this table. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_WRITE_TIME LAST_WRITE_TIME}: Time
     *         (UTC) when this table was last written. The default value is ''.
     *     <li>{@link AdditionalInfo#WRITE_COUNT WRITE_COUNT}: Count of times
     *         this table was written. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_ALTER_BY LAST_ALTER_BY}: User that
     *         last altered this table or view. The default value is ''.
     *     <li>{@link AdditionalInfo#LAST_ALTER_TIME LAST_ALTER_TIME}: Time
     *         (UTC) when this table or view was last altered. The default
     *         value is ''.
     *     <li>{@link AdditionalInfo#ALTER_COUNT ALTER_COUNT}: Count of times
     *         this table or view was altered. The default value is ''.
     * </ul>
     *
     * @param additionalInfo  The new value for {@code additionalInfo}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setAdditionalInfo(List<Map<String, String>> additionalInfo) {
        this.additionalInfo = (additionalInfo == null) ? new ArrayList<Map<String, String>>() : additionalInfo;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of records of each corresponding
     * table in {@link #getTableNames() tableNames}.  Otherwise, an empty
     * array.
     *
     * @return The current value of {@code sizes}.
     */
    public List<Long> getSizes() {
        return sizes;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of records of each corresponding
     * table in {@link #getTableNames() tableNames}.  Otherwise, an empty
     * array.
     *
     * @param sizes  The new value for {@code sizes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setSizes(List<Long> sizes) {
        this.sizes = (sizes == null) ? new ArrayList<Long>() : sizes;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of records of each corresponding
     * table in {@link #getTableNames() tableNames} (same values as {@link
     * #getSizes() sizes}).  Otherwise, an empty array.
     *
     * @return The current value of {@code fullSizes}.
     */
    public List<Long> getFullSizes() {
        return fullSizes;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of records of each corresponding
     * table in {@link #getTableNames() tableNames} (same values as {@link
     * #getSizes() sizes}).  Otherwise, an empty array.
     *
     * @param fullSizes  The new value for {@code fullSizes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setFullSizes(List<Long> fullSizes) {
        this.fullSizes = (fullSizes == null) ? new ArrayList<Long>() : fullSizes;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of unfiltered records in the cross
     * product of the sub-tables of each corresponding join-table in {@link
     * #getTableNames() tableNames}. For simple tables, this number will be the
     * same as {@link #getSizes() sizes}.  For join-tables, this value gives
     * the number of joined-table rows that must be processed by any aggregate
     * functions operating on the table.  Otherwise, (if {@link
     * com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES GET_SIZES} is
     * {@link com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}), an
     * empty array.
     *
     * @return The current value of {@code joinSizes}.
     */
    public List<Double> getJoinSizes() {
        return joinSizes;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, an array containing the number of unfiltered records in the cross
     * product of the sub-tables of each corresponding join-table in {@link
     * #getTableNames() tableNames}. For simple tables, this number will be the
     * same as {@link #getSizes() sizes}.  For join-tables, this value gives
     * the number of joined-table rows that must be processed by any aggregate
     * functions operating on the table.  Otherwise, (if {@link
     * com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES GET_SIZES} is
     * {@link com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}), an
     * empty array.
     *
     * @param joinSizes  The new value for {@code joinSizes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setJoinSizes(List<Double> joinSizes) {
        this.joinSizes = (joinSizes == null) ? new ArrayList<Double>() : joinSizes;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, the sum of the elements of {@link #getSizes() sizes}.  Otherwise,
     * -1.
     *
     * @return The current value of {@code totalSize}.
     */
    public long getTotalSize() {
        return totalSize;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, the sum of the elements of {@link #getSizes() sizes}.  Otherwise,
     * -1.
     *
     * @param totalSize  The new value for {@code totalSize}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTotalSize(long totalSize) {
        this.totalSize = totalSize;
        return this;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, the sum of the elements of {@link #getFullSizes() fullSizes}
     * (same value as {@link #getTotalSize() totalSize}).  Otherwise, -1.
     *
     * @return The current value of {@code totalFullSize}.
     */
    public long getTotalFullSize() {
        return totalFullSize;
    }

    /**
     * If {@link com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     * GET_SIZES} is {@link com.gpudb.protocol.ShowTableRequest.Options#TRUE
     * TRUE}, the sum of the elements of {@link #getFullSizes() fullSizes}
     * (same value as {@link #getTotalSize() totalSize}).  Otherwise, -1.
     *
     * @param totalFullSize  The new value for {@code totalFullSize}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setTotalFullSize(long totalFullSize) {
        this.totalFullSize = totalFullSize;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowTableResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.tableNames;

            case 2:
                return this.tableDescriptions;

            case 3:
                return this.typeIds;

            case 4:
                return this.typeSchemas;

            case 5:
                return this.typeLabels;

            case 6:
                return this.properties;

            case 7:
                return this.additionalInfo;

            case 8:
                return this.sizes;

            case 9:
                return this.fullSizes;

            case 10:
                return this.joinSizes;

            case 11:
                return this.totalSize;

            case 12:
                return this.totalFullSize;

            case 13:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.tableNames = (List<String>)value;
                break;

            case 2:
                this.tableDescriptions = (List<List<String>>)value;
                break;

            case 3:
                this.typeIds = (List<String>)value;
                break;

            case 4:
                this.typeSchemas = (List<String>)value;
                break;

            case 5:
                this.typeLabels = (List<String>)value;
                break;

            case 6:
                this.properties = (List<Map<String, List<String>>>)value;
                break;

            case 7:
                this.additionalInfo = (List<Map<String, String>>)value;
                break;

            case 8:
                this.sizes = (List<Long>)value;
                break;

            case 9:
                this.fullSizes = (List<Long>)value;
                break;

            case 10:
                this.joinSizes = (List<Double>)value;
                break;

            case 11:
                this.totalSize = (Long)value;
                break;

            case 12:
                this.totalFullSize = (Long)value;
                break;

            case 13:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowTableResponse that = (ShowTableResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.tableNames.equals( that.tableNames )
                 && this.tableDescriptions.equals( that.tableDescriptions )
                 && this.typeIds.equals( that.typeIds )
                 && this.typeSchemas.equals( that.typeSchemas )
                 && this.typeLabels.equals( that.typeLabels )
                 && this.properties.equals( that.properties )
                 && this.additionalInfo.equals( that.additionalInfo )
                 && this.sizes.equals( that.sizes )
                 && this.fullSizes.equals( that.fullSizes )
                 && this.joinSizes.equals( that.joinSizes )
                 && ( this.totalSize == that.totalSize )
                 && ( this.totalFullSize == that.totalFullSize )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableDescriptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableDescriptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeSchemas" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeSchemas ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeLabels" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeLabels ) );
        builder.append( ", " );
        builder.append( gd.toString( "properties" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.properties ) );
        builder.append( ", " );
        builder.append( gd.toString( "additionalInfo" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.additionalInfo ) );
        builder.append( ", " );
        builder.append( gd.toString( "sizes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sizes ) );
        builder.append( ", " );
        builder.append( gd.toString( "fullSizes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.fullSizes ) );
        builder.append( ", " );
        builder.append( gd.toString( "joinSizes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.joinSizes ) );
        builder.append( ", " );
        builder.append( gd.toString( "totalSize" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.totalSize ) );
        builder.append( ", " );
        builder.append( gd.toString( "totalFullSize" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.totalFullSize ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.tableDescriptions.hashCode();
        hashCode = (31 * hashCode) + this.typeIds.hashCode();
        hashCode = (31 * hashCode) + this.typeSchemas.hashCode();
        hashCode = (31 * hashCode) + this.typeLabels.hashCode();
        hashCode = (31 * hashCode) + this.properties.hashCode();
        hashCode = (31 * hashCode) + this.additionalInfo.hashCode();
        hashCode = (31 * hashCode) + this.sizes.hashCode();
        hashCode = (31 * hashCode) + this.fullSizes.hashCode();
        hashCode = (31 * hashCode) + this.joinSizes.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.totalSize).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.totalFullSize).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
