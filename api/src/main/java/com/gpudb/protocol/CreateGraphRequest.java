/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createGraph(CreateGraphRequest)}.
 * <p>
 * Creates a new graph network using given nodes, edges, weights, and
 * restrictions.

 * IMPORTANT: It's highly recommended that you review the
 * <a href="../../../../../../graph_solver/network_graph_solver/"
 * target="_top">Network Graphs & Solvers</a>
 * concepts documentation, the
 * <a href="../../../../../../guides/graph_rest_guide/" target="_top">Graph
 * REST Tutorial</a>,
 * and/or some <a href="../../../../../../guide-tags/graph/"
 * target="_top">graph examples</a> before
 * using this endpoint.
 */
public class CreateGraphRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("directedGraph").type().booleanType().noDefault()
                .name("nodes").type().array().items().stringType().noDefault()
                .name("edges").type().array().items().stringType().noDefault()
                .name("weights").type().array().items().stringType().noDefault()
                .name("restrictions").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * If set to {@code true}, the graph will be directed. If set to {@code
     * false}, the graph will not be directed. Consult <a
     * href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     * target="_top">Directed Graphs</a> for more details.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.DirectedGraph#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE TRUE}.
     * A set of string constants for the parameter {@code directedGraph}.
     */
    public static final class DirectedGraph {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private DirectedGraph() {  }
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#MERGE_TOLERANCE
     * MERGE_TOLERANCE}: If node geospatial positions are input (e.g.,
     * WKTPOINT, X, Y), determines the minimum separation allowed between
     * unique nodes. If nodes are within the tolerance of each other, they will
     * be merged as a single node.  The default value is '1.0E-5'.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#RECREATE RECREATE}: If set
     * to {@code true} and the graph (using {@code graphName}) already exists,
     * the graph is deleted and recreated.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#SAVE_PERSIST
     * SAVE_PERSIST}: If set to {@code true}, the graph will be saved in the
     * persist directory (see the <a
     * href="../../../../../../config/#config-main-persistence"
     * target="_top">config reference</a> for more information). If set to
     * {@code false}, the graph will be removed when the graph server is
     * shutdown.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#ADD_TABLE_MONITOR
     * ADD_TABLE_MONITOR}: Adds a table monitor to every table used in the
     * creation of the graph; this table monitor will trigger the graph to
     * update dynamically upon inserts to the source table(s). Note that upon
     * database restart, if {@code save_persist} is also set to {@code true},
     * the graph will be fully reconstructed and the table monitors will be
     * reattached. For more details on table monitors, see {@link
     * com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#GRAPH_TABLE GRAPH_TABLE}:
     * If specified, the created graph is also created as a table with the
     * given name, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  The table will have the
     * following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
     * 'EDGE_NODE2_ID'. If left blank, no table is created.  The default value
     * is ''.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#ADD_TURNS ADD_TURNS}: Adds
     * dummy 'pillowed' edges around intersection nodes where there are more
     * than three edges so that additional weight penalties can be imposed by
     * the solve endpoints. (increases the total number of edges).
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#IS_PARTITIONED
     * IS_PARTITIONED}:
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#SERVER_ID SERVER_ID}:
     * Indicates which graph server(s) to send the request to. Default is to
     * send to the server with the most available memory.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#USE_RTREE USE_RTREE}: Use
     * an range tree structure to accelerate and improve the accuracy of
     * snapping, especially to edges.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#LABEL_DELIMITER
     * LABEL_DELIMITER}: If provided the label string will be split according
     * to this delimiter and each sub-string will be applied as a separate
     * label onto the specified edge.  The default value is ''.
     *         <li> {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#ALLOW_MULTIPLE_EDGES
     * ALLOW_MULTIPLE_EDGES}: Multigraph choice; allowing multiple edges with
     * the same node pairs if set to true, otherwise, new edges with existing
     * same node pairs will not be inserted.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     * TRUE}
     *         <li> {@link com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     * FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * If node geospatial positions are input (e.g., WKTPOINT, X, Y),
         * determines the minimum separation allowed between unique nodes. If
         * nodes are within the tolerance of each other, they will be merged as
         * a single node.  The default value is '1.0E-5'.
         */
        public static final String MERGE_TOLERANCE = "merge_tolerance";

        /**
         * If set to {@code true} and the graph (using {@code graphName})
         * already exists, the graph is deleted and recreated.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
         */
        public static final String RECREATE = "recreate";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If set to {@code true}, the graph will be saved in the persist
         * directory (see the <a
         * href="../../../../../../config/#config-main-persistence"
         * target="_top">config reference</a> for more information). If set to
         * {@code false}, the graph will be removed when the graph server is
         * shutdown.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
         */
        public static final String SAVE_PERSIST = "save_persist";

        /**
         * Adds a table monitor to every table used in the creation of the
         * graph; this table monitor will trigger the graph to update
         * dynamically upon inserts to the source table(s). Note that upon
         * database restart, if {@code save_persist} is also set to {@code
         * true}, the graph will be fully reconstructed and the table monitors
         * will be reattached. For more details on table monitors, see {@link
         * com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
         */
        public static final String ADD_TABLE_MONITOR = "add_table_monitor";

        /**
         * If specified, the created graph is also created as a table with the
         * given name, in [schema_name.]table_name format, using standard <a
         * href="../../../../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  The table will have the
         * following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
         * 'EDGE_NODE2_ID'. If left blank, no table is created.  The default
         * value is ''.
         */
        public static final String GRAPH_TABLE = "graph_table";

        /**
         * Adds dummy 'pillowed' edges around intersection nodes where there
         * are more than three edges so that additional weight penalties can be
         * imposed by the solve endpoints. (increases the total number of
         * edges).
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
         */
        public static final String ADD_TURNS = "add_turns";

        /**
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
         */
        public static final String IS_PARTITIONED = "is_partitioned";

        /**
         * Indicates which graph server(s) to send the request to. Default is
         * to send to the server with the most available memory.
         */
        public static final String SERVER_ID = "server_id";

        /**
         * Use an range tree structure to accelerate and improve the accuracy
         * of snapping, especially to edges.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
         */
        public static final String USE_RTREE = "use_rtree";

        /**
         * If provided the label string will be split according to this
         * delimiter and each sub-string will be applied as a separate label
         * onto the specified edge.  The default value is ''.
         */
        public static final String LABEL_DELIMITER = "label_delimiter";

        /**
         * Multigraph choice; allowing multiple edges with the same node pairs
         * if set to true, otherwise, new edges with existing same node pairs
         * will not be inserted.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
         */
        public static final String ALLOW_MULTIPLE_EDGES = "allow_multiple_edges";

        private Options() {  }
    }

    private String graphName;
    private boolean directedGraph;
    private List<String> nodes;
    private List<String> edges;
    private List<String> weights;
    private List<String> restrictions;
    private Map<String, String> options;


    /**
     * Constructs a CreateGraphRequest object with default parameters.
     */
    public CreateGraphRequest() {
        graphName = "";
        nodes = new ArrayList<>();
        edges = new ArrayList<>();
        weights = new ArrayList<>();
        restrictions = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateGraphRequest object with the specified parameters.
     * 
     * @param graphName  Name of the graph resource to generate.
     * @param directedGraph  If set to {@code true}, the graph will be
     *                       directed. If set to {@code false}, the graph will
     *                       not be directed. Consult <a
     *                       href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     *                       target="_top">Directed Graphs</a> for more
     *                       details.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#FALSE
     *                       FALSE}
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}.
     * @param nodes  Nodes represent fundamental topological units of a graph.
     *               Nodes must be specified using
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS NODE_ID', expressions, e.g.,
     *               'ST_MAKEPOINT(column1, column2) AS NODE_WKTPOINT', or
     *               constant values, e.g.,
     *               '{9, 10, 11} AS NODE_ID'.
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * @param edges  Edges represent the required fundamental topological unit
     *               of
     *               a graph that typically connect nodes. Edges must be
     *               specified using
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS EDGE_ID', expressions, e.g.,
     *               'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or constant
     *               values, e.g.,
     *               "{'family', 'coworker'} AS EDGE_LABEL".
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * @param weights  Weights represent a method of informing the graph solver
     *                 of
     *                 the cost of including a given edge in a solution.
     *                 Weights must be specified
     *                 using
     *                 <a
     *                 href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                 target="_top">identifiers</a>;
     *                 identifiers are grouped as
     *                 <a
     *                 href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                 target="_top">combinations</a>.
     *                 Identifiers can be used with existing column names,
     *                 e.g.,
     *                 'table.column AS WEIGHTS_EDGE_ID', expressions, e.g.,
     *                 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or constant
     *                 values, e.g.,
     *                 '{4, 15} AS WEIGHTS_VALUESPECIFIED'.
     *                 If using constant values in an identifier combination,
     *                 the number of values specified
     *                 must match across the combination.
     * @param restrictions  Restrictions represent a method of informing the
     *                      graph
     *                      solver which edges and/or nodes should be ignored
     *                      for the solution. Restrictions
     *                      must be specified using
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with existing column names,
     *                      e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g.,
     *                      'column/2 AS RESTRICTIONS_VALUECOMPARED', or
     *                      constant values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
     *                      If using constant values in an identifier
     *                      combination, the number of values
     *                      specified must match across the combination.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MERGE_TOLERANCE
     *                 MERGE_TOLERANCE}: If node geospatial positions are input
     *                 (e.g., WKTPOINT, X, Y), determines the minimum
     *                 separation allowed between unique nodes. If nodes are
     *                 within the tolerance of each other, they will be merged
     *                 as a single node.  The default value is '1.0E-5'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#RECREATE
     *                 RECREATE}: If set to {@code true} and the graph (using
     *                 {@code graphName}) already exists, the graph is deleted
     *                 and recreated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SAVE_PERSIST
     *                 SAVE_PERSIST}: If set to {@code true}, the graph will be
     *                 saved in the persist directory (see the <a
     *                 href="../../../../../../config/#config-main-persistence"
     *                 target="_top">config reference</a> for more
     *                 information). If set to {@code false}, the graph will be
     *                 removed when the graph server is shutdown.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TABLE_MONITOR
     *                 ADD_TABLE_MONITOR}: Adds a table monitor to every table
     *                 used in the creation of the graph; this table monitor
     *                 will trigger the graph to update dynamically upon
     *                 inserts to the source table(s). Note that upon database
     *                 restart, if {@code save_persist} is also set to {@code
     *                 true}, the graph will be fully reconstructed and the
     *                 table monitors will be reattached. For more details on
     *                 table monitors, see {@link
     *                 com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#GRAPH_TABLE
     *                 GRAPH_TABLE}: If specified, the created graph is also
     *                 created as a table with the given name, in
     *                 [schema_name.]table_name format, using standard <a
     *                 href="../../../../../../concepts/tables/#table-name-resolution"
     *                 target="_top">name resolution rules</a> and meeting <a
     *                 href="../../../../../../concepts/tables/#table-naming-criteria"
     *                 target="_top">table naming criteria</a>.  The table will
     *                 have the following identifier columns: 'EDGE_ID',
     *                 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no
     *                 table is created.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TURNS
     *                 ADD_TURNS}: Adds dummy 'pillowed' edges around
     *                 intersection nodes where there are more than three edges
     *                 so that additional weight penalties can be imposed by
     *                 the solve endpoints. (increases the total number of
     *                 edges).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#IS_PARTITIONED
     *                 IS_PARTITIONED}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to the server with the
     *                 most available memory.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#USE_RTREE
     *                 USE_RTREE}: Use an range tree structure to accelerate
     *                 and improve the accuracy of snapping, especially to
     *                 edges.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#LABEL_DELIMITER
     *                 LABEL_DELIMITER}: If provided the label string will be
     *                 split according to this delimiter and each sub-string
     *                 will be applied as a separate label onto the specified
     *                 edge.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ALLOW_MULTIPLE_EDGES
     *                 ALLOW_MULTIPLE_EDGES}: Multigraph choice; allowing
     *                 multiple edges with the same node pairs if set to true,
     *                 otherwise, new edges with existing same node pairs will
     *                 not be inserted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public CreateGraphRequest(String graphName, boolean directedGraph, List<String> nodes, List<String> edges, List<String> weights, List<String> restrictions, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.directedGraph = directedGraph;
        this.nodes = (nodes == null) ? new ArrayList<String>() : nodes;
        this.edges = (edges == null) ? new ArrayList<String>() : edges;
        this.weights = (weights == null) ? new ArrayList<String>() : weights;
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the graph resource to generate.
     * 
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * 
     * @param graphName  Name of the graph resource to generate.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * 
     * @return If set to {@code true}, the graph will be directed. If set to
     *         {@code false}, the graph will not be directed. Consult <a
     *         href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     *         target="_top">Directed Graphs</a> for more details.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.DirectedGraph#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE TRUE}.
     * 
     */
    public boolean getDirectedGraph() {
        return directedGraph;
    }

    /**
     * 
     * @param directedGraph  If set to {@code true}, the graph will be
     *                       directed. If set to {@code false}, the graph will
     *                       not be directed. Consult <a
     *                       href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     *                       target="_top">Directed Graphs</a> for more
     *                       details.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#FALSE
     *                       FALSE}
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setDirectedGraph(boolean directedGraph) {
        this.directedGraph = directedGraph;
        return this;
    }

    /**
     * 
     * @return Nodes represent fundamental topological units of a graph.
     *         Nodes must be specified using
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *         target="_top">identifiers</a>;
     *         identifiers are grouped as
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *         target="_top">combinations</a>.
     *         Identifiers can be used with existing column names, e.g.,
     *         'table.column AS NODE_ID', expressions, e.g.,
     *         'ST_MAKEPOINT(column1, column2) AS NODE_WKTPOINT', or constant
     *         values, e.g.,
     *         '{9, 10, 11} AS NODE_ID'.
     *         If using constant values in an identifier combination, the
     *         number of values
     *         specified must match across the combination.
     * 
     */
    public List<String> getNodes() {
        return nodes;
    }

    /**
     * 
     * @param nodes  Nodes represent fundamental topological units of a graph.
     *               Nodes must be specified using
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS NODE_ID', expressions, e.g.,
     *               'ST_MAKEPOINT(column1, column2) AS NODE_WKTPOINT', or
     *               constant values, e.g.,
     *               '{9, 10, 11} AS NODE_ID'.
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setNodes(List<String> nodes) {
        this.nodes = (nodes == null) ? new ArrayList<String>() : nodes;
        return this;
    }

    /**
     * 
     * @return Edges represent the required fundamental topological unit of
     *         a graph that typically connect nodes. Edges must be specified
     *         using
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *         target="_top">identifiers</a>;
     *         identifiers are grouped as
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *         target="_top">combinations</a>.
     *         Identifiers can be used with existing column names, e.g.,
     *         'table.column AS EDGE_ID', expressions, e.g.,
     *         'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or constant values,
     *         e.g.,
     *         "{'family', 'coworker'} AS EDGE_LABEL".
     *         If using constant values in an identifier combination, the
     *         number of values
     *         specified must match across the combination.
     * 
     */
    public List<String> getEdges() {
        return edges;
    }

    /**
     * 
     * @param edges  Edges represent the required fundamental topological unit
     *               of
     *               a graph that typically connect nodes. Edges must be
     *               specified using
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS EDGE_ID', expressions, e.g.,
     *               'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or constant
     *               values, e.g.,
     *               "{'family', 'coworker'} AS EDGE_LABEL".
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setEdges(List<String> edges) {
        this.edges = (edges == null) ? new ArrayList<String>() : edges;
        return this;
    }

    /**
     * 
     * @return Weights represent a method of informing the graph solver of
     *         the cost of including a given edge in a solution. Weights must
     *         be specified
     *         using
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *         target="_top">identifiers</a>;
     *         identifiers are grouped as
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *         target="_top">combinations</a>.
     *         Identifiers can be used with existing column names, e.g.,
     *         'table.column AS WEIGHTS_EDGE_ID', expressions, e.g.,
     *         'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or constant values,
     *         e.g.,
     *         '{4, 15} AS WEIGHTS_VALUESPECIFIED'.
     *         If using constant values in an identifier combination, the
     *         number of values specified
     *         must match across the combination.
     * 
     */
    public List<String> getWeights() {
        return weights;
    }

    /**
     * 
     * @param weights  Weights represent a method of informing the graph solver
     *                 of
     *                 the cost of including a given edge in a solution.
     *                 Weights must be specified
     *                 using
     *                 <a
     *                 href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                 target="_top">identifiers</a>;
     *                 identifiers are grouped as
     *                 <a
     *                 href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                 target="_top">combinations</a>.
     *                 Identifiers can be used with existing column names,
     *                 e.g.,
     *                 'table.column AS WEIGHTS_EDGE_ID', expressions, e.g.,
     *                 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or constant
     *                 values, e.g.,
     *                 '{4, 15} AS WEIGHTS_VALUESPECIFIED'.
     *                 If using constant values in an identifier combination,
     *                 the number of values specified
     *                 must match across the combination.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setWeights(List<String> weights) {
        this.weights = (weights == null) ? new ArrayList<String>() : weights;
        return this;
    }

    /**
     * 
     * @return Restrictions represent a method of informing the graph
     *         solver which edges and/or nodes should be ignored for the
     *         solution. Restrictions
     *         must be specified using
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *         target="_top">identifiers</a>;
     *         identifiers are grouped as
     *         <a
     *         href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *         target="_top">combinations</a>.
     *         Identifiers can be used with existing column names, e.g.,
     *         'table.column AS RESTRICTIONS_EDGE_ID', expressions, e.g.,
     *         'column/2 AS RESTRICTIONS_VALUECOMPARED', or constant values,
     *         e.g.,
     *         '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
     *         If using constant values in an identifier combination, the
     *         number of values
     *         specified must match across the combination.
     * 
     */
    public List<String> getRestrictions() {
        return restrictions;
    }

    /**
     * 
     * @param restrictions  Restrictions represent a method of informing the
     *                      graph
     *                      solver which edges and/or nodes should be ignored
     *                      for the solution. Restrictions
     *                      must be specified using
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with existing column names,
     *                      e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g.,
     *                      'column/2 AS RESTRICTIONS_VALUECOMPARED', or
     *                      constant values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
     *                      If using constant values in an identifier
     *                      combination, the number of values
     *                      specified must match across the combination.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setRestrictions(List<String> restrictions) {
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#MERGE_TOLERANCE
     *         MERGE_TOLERANCE}: If node geospatial positions are input (e.g.,
     *         WKTPOINT, X, Y), determines the minimum separation allowed
     *         between unique nodes. If nodes are within the tolerance of each
     *         other, they will be merged as a single node.  The default value
     *         is '1.0E-5'.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#RECREATE
     *         RECREATE}: If set to {@code true} and the graph (using {@code
     *         graphName}) already exists, the graph is deleted and recreated.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#SAVE_PERSIST
     *         SAVE_PERSIST}: If set to {@code true}, the graph will be saved
     *         in the persist directory (see the <a
     *         href="../../../../../../config/#config-main-persistence"
     *         target="_top">config reference</a> for more information). If set
     *         to {@code false}, the graph will be removed when the graph
     *         server is shutdown.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#ADD_TABLE_MONITOR
     *         ADD_TABLE_MONITOR}: Adds a table monitor to every table used in
     *         the creation of the graph; this table monitor will trigger the
     *         graph to update dynamically upon inserts to the source table(s).
     *         Note that upon database restart, if {@code save_persist} is also
     *         set to {@code true}, the graph will be fully reconstructed and
     *         the table monitors will be reattached. For more details on table
     *         monitors, see {@link
     *         com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#GRAPH_TABLE
     *         GRAPH_TABLE}: If specified, the created graph is also created as
     *         a table with the given name, in [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  The table will have
     *         the following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
     *         'EDGE_NODE2_ID'. If left blank, no table is created.  The
     *         default value is ''.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#ADD_TURNS
     *         ADD_TURNS}: Adds dummy 'pillowed' edges around intersection
     *         nodes where there are more than three edges so that additional
     *         weight penalties can be imposed by the solve endpoints.
     *         (increases the total number of edges).
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#IS_PARTITIONED
     *         IS_PARTITIONED}:
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#SERVER_ID
     *         SERVER_ID}: Indicates which graph server(s) to send the request
     *         to. Default is to send to the server with the most available
     *         memory.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#USE_RTREE
     *         USE_RTREE}: Use an range tree structure to accelerate and
     *         improve the accuracy of snapping, especially to edges.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#LABEL_DELIMITER
     *         LABEL_DELIMITER}: If provided the label string will be split
     *         according to this delimiter and each sub-string will be applied
     *         as a separate label onto the specified edge.  The default value
     *         is ''.
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#ALLOW_MULTIPLE_EDGES
     *         ALLOW_MULTIPLE_EDGES}: Multigraph choice; allowing multiple
     *         edges with the same node pairs if set to true, otherwise, new
     *         edges with existing same node pairs will not be inserted.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MERGE_TOLERANCE
     *                 MERGE_TOLERANCE}: If node geospatial positions are input
     *                 (e.g., WKTPOINT, X, Y), determines the minimum
     *                 separation allowed between unique nodes. If nodes are
     *                 within the tolerance of each other, they will be merged
     *                 as a single node.  The default value is '1.0E-5'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#RECREATE
     *                 RECREATE}: If set to {@code true} and the graph (using
     *                 {@code graphName}) already exists, the graph is deleted
     *                 and recreated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SAVE_PERSIST
     *                 SAVE_PERSIST}: If set to {@code true}, the graph will be
     *                 saved in the persist directory (see the <a
     *                 href="../../../../../../config/#config-main-persistence"
     *                 target="_top">config reference</a> for more
     *                 information). If set to {@code false}, the graph will be
     *                 removed when the graph server is shutdown.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TABLE_MONITOR
     *                 ADD_TABLE_MONITOR}: Adds a table monitor to every table
     *                 used in the creation of the graph; this table monitor
     *                 will trigger the graph to update dynamically upon
     *                 inserts to the source table(s). Note that upon database
     *                 restart, if {@code save_persist} is also set to {@code
     *                 true}, the graph will be fully reconstructed and the
     *                 table monitors will be reattached. For more details on
     *                 table monitors, see {@link
     *                 com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#GRAPH_TABLE
     *                 GRAPH_TABLE}: If specified, the created graph is also
     *                 created as a table with the given name, in
     *                 [schema_name.]table_name format, using standard <a
     *                 href="../../../../../../concepts/tables/#table-name-resolution"
     *                 target="_top">name resolution rules</a> and meeting <a
     *                 href="../../../../../../concepts/tables/#table-naming-criteria"
     *                 target="_top">table naming criteria</a>.  The table will
     *                 have the following identifier columns: 'EDGE_ID',
     *                 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no
     *                 table is created.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TURNS
     *                 ADD_TURNS}: Adds dummy 'pillowed' edges around
     *                 intersection nodes where there are more than three edges
     *                 so that additional weight penalties can be imposed by
     *                 the solve endpoints. (increases the total number of
     *                 edges).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#IS_PARTITIONED
     *                 IS_PARTITIONED}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to the server with the
     *                 most available memory.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#USE_RTREE
     *                 USE_RTREE}: Use an range tree structure to accelerate
     *                 and improve the accuracy of snapping, especially to
     *                 edges.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#LABEL_DELIMITER
     *                 LABEL_DELIMITER}: If provided the label string will be
     *                 split according to this delimiter and each sub-string
     *                 will be applied as a separate label onto the specified
     *                 edge.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ALLOW_MULTIPLE_EDGES
     *                 ALLOW_MULTIPLE_EDGES}: Multigraph choice; allowing
     *                 multiple edges with the same node pairs if set to true,
     *                 otherwise, new edges with existing same node pairs will
     *                 not be inserted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.directedGraph;

            case 2:
                return this.nodes;

            case 3:
                return this.edges;

            case 4:
                return this.weights;

            case 5:
                return this.restrictions;

            case 6:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.directedGraph = (Boolean)value;
                break;

            case 2:
                this.nodes = (List<String>)value;
                break;

            case 3:
                this.edges = (List<String>)value;
                break;

            case 4:
                this.weights = (List<String>)value;
                break;

            case 5:
                this.restrictions = (List<String>)value;
                break;

            case 6:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateGraphRequest that = (CreateGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && ( this.directedGraph == that.directedGraph )
                 && this.nodes.equals( that.nodes )
                 && this.edges.equals( that.edges )
                 && this.weights.equals( that.weights )
                 && this.restrictions.equals( that.restrictions )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "directedGraph" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.directedGraph ) );
        builder.append( ", " );
        builder.append( gd.toString( "nodes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.nodes ) );
        builder.append( ", " );
        builder.append( gd.toString( "edges" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edges ) );
        builder.append( ", " );
        builder.append( gd.toString( "weights" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.weights ) );
        builder.append( ", " );
        builder.append( gd.toString( "restrictions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.restrictions ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.directedGraph).hashCode();
        hashCode = (31 * hashCode) + this.nodes.hashCode();
        hashCode = (31 * hashCode) + this.edges.hashCode();
        hashCode = (31 * hashCode) + this.weights.hashCode();
        hashCode = (31 * hashCode) + this.restrictions.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
