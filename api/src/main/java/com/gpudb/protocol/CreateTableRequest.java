/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createTable(CreateTableRequest) GPUdb.createTable}.
 * <p>
 * Creates a new table. If a new table is being created, the type of the table
 * is given by {@link #getTypeId() typeId}, which must be the ID of a currently
 * registered type (i.e. one created via {@link
 * com.gpudb.GPUdb#createType(CreateTypeRequest) GPUdb.createType}).
 * <p>
 * A table may optionally be designated to use a <a
 * href="../../../../../../concepts/tables/#replication"
 * target="_top">replicated</a> distribution scheme, or be assigned: <a
 * href="../../../../../../concepts/tables/#foreign-keys" target="_top">foreign
 * keys</a> to other tables, a <a
 * href="../../../../../../concepts/tables/#partitioning"
 * target="_top">partitioning</a> scheme, and/or a <a
 * href="../../../../../../rm/concepts/#tier-strategies" target="_top">tier
 * strategy</a>.
 */
public class CreateTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("typeId").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateTableRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, prevents an error from occurring if
         * the table already exists and is of the given type.  If a table with
         * the same ID but a different type exists, it is still an error.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String NO_ERROR_IF_EXISTS = "no_error_if_exists";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * #getTableName() tableName}. If {@link Options#IS_RESULT_TABLE
         * IS_RESULT_TABLE} is {@link Options#TRUE TRUE}, then this is always
         * allowed even if the caller does not have permission to create
         * tables. The generated name is returned in {@link
         * com.gpudb.protocol.CreateTableResponse.Info#QUALIFIED_TABLE_NAME
         * QUALIFIED_TABLE_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        /**
         * [DEPRECATED--please specify the containing schema as part of {@link
         * #getTableName() tableName} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of a
         * schema which is to contain the newly created table. If the schema is
         * non-existent, it will be automatically created.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * [DEPRECATED--please use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create a schema instead]  Indicates whether
         * to create a schema instead of a table.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IS_COLLECTION = "is_collection";

        /**
         * No longer supported; value will be ignored.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DISALLOW_HOMOGENEOUS_TABLES = "disallow_homogeneous_tables";

        /**
         * Affects the <a
         * href="../../../../../../concepts/tables/#distribution"
         * target="_top">distribution scheme</a> for the table's data.  If
         * {@link Options#TRUE TRUE} and the given type has no explicit <a
         * href="../../../../../../concepts/tables/#shard-key"
         * target="_top">shard key</a> defined, the table will be <a
         * href="../../../../../../concepts/tables/#replication"
         * target="_top">replicated</a>.  If {@link Options#FALSE FALSE}, the
         * table will be <a href="../../../../../../concepts/tables/#sharding"
         * target="_top">sharded</a> according to the shard key specified in
         * the given {@link #getTypeId() typeId}, or <a
         * href="../../../../../../concepts/tables/#random-sharding"
         * target="_top">randomly sharded</a>, if no shard key is specified.
         * Note that a type containing a shard key cannot be used to create a
         * replicated table.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IS_REPLICATED = "is_replicated";

        /**
         * Semicolon-separated list of <a
         * href="../../../../../../concepts/tables/#foreign-keys"
         * target="_top">foreign keys</a>, of the format '(source_column_name
         * [, ...]) references target_table_name(primary_key_column_name [,
         * ...]) [as foreign_key_name]'.
         */
        public static final String FOREIGN_KEYS = "foreign_keys";

        /**
         * Foreign shard key of the format 'source_column references
         * shard_by_column from target_table(primary_key_column)'.
         */
        public static final String FOREIGN_SHARD_KEY = "foreign_shard_key";

        /**
         * <a href="../../../../../../concepts/tables/#partitioning"
         * target="_top">Partitioning</a> scheme to use.
         * Supported values:
         * <ul>
         *     <li>{@link Options#RANGE RANGE}: Use <a
         *         href="../../../../../../concepts/tables/#partitioning-by-range"
         *         target="_top">range partitioning</a>.
         *     <li>{@link Options#INTERVAL INTERVAL}: Use <a
         *         href="../../../../../../concepts/tables/#partitioning-by-interval"
         *         target="_top">interval partitioning</a>.
         *     <li>{@link Options#LIST LIST}: Use <a
         *         href="../../../../../../concepts/tables/#partitioning-by-list"
         *         target="_top">list partitioning</a>.
         *     <li>{@link Options#HASH HASH}: Use <a
         *         href="../../../../../../concepts/tables/#partitioning-by-hash"
         *         target="_top">hash partitioning</a>.
         *     <li>{@link Options#SERIES SERIES}: Use <a
         *         href="../../../../../../concepts/tables/#partitioning-by-series"
         *         target="_top">series partitioning</a>.
         * </ul>
         */
        public static final String PARTITION_TYPE = "partition_type";

        /**
         * Use <a
         * href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range partitioning</a>.
         */
        public static final String RANGE = "RANGE";

        /**
         * Use <a
         * href="../../../../../../concepts/tables/#partitioning-by-interval"
         * target="_top">interval partitioning</a>.
         */
        public static final String INTERVAL = "INTERVAL";

        /**
         * Use <a
         * href="../../../../../../concepts/tables/#partitioning-by-list"
         * target="_top">list partitioning</a>.
         */
        public static final String LIST = "LIST";

        /**
         * Use <a
         * href="../../../../../../concepts/tables/#partitioning-by-hash"
         * target="_top">hash partitioning</a>.
         */
        public static final String HASH = "HASH";

        /**
         * Use <a
         * href="../../../../../../concepts/tables/#partitioning-by-series"
         * target="_top">series partitioning</a>.
         */
        public static final String SERIES = "SERIES";

        /**
         * Comma-separated list of partition keys, which are the columns or
         * column expressions by which records will be assigned to partitions
         * defined by {@link Options#PARTITION_DEFINITIONS
         * PARTITION_DEFINITIONS}.
         */
        public static final String PARTITION_KEYS = "partition_keys";

        /**
         * Comma-separated list of partition definitions, whose format depends
         * on the choice of {@link Options#PARTITION_TYPE PARTITION_TYPE}.  See
         * <a href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range partitioning</a>, <a
         * href="../../../../../../concepts/tables/#partitioning-by-interval"
         * target="_top">interval partitioning</a>, <a
         * href="../../../../../../concepts/tables/#partitioning-by-list"
         * target="_top">list partitioning</a>, <a
         * href="../../../../../../concepts/tables/#partitioning-by-hash"
         * target="_top">hash partitioning</a>, or <a
         * href="../../../../../../concepts/tables/#partitioning-by-series"
         * target="_top">series partitioning</a> for example formats.
         */
        public static final String PARTITION_DEFINITIONS = "partition_definitions";

        /**
         * If {@link Options#TRUE TRUE}, a new partition will be created for
         * values which don't fall into an existing partition.  Currently only
         * supported for <a
         * href="../../../../../../concepts/tables/#partitioning-by-list"
         * target="_top">list partitions</a>.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IS_AUTOMATIC_PARTITION = "is_automatic_partition";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the table specified in {@link
         * #getTableName() tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * Indicates the number of records per chunk to be used for this table.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Indicates the target maximum data size for each column in a chunk to
         * be used for this table.
         */
        public static final String CHUNK_COLUMN_MAX_MEMORY = "chunk_column_max_memory";

        /**
         * Indicates the target maximum data size for all columns in a chunk to
         * be used for this table.
         */
        public static final String CHUNK_MAX_MEMORY = "chunk_max_memory";

        /**
         * Indicates whether the table is a <a
         * href="../../../../../../concepts/tables_memory_only/"
         * target="_top">memory-only table</a>. A result table cannot contain
         * columns with store_only or text_search <a
         * href="../../../../../../concepts/types/#data-handling"
         * target="_top">data-handling</a> or that are <a
         * href="../../../../../../concepts/types/#primitive-types"
         * target="_top">non-charN strings</a>, and it will not be retained if
         * the server is restarted.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IS_RESULT_TABLE = "is_result_table";

        /**
         * The <a href="../../../../../../rm/concepts/#tier-strategies"
         * target="_top">tier strategy</a> for the table and its columns.
         */
        public static final String STRATEGY_DEFINITION = "strategy_definition";

        /**
         * Set startup data loading scheme for the table.
         * Supported values:
         * <ul>
         *     <li>{@link Options#ALWAYS ALWAYS}: Load as much vector data as
         *         possible into memory before accepting requests.
         *     <li>{@link Options#LAZY LAZY}: Load the necessary vector data at
         *         start, and load the remainder lazily.
         *     <li>{@link Options#ON_DEMAND ON_DEMAND}: Load vector data as
         *         requests use it.
         *     <li>{@link Options#SYSTEM SYSTEM}: Load vector data using the
         *         system-configured default.
         * </ul>
         * The default value is {@link Options#SYSTEM SYSTEM}.
         */
        public static final String LOAD_VECTORS_POLICY = "load_vectors_policy";

        /**
         * Generate as much primary key index data as possible before accepting
         * requests.
         */
        public static final String ALWAYS = "always";

        /**
         * Generate the necessary primary key index data at start, and load the
         * remainder lazily.
         */
        public static final String LAZY = "lazy";

        /**
         * Generate primary key index data as requests use it.
         */
        public static final String ON_DEMAND = "on_demand";

        /**
         * Generate primary key index data using the system-configured default.
         */
        public static final String SYSTEM = "system";

        /**
         * Set startup primary-key index generation scheme for the table.
         * Supported values:
         * <ul>
         *     <li>{@link Options#ALWAYS ALWAYS}: Generate as much primary key
         *         index data as possible before accepting requests.
         *     <li>{@link Options#LAZY LAZY}: Generate the necessary primary
         *         key index data at start, and load the remainder lazily.
         *     <li>{@link Options#ON_DEMAND ON_DEMAND}: Generate primary key
         *         index data as requests use it.
         *     <li>{@link Options#SYSTEM SYSTEM}: Generate primary key index
         *         data using the system-configured default.
         * </ul>
         * The default value is {@link Options#SYSTEM SYSTEM}.
         */
        public static final String BUILD_PK_INDEX_POLICY = "build_pk_index_policy";

        private Options() {  }
    }

    private String tableName;
    private String typeId;
    private Map<String, String> options;

    /**
     * Constructs a CreateTableRequest object with default parameters.
     */
    public CreateTableRequest() {
        tableName = "";
        typeId = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateTableRequest object with the specified parameters.
     *
     * @param tableName  Name of the table to be created, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a> and meeting <a
     *                   href="../../../../../../concepts/tables/#table-naming-criteria"
     *                   target="_top">table naming criteria</a>. Error for
     *                   requests with existing table of the same name and type
     *                   ID may be suppressed by using the {@link
     *                   Options#NO_ERROR_IF_EXISTS NO_ERROR_IF_EXISTS} option.
     * @param typeId  ID of a currently registered type. All objects added to
     *                the newly created table will be of this type.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#NO_ERROR_IF_EXISTS
     *                         NO_ERROR_IF_EXISTS}: If {@link Options#TRUE
     *                         TRUE}, prevents an error from occurring if the
     *                         table already exists and is of the given type.
     *                         If a table with the same ID but a different type
     *                         exists, it is still an error.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@code tableName}. If {@link
     *                         Options#IS_RESULT_TABLE IS_RESULT_TABLE} is
     *                         {@link Options#TRUE TRUE}, then this is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.CreateTableResponse.Info#QUALIFIED_TABLE_NAME
     *                         QUALIFIED_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema as part of {@code tableName} and use
     *                         {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema which is to
     *                         contain the newly created table. If the schema
     *                         is non-existent, it will be automatically
     *                         created.
     *                     <li>{@link Options#IS_COLLECTION IS_COLLECTION}:
     *                         [DEPRECATED--please use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create a schema instead]
     *                         Indicates whether to create a schema instead of
     *                         a table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DISALLOW_HOMOGENEOUS_TABLES
     *                         DISALLOW_HOMOGENEOUS_TABLES}: No longer
     *                         supported; value will be ignored.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#IS_REPLICATED IS_REPLICATED}:
     *                         Affects the <a
     *                         href="../../../../../../concepts/tables/#distribution"
     *                         target="_top">distribution scheme</a> for the
     *                         table's data.  If {@link Options#TRUE TRUE} and
     *                         the given type has no explicit <a
     *                         href="../../../../../../concepts/tables/#shard-key"
     *                         target="_top">shard key</a> defined, the table
     *                         will be <a
     *                         href="../../../../../../concepts/tables/#replication"
     *                         target="_top">replicated</a>.  If {@link
     *                         Options#FALSE FALSE}, the table will be <a
     *                         href="../../../../../../concepts/tables/#sharding"
     *                         target="_top">sharded</a> according to the shard
     *                         key specified in the given {@code typeId}, or <a
     *                         href="../../../../../../concepts/tables/#random-sharding"
     *                         target="_top">randomly sharded</a>, if no shard
     *                         key is specified.  Note that a type containing a
     *                         shard key cannot be used to create a replicated
     *                         table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#FOREIGN_KEYS FOREIGN_KEYS}:
     *                         Semicolon-separated list of <a
     *                         href="../../../../../../concepts/tables/#foreign-keys"
     *                         target="_top">foreign keys</a>, of the format
     *                         '(source_column_name [, ...]) references
     *                         target_table_name(primary_key_column_name [,
     *                         ...]) [as foreign_key_name]'.
     *                     <li>{@link Options#FOREIGN_SHARD_KEY
     *                         FOREIGN_SHARD_KEY}: Foreign shard key of the
     *                         format 'source_column references shard_by_column
     *                         from target_table(primary_key_column)'.
     *                     <li>{@link Options#PARTITION_TYPE PARTITION_TYPE}:
     *                         <a
     *                         href="../../../../../../concepts/tables/#partitioning"
     *                         target="_top">Partitioning</a> scheme to use.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#RANGE RANGE}: Use <a
     *                                 href="../../../../../../concepts/tables/#partitioning-by-range"
     *                                 target="_top">range partitioning</a>.
     *                             <li>{@link Options#INTERVAL INTERVAL}: Use
     *                                 <a
     *                                 href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                                 target="_top">interval partitioning</a>.
     *                             <li>{@link Options#LIST LIST}: Use <a
     *                                 href="../../../../../../concepts/tables/#partitioning-by-list"
     *                                 target="_top">list partitioning</a>.
     *                             <li>{@link Options#HASH HASH}: Use <a
     *                                 href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                                 target="_top">hash partitioning</a>.
     *                             <li>{@link Options#SERIES SERIES}: Use <a
     *                                 href="../../../../../../concepts/tables/#partitioning-by-series"
     *                                 target="_top">series partitioning</a>.
     *                         </ul>
     *                     <li>{@link Options#PARTITION_KEYS PARTITION_KEYS}:
     *                         Comma-separated list of partition keys, which
     *                         are the columns or column expressions by which
     *                         records will be assigned to partitions defined
     *                         by {@link Options#PARTITION_DEFINITIONS
     *                         PARTITION_DEFINITIONS}.
     *                     <li>{@link Options#PARTITION_DEFINITIONS
     *                         PARTITION_DEFINITIONS}: Comma-separated list of
     *                         partition definitions, whose format depends on
     *                         the choice of {@link Options#PARTITION_TYPE
     *                         PARTITION_TYPE}.  See <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-range"
     *                         target="_top">range partitioning</a>, <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                         target="_top">interval partitioning</a>, <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-list"
     *                         target="_top">list partitioning</a>, <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                         target="_top">hash partitioning</a>, or <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-series"
     *                         target="_top">series partitioning</a> for
     *                         example formats.
     *                     <li>{@link Options#IS_AUTOMATIC_PARTITION
     *                         IS_AUTOMATIC_PARTITION}: If {@link Options#TRUE
     *                         TRUE}, a new partition will be created for
     *                         values which don't fall into an existing
     *                         partition.  Currently only supported for <a
     *                         href="../../../../../../concepts/tables/#partitioning-by-list"
     *                         target="_top">list partitions</a>.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the table specified in
     *                         {@code tableName}.
     *                     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates
     *                         the number of records per chunk to be used for
     *                         this table.
     *                     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY
     *                         CHUNK_COLUMN_MAX_MEMORY}: Indicates the target
     *                         maximum data size for each column in a chunk to
     *                         be used for this table.
     *                     <li>{@link Options#CHUNK_MAX_MEMORY
     *                         CHUNK_MAX_MEMORY}: Indicates the target maximum
     *                         data size for all columns in a chunk to be used
     *                         for this table.
     *                     <li>{@link Options#IS_RESULT_TABLE IS_RESULT_TABLE}:
     *                         Indicates whether the table is a <a
     *                         href="../../../../../../concepts/tables_memory_only/"
     *                         target="_top">memory-only table</a>. A result
     *                         table cannot contain columns with store_only or
     *                         text_search <a
     *                         href="../../../../../../concepts/types/#data-handling"
     *                         target="_top">data-handling</a> or that are <a
     *                         href="../../../../../../concepts/types/#primitive-types"
     *                         target="_top">non-charN strings</a>, and it will
     *                         not be retained if the server is restarted.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#STRATEGY_DEFINITION
     *                         STRATEGY_DEFINITION}: The <a
     *                         href="../../../../../../rm/concepts/#tier-strategies"
     *                         target="_top">tier strategy</a> for the table
     *                         and its columns.
     *                     <li>{@link Options#LOAD_VECTORS_POLICY
     *                         LOAD_VECTORS_POLICY}: Set startup data loading
     *                         scheme for the table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#ALWAYS ALWAYS}: Load as
     *                                 much vector data as possible into memory
     *                                 before accepting requests.
     *                             <li>{@link Options#LAZY LAZY}: Load the
     *                                 necessary vector data at start, and load
     *                                 the remainder lazily.
     *                             <li>{@link Options#ON_DEMAND ON_DEMAND}:
     *                                 Load vector data as requests use it.
     *                             <li>{@link Options#SYSTEM SYSTEM}: Load
     *                                 vector data using the system-configured
     *                                 default.
     *                         </ul>
     *                         The default value is {@link Options#SYSTEM
     *                         SYSTEM}.
     *                     <li>{@link Options#BUILD_PK_INDEX_POLICY
     *                         BUILD_PK_INDEX_POLICY}: Set startup primary-key
     *                         index generation scheme for the table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#ALWAYS ALWAYS}: Generate
     *                                 as much primary key index data as
     *                                 possible before accepting requests.
     *                             <li>{@link Options#LAZY LAZY}: Generate the
     *                                 necessary primary key index data at
     *                                 start, and load the remainder lazily.
     *                             <li>{@link Options#ON_DEMAND ON_DEMAND}:
     *                                 Generate primary key index data as
     *                                 requests use it.
     *                             <li>{@link Options#SYSTEM SYSTEM}: Generate
     *                                 primary key index data using the
     *                                 system-configured default.
     *                         </ul>
     *                         The default value is {@link Options#SYSTEM
     *                         SYSTEM}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateTableRequest(String tableName, String typeId, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.typeId = (typeId == null) ? "" : typeId;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table to be created, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>. Error for requests with
     * existing table of the same name and type ID may be suppressed by using
     * the {@link Options#NO_ERROR_IF_EXISTS NO_ERROR_IF_EXISTS} option.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table to be created, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>. Error for requests with
     * existing table of the same name and type ID may be suppressed by using
     * the {@link Options#NO_ERROR_IF_EXISTS NO_ERROR_IF_EXISTS} option.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * ID of a currently registered type. All objects added to the newly
     * created table will be of this type.
     *
     * @return The current value of {@code typeId}.
     */
    public String getTypeId() {
        return typeId;
    }

    /**
     * ID of a currently registered type. All objects added to the newly
     * created table will be of this type.
     *
     * @param typeId  The new value for {@code typeId}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableRequest setTypeId(String typeId) {
        this.typeId = (typeId == null) ? "" : typeId;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_EXISTS NO_ERROR_IF_EXISTS}: If {@link
     *         Options#TRUE TRUE}, prevents an error from occurring if the
     *         table already exists and is of the given type.  If a table with
     *         the same ID but a different type exists, it is still an error.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#IS_RESULT_TABLE
     *         IS_RESULT_TABLE} is {@link Options#TRUE TRUE}, then this is
     *         always allowed even if the caller does not have permission to
     *         create tables. The generated name is returned in {@link
     *         com.gpudb.protocol.CreateTableResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema as part of
     *         {@link #getTableName() tableName} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the newly created table. If the
     *         schema is non-existent, it will be automatically created.
     *     <li>{@link Options#IS_COLLECTION IS_COLLECTION}: [DEPRECATED--please
     *         use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create a schema instead]  Indicates
     *         whether to create a schema instead of a table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISALLOW_HOMOGENEOUS_TABLES
     *         DISALLOW_HOMOGENEOUS_TABLES}: No longer supported; value will be
     *         ignored.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: Affects the <a
     *         href="../../../../../../concepts/tables/#distribution"
     *         target="_top">distribution scheme</a> for the table's data.  If
     *         {@link Options#TRUE TRUE} and the given type has no explicit <a
     *         href="../../../../../../concepts/tables/#shard-key"
     *         target="_top">shard key</a> defined, the table will be <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a>.  If {@link Options#FALSE FALSE},
     *         the table will be <a
     *         href="../../../../../../concepts/tables/#sharding"
     *         target="_top">sharded</a> according to the shard key specified
     *         in the given {@link #getTypeId() typeId}, or <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly sharded</a>, if no shard key is
     *         specified.  Note that a type containing a shard key cannot be
     *         used to create a replicated table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#FOREIGN_KEYS FOREIGN_KEYS}: Semicolon-separated
     *         list of <a
     *         href="../../../../../../concepts/tables/#foreign-keys"
     *         target="_top">foreign keys</a>, of the format
     *         '(source_column_name [, ...]) references
     *         target_table_name(primary_key_column_name [, ...]) [as
     *         foreign_key_name]'.
     *     <li>{@link Options#FOREIGN_SHARD_KEY FOREIGN_SHARD_KEY}: Foreign
     *         shard key of the format 'source_column references
     *         shard_by_column from target_table(primary_key_column)'.
     *     <li>{@link Options#PARTITION_TYPE PARTITION_TYPE}: <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">Partitioning</a> scheme to use.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#RANGE RANGE}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-range"
     *                 target="_top">range partitioning</a>.
     *             <li>{@link Options#INTERVAL INTERVAL}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>.
     *             <li>{@link Options#LIST LIST}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-list"
     *                 target="_top">list partitioning</a>.
     *             <li>{@link Options#HASH HASH}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                 target="_top">hash partitioning</a>.
     *             <li>{@link Options#SERIES SERIES}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-series"
     *                 target="_top">series partitioning</a>.
     *         </ul>
     *     <li>{@link Options#PARTITION_KEYS PARTITION_KEYS}: Comma-separated
     *         list of partition keys, which are the columns or column
     *         expressions by which records will be assigned to partitions
     *         defined by {@link Options#PARTITION_DEFINITIONS
     *         PARTITION_DEFINITIONS}.
     *     <li>{@link Options#PARTITION_DEFINITIONS PARTITION_DEFINITIONS}:
     *         Comma-separated list of partition definitions, whose format
     *         depends on the choice of {@link Options#PARTITION_TYPE
     *         PARTITION_TYPE}.  See <a
     *         href="../../../../../../concepts/tables/#partitioning-by-range"
     *         target="_top">range partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-interval"
     *         target="_top">interval partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list"
     *         target="_top">list partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-hash"
     *         target="_top">hash partitioning</a>, or <a
     *         href="../../../../../../concepts/tables/#partitioning-by-series"
     *         target="_top">series partitioning</a> for example formats.
     *     <li>{@link Options#IS_AUTOMATIC_PARTITION IS_AUTOMATIC_PARTITION}:
     *         If {@link Options#TRUE TRUE}, a new partition will be created
     *         for values which don't fall into an existing partition.
     *         Currently only supported for <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list"
     *         target="_top">list partitions</a>.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for this table.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for this table.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for this table.
     *     <li>{@link Options#IS_RESULT_TABLE IS_RESULT_TABLE}: Indicates
     *         whether the table is a <a
     *         href="../../../../../../concepts/tables_memory_only/"
     *         target="_top">memory-only table</a>. A result table cannot
     *         contain columns with store_only or text_search <a
     *         href="../../../../../../concepts/types/#data-handling"
     *         target="_top">data-handling</a> or that are <a
     *         href="../../../../../../concepts/types/#primitive-types"
     *         target="_top">non-charN strings</a>, and it will not be retained
     *         if the server is restarted.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#STRATEGY_DEFINITION STRATEGY_DEFINITION}: The <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns.
     *     <li>{@link Options#LOAD_VECTORS_POLICY LOAD_VECTORS_POLICY}: Set
     *         startup data loading scheme for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Load as much vector data
     *                 as possible into memory before accepting requests.
     *             <li>{@link Options#LAZY LAZY}: Load the necessary vector
     *                 data at start, and load the remainder lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Load vector data as
     *                 requests use it.
     *             <li>{@link Options#SYSTEM SYSTEM}: Load vector data using
     *                 the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     *     <li>{@link Options#BUILD_PK_INDEX_POLICY BUILD_PK_INDEX_POLICY}: Set
     *         startup primary-key index generation scheme for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Generate as much primary
     *                 key index data as possible before accepting requests.
     *             <li>{@link Options#LAZY LAZY}: Generate the necessary
     *                 primary key index data at start, and load the remainder
     *                 lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Generate primary
     *                 key index data as requests use it.
     *             <li>{@link Options#SYSTEM SYSTEM}: Generate primary key
     *                 index data using the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_EXISTS NO_ERROR_IF_EXISTS}: If {@link
     *         Options#TRUE TRUE}, prevents an error from occurring if the
     *         table already exists and is of the given type.  If a table with
     *         the same ID but a different type exists, it is still an error.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#IS_RESULT_TABLE
     *         IS_RESULT_TABLE} is {@link Options#TRUE TRUE}, then this is
     *         always allowed even if the caller does not have permission to
     *         create tables. The generated name is returned in {@link
     *         com.gpudb.protocol.CreateTableResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema as part of
     *         {@link #getTableName() tableName} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the newly created table. If the
     *         schema is non-existent, it will be automatically created.
     *     <li>{@link Options#IS_COLLECTION IS_COLLECTION}: [DEPRECATED--please
     *         use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create a schema instead]  Indicates
     *         whether to create a schema instead of a table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISALLOW_HOMOGENEOUS_TABLES
     *         DISALLOW_HOMOGENEOUS_TABLES}: No longer supported; value will be
     *         ignored.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: Affects the <a
     *         href="../../../../../../concepts/tables/#distribution"
     *         target="_top">distribution scheme</a> for the table's data.  If
     *         {@link Options#TRUE TRUE} and the given type has no explicit <a
     *         href="../../../../../../concepts/tables/#shard-key"
     *         target="_top">shard key</a> defined, the table will be <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a>.  If {@link Options#FALSE FALSE},
     *         the table will be <a
     *         href="../../../../../../concepts/tables/#sharding"
     *         target="_top">sharded</a> according to the shard key specified
     *         in the given {@link #getTypeId() typeId}, or <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly sharded</a>, if no shard key is
     *         specified.  Note that a type containing a shard key cannot be
     *         used to create a replicated table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#FOREIGN_KEYS FOREIGN_KEYS}: Semicolon-separated
     *         list of <a
     *         href="../../../../../../concepts/tables/#foreign-keys"
     *         target="_top">foreign keys</a>, of the format
     *         '(source_column_name [, ...]) references
     *         target_table_name(primary_key_column_name [, ...]) [as
     *         foreign_key_name]'.
     *     <li>{@link Options#FOREIGN_SHARD_KEY FOREIGN_SHARD_KEY}: Foreign
     *         shard key of the format 'source_column references
     *         shard_by_column from target_table(primary_key_column)'.
     *     <li>{@link Options#PARTITION_TYPE PARTITION_TYPE}: <a
     *         href="../../../../../../concepts/tables/#partitioning"
     *         target="_top">Partitioning</a> scheme to use.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#RANGE RANGE}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-range"
     *                 target="_top">range partitioning</a>.
     *             <li>{@link Options#INTERVAL INTERVAL}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>.
     *             <li>{@link Options#LIST LIST}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-list"
     *                 target="_top">list partitioning</a>.
     *             <li>{@link Options#HASH HASH}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-hash"
     *                 target="_top">hash partitioning</a>.
     *             <li>{@link Options#SERIES SERIES}: Use <a
     *                 href="../../../../../../concepts/tables/#partitioning-by-series"
     *                 target="_top">series partitioning</a>.
     *         </ul>
     *     <li>{@link Options#PARTITION_KEYS PARTITION_KEYS}: Comma-separated
     *         list of partition keys, which are the columns or column
     *         expressions by which records will be assigned to partitions
     *         defined by {@link Options#PARTITION_DEFINITIONS
     *         PARTITION_DEFINITIONS}.
     *     <li>{@link Options#PARTITION_DEFINITIONS PARTITION_DEFINITIONS}:
     *         Comma-separated list of partition definitions, whose format
     *         depends on the choice of {@link Options#PARTITION_TYPE
     *         PARTITION_TYPE}.  See <a
     *         href="../../../../../../concepts/tables/#partitioning-by-range"
     *         target="_top">range partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-interval"
     *         target="_top">interval partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list"
     *         target="_top">list partitioning</a>, <a
     *         href="../../../../../../concepts/tables/#partitioning-by-hash"
     *         target="_top">hash partitioning</a>, or <a
     *         href="../../../../../../concepts/tables/#partitioning-by-series"
     *         target="_top">series partitioning</a> for example formats.
     *     <li>{@link Options#IS_AUTOMATIC_PARTITION IS_AUTOMATIC_PARTITION}:
     *         If {@link Options#TRUE TRUE}, a new partition will be created
     *         for values which don't fall into an existing partition.
     *         Currently only supported for <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list"
     *         target="_top">list partitions</a>.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for this table.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for this table.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for this table.
     *     <li>{@link Options#IS_RESULT_TABLE IS_RESULT_TABLE}: Indicates
     *         whether the table is a <a
     *         href="../../../../../../concepts/tables_memory_only/"
     *         target="_top">memory-only table</a>. A result table cannot
     *         contain columns with store_only or text_search <a
     *         href="../../../../../../concepts/types/#data-handling"
     *         target="_top">data-handling</a> or that are <a
     *         href="../../../../../../concepts/types/#primitive-types"
     *         target="_top">non-charN strings</a>, and it will not be retained
     *         if the server is restarted.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#STRATEGY_DEFINITION STRATEGY_DEFINITION}: The <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns.
     *     <li>{@link Options#LOAD_VECTORS_POLICY LOAD_VECTORS_POLICY}: Set
     *         startup data loading scheme for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Load as much vector data
     *                 as possible into memory before accepting requests.
     *             <li>{@link Options#LAZY LAZY}: Load the necessary vector
     *                 data at start, and load the remainder lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Load vector data as
     *                 requests use it.
     *             <li>{@link Options#SYSTEM SYSTEM}: Load vector data using
     *                 the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     *     <li>{@link Options#BUILD_PK_INDEX_POLICY BUILD_PK_INDEX_POLICY}: Set
     *         startup primary-key index generation scheme for the table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Generate as much primary
     *                 key index data as possible before accepting requests.
     *             <li>{@link Options#LAZY LAZY}: Generate the necessary
     *                 primary key index data at start, and load the remainder
     *                 lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Generate primary
     *                 key index data as requests use it.
     *             <li>{@link Options#SYSTEM SYSTEM}: Generate primary key
     *                 index data using the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.typeId;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.typeId = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateTableRequest that = (CreateTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.typeId.equals( that.typeId )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeId ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeId.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
