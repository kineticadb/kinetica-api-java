/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterDatasink(AlterDatasinkRequest) GPUdb.alterDatasink}.
 * <p>
 * Alters the properties of an existing <a
 * href="../../../../../../concepts/data_sinks/" target="_top">data sink</a>
 */
public class AlterDatasinkRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterDatasinkRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("datasinkUpdatesMap").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AlterDatasinkRequest} parameter
     * {@link #getDatasinkUpdatesMap() datasinkUpdatesMap}.
     * <p>
     * Map containing the properties of the data sink to be updated. Error if
     * empty.
     */
    public static final class DatasinkUpdatesMap {
        /**
         * Destination for the output data in format
         * 'destination_type://path[:port]'.
         * <p>
         * Supported destination types are 'azure', 'gcs', 'hdfs', 'http',
         * 'https', 'jdbc', 'kafka', and 's3'.
         */
        public static final String DESTINATION = "destination";

        /**
         * Timeout in seconds for connecting to this sink
         */
        public static final String CONNECTION_TIMEOUT = "connection_timeout";

        /**
         * Timeout in seconds for waiting for a response from this sink
         */
        public static final String WAIT_TIMEOUT = "wait_timeout";

        /**
         * Name of the <a href="../../../../../../concepts/credentials/"
         * target="_top">credential</a> object to be used in this data sink
         */
        public static final String CREDENTIAL = "credential";

        /**
         * Name of the Amazon S3 bucket to use as the data sink
         */
        public static final String S3_BUCKET_NAME = "s3_bucket_name";

        /**
         * Name of the Amazon S3 region where the given bucket is located
         */
        public static final String S3_REGION = "s3_region";

        /**
         * Whether to verify SSL connections.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}: Connect with SSL
         *         verification
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Connect without
         *         verifying the SSL connection; for testing purposes,
         *         bypassing TLS errors, self-signed certificates, etc.
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
         */
        public static final String S3_VERIFY_SSL = "s3_verify_ssl";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Whether to use virtual addressing when referencing the Amazon S3
         * sink.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}: The requests URI
         *         should be specified in virtual-hosted-style format where the
         *         bucket name is part of the domain name in the URL.
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Use path-style URI
         *         for requests.
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
         */
        public static final String S3_USE_VIRTUAL_ADDRESSING = "s3_use_virtual_addressing";

        /**
         * Amazon IAM Role ARN which has required S3 permissions that can be
         * assumed for the given S3 IAM user
         */
        public static final String S3_AWS_ROLE_ARN = "s3_aws_role_arn";

        /**
         * Customer encryption algorithm used encrypting data
         */
        public static final String S3_ENCRYPTION_CUSTOMER_ALGORITHM = "s3_encryption_customer_algorithm";

        /**
         * Customer encryption key to encrypt or decrypt data
         */
        public static final String S3_ENCRYPTION_CUSTOMER_KEY = "s3_encryption_customer_key";

        /**
         * Server side encryption type
         */
        public static final String S3_ENCRYPTION_TYPE = "s3_encryption_type";

        /**
         * KMS key
         */
        public static final String S3_KMS_KEY_ID = "s3_kms_key_id";

        /**
         * Kerberos keytab file location for the given HDFS user.  This may be
         * a KIFS file.
         */
        public static final String HDFS_KERBEROS_KEYTAB = "hdfs_kerberos_keytab";

        /**
         * Delegation token for the given HDFS user
         */
        public static final String HDFS_DELEGATION_TOKEN = "hdfs_delegation_token";

        /**
         * Use kerberos authentication for the given HDFS cluster.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
         */
        public static final String HDFS_USE_KERBEROS = "hdfs_use_kerberos";

        /**
         * Name of the Azure storage account to use as the data sink, this is
         * valid only if tenant_id is specified
         */
        public static final String AZURE_STORAGE_ACCOUNT_NAME = "azure_storage_account_name";

        /**
         * Name of the Azure storage container to use as the data sink
         */
        public static final String AZURE_CONTAINER_NAME = "azure_container_name";

        /**
         * Active Directory tenant ID (or directory ID)
         */
        public static final String AZURE_TENANT_ID = "azure_tenant_id";

        /**
         * Shared access signature token for Azure storage account to use as
         * the data sink
         */
        public static final String AZURE_SAS_TOKEN = "azure_sas_token";

        /**
         * Oauth token to access given storage container
         */
        public static final String AZURE_OAUTH_TOKEN = "azure_oauth_token";

        /**
         * Name of the Google Cloud Storage bucket to use as the data sink
         */
        public static final String GCS_BUCKET_NAME = "gcs_bucket_name";

        /**
         * Name of the Google Cloud project to use as the data sink
         */
        public static final String GCS_PROJECT_ID = "gcs_project_id";

        /**
         * Google Cloud service account keys to use for authenticating the data
         * sink
         */
        public static final String GCS_SERVICE_ACCOUNT_KEYS = "gcs_service_account_keys";

        /**
         * JDBC driver jar file location.  This may be a KIFS file.
         */
        public static final String JDBC_DRIVER_JAR_PATH = "jdbc_driver_jar_path";

        /**
         * Name of the JDBC driver class
         */
        public static final String JDBC_DRIVER_CLASS_NAME = "jdbc_driver_class_name";

        /**
         * The publicly-accessible full path URL to the kafka broker, e.g.,
         * 'http://172.123.45.67:9300'.
         */
        public static final String KAFKA_URL = "kafka_url";

        /**
         * Name of the Kafka topic to use for this data sink, if it references
         * a Kafka broker
         */
        public static final String KAFKA_TOPIC_NAME = "kafka_topic_name";

        /**
         * Create an anonymous connection to the storage provider--DEPRECATED:
         * this is now the default.  Specify use_managed_credentials for
         * non-anonymous connection.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
         */
        public static final String ANONYMOUS = "anonymous";

        /**
         * When no credentials are supplied, we use anonymous access by
         * default.  If this is set, we will use cloud provider user settings.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
         */
        public static final String USE_MANAGED_CREDENTIALS = "use_managed_credentials";

        /**
         * Use https to connect to datasink if true, otherwise use http.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
         */
        public static final String USE_HTTPS = "use_https";

        /**
         * Maximum number of records per notification message. The default
         * value is '1'.
         */
        public static final String MAX_BATCH_SIZE = "max_batch_size";

        /**
         * Maximum size in bytes of each notification message. The default
         * value is '1000000'.
         */
        public static final String MAX_MESSAGE_SIZE = "max_message_size";

        /**
         * The desired format of JSON encoded notifications message.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#FLAT FLAT}: A single record is
         *         returned per message
         *     <li>{@link DatasinkUpdatesMap#NESTED NESTED}: Records are
         *         returned as an array per message
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#FLAT FLAT}.
         */
        public static final String JSON_FORMAT = "json_format";

        /**
         * A single record is returned per message
         */
        public static final String FLAT = "flat";

        /**
         * Records are returned as an array per message
         */
        public static final String NESTED = "nested";

        /**
         * Bypass validation of connection to this data sink.
         * Supported values:
         * <ul>
         *     <li>{@link DatasinkUpdatesMap#TRUE TRUE}
         *     <li>{@link DatasinkUpdatesMap#FALSE FALSE}
         * </ul>
         * The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
         */
        public static final String SKIP_VALIDATION = "skip_validation";

        /**
         * Updates the schema name.  If {@link DatasinkUpdatesMap#SCHEMA_NAME
         * SCHEMA_NAME} doesn't exist, an error will be thrown. If {@link
         * DatasinkUpdatesMap#SCHEMA_NAME SCHEMA_NAME} is empty, then the
         * user's default schema will be used.
         */
        public static final String SCHEMA_NAME = "schema_name";

        private DatasinkUpdatesMap() {  }
    }

    private String name;
    private Map<String, String> datasinkUpdatesMap;
    private Map<String, String> options;

    /**
     * Constructs an AlterDatasinkRequest object with default parameters.
     */
    public AlterDatasinkRequest() {
        name = "";
        datasinkUpdatesMap = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterDatasinkRequest object with the specified parameters.
     *
     * @param name  Name of the data sink to be altered. Must be an existing
     *              data sink.
     * @param datasinkUpdatesMap  Map containing the properties of the data
     *                            sink to be updated. Error if empty.
     *                            <ul>
     *                                <li>{@link DatasinkUpdatesMap#DESTINATION
     *                                    DESTINATION}: Destination for the
     *                                    output data in format
     *                                    'destination_type://path[:port]'.
     *                                    Supported destination types are
     *                                    'azure', 'gcs', 'hdfs', 'http',
     *                                    'https', 'jdbc', 'kafka', and 's3'.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#CONNECTION_TIMEOUT
     *                                    CONNECTION_TIMEOUT}: Timeout in
     *                                    seconds for connecting to this sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#WAIT_TIMEOUT
     *                                    WAIT_TIMEOUT}: Timeout in seconds for
     *                                    waiting for a response from this sink
     *                                <li>{@link DatasinkUpdatesMap#CREDENTIAL
     *                                    CREDENTIAL}: Name of the <a
     *                                    href="../../../../../../concepts/credentials/"
     *                                    target="_top">credential</a> object
     *                                    to be used in this data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_BUCKET_NAME
     *                                    S3_BUCKET_NAME}: Name of the Amazon
     *                                    S3 bucket to use as the data sink
     *                                <li>{@link DatasinkUpdatesMap#S3_REGION
     *                                    S3_REGION}: Name of the Amazon S3
     *                                    region where the given bucket is
     *                                    located
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_VERIFY_SSL
     *                                    S3_VERIFY_SSL}: Whether to verify SSL
     *                                    connections.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE
     *                                            TRUE}: Connect with SSL
     *                                            verification
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}: Connect without
     *                                            verifying the SSL connection;
     *                                            for testing purposes,
     *                                            bypassing TLS errors,
     *                                            self-signed certificates,
     *                                            etc.
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#TRUE TRUE}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_USE_VIRTUAL_ADDRESSING
     *                                    S3_USE_VIRTUAL_ADDRESSING}: Whether
     *                                    to use virtual addressing when
     *                                    referencing the Amazon S3 sink.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE
     *                                            TRUE}: The requests URI
     *                                            should be specified in
     *                                            virtual-hosted-style format
     *                                            where the bucket name is part
     *                                            of the domain name in the
     *                                            URL.
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}: Use path-style URI
     *                                            for requests.
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#TRUE TRUE}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_AWS_ROLE_ARN
     *                                    S3_AWS_ROLE_ARN}: Amazon IAM Role ARN
     *                                    which has required S3 permissions
     *                                    that can be assumed for the given S3
     *                                    IAM user
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_ALGORITHM
     *                                    S3_ENCRYPTION_CUSTOMER_ALGORITHM}:
     *                                    Customer encryption algorithm used
     *                                    encrypting data
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_KEY
     *                                    S3_ENCRYPTION_CUSTOMER_KEY}: Customer
     *                                    encryption key to encrypt or decrypt
     *                                    data
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_ENCRYPTION_TYPE
     *                                    S3_ENCRYPTION_TYPE}: Server side
     *                                    encryption type
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#S3_KMS_KEY_ID
     *                                    S3_KMS_KEY_ID}: KMS key
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#HDFS_KERBEROS_KEYTAB
     *                                    HDFS_KERBEROS_KEYTAB}: Kerberos
     *                                    keytab file location for the given
     *                                    HDFS user.  This may be a KIFS file.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#HDFS_DELEGATION_TOKEN
     *                                    HDFS_DELEGATION_TOKEN}: Delegation
     *                                    token for the given HDFS user
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#HDFS_USE_KERBEROS
     *                                    HDFS_USE_KERBEROS}: Use kerberos
     *                                    authentication for the given HDFS
     *                                    cluster.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#FALSE FALSE}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#AZURE_STORAGE_ACCOUNT_NAME
     *                                    AZURE_STORAGE_ACCOUNT_NAME}: Name of
     *                                    the Azure storage account to use as
     *                                    the data sink, this is valid only if
     *                                    tenant_id is specified
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#AZURE_CONTAINER_NAME
     *                                    AZURE_CONTAINER_NAME}: Name of the
     *                                    Azure storage container to use as the
     *                                    data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#AZURE_TENANT_ID
     *                                    AZURE_TENANT_ID}: Active Directory
     *                                    tenant ID (or directory ID)
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#AZURE_SAS_TOKEN
     *                                    AZURE_SAS_TOKEN}: Shared access
     *                                    signature token for Azure storage
     *                                    account to use as the data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#AZURE_OAUTH_TOKEN
     *                                    AZURE_OAUTH_TOKEN}: Oauth token to
     *                                    access given storage container
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#GCS_BUCKET_NAME
     *                                    GCS_BUCKET_NAME}: Name of the Google
     *                                    Cloud Storage bucket to use as the
     *                                    data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#GCS_PROJECT_ID
     *                                    GCS_PROJECT_ID}: Name of the Google
     *                                    Cloud project to use as the data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#GCS_SERVICE_ACCOUNT_KEYS
     *                                    GCS_SERVICE_ACCOUNT_KEYS}: Google
     *                                    Cloud service account keys to use for
     *                                    authenticating the data sink
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#JDBC_DRIVER_JAR_PATH
     *                                    JDBC_DRIVER_JAR_PATH}: JDBC driver
     *                                    jar file location.  This may be a
     *                                    KIFS file.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#JDBC_DRIVER_CLASS_NAME
     *                                    JDBC_DRIVER_CLASS_NAME}: Name of the
     *                                    JDBC driver class
     *                                <li>{@link DatasinkUpdatesMap#KAFKA_URL
     *                                    KAFKA_URL}: The publicly-accessible
     *                                    full path URL to the kafka broker,
     *                                    e.g., 'http://172.123.45.67:9300'.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#KAFKA_TOPIC_NAME
     *                                    KAFKA_TOPIC_NAME}: Name of the Kafka
     *                                    topic to use for this data sink, if
     *                                    it references a Kafka broker
     *                                <li>{@link DatasinkUpdatesMap#ANONYMOUS
     *                                    ANONYMOUS}: Create an anonymous
     *                                    connection to the storage
     *                                    provider--DEPRECATED: this is now the
     *                                    default.  Specify
     *                                    use_managed_credentials for
     *                                    non-anonymous connection.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#TRUE TRUE}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#USE_MANAGED_CREDENTIALS
     *                                    USE_MANAGED_CREDENTIALS}: When no
     *                                    credentials are supplied, we use
     *                                    anonymous access by default.  If this
     *                                    is set, we will use cloud provider
     *                                    user settings.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#FALSE FALSE}.
     *                                <li>{@link DatasinkUpdatesMap#USE_HTTPS
     *                                    USE_HTTPS}: Use https to connect to
     *                                    datasink if true, otherwise use http.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#TRUE TRUE}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#MAX_BATCH_SIZE
     *                                    MAX_BATCH_SIZE}: Maximum number of
     *                                    records per notification message. The
     *                                    default value is '1'.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#MAX_MESSAGE_SIZE
     *                                    MAX_MESSAGE_SIZE}: Maximum size in
     *                                    bytes of each notification message.
     *                                    The default value is '1000000'.
     *                                <li>{@link DatasinkUpdatesMap#JSON_FORMAT
     *                                    JSON_FORMAT}: The desired format of
     *                                    JSON encoded notifications message.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FLAT
     *                                            FLAT}: A single record is
     *                                            returned per message
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#NESTED
     *                                            NESTED}: Records are returned
     *                                            as an array per message
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#FLAT FLAT}.
     *                                <li>{@link
     *                                    DatasinkUpdatesMap#SKIP_VALIDATION
     *                                    SKIP_VALIDATION}: Bypass validation
     *                                    of connection to this data sink.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            DatasinkUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    DatasinkUpdatesMap#FALSE FALSE}.
     *                                <li>{@link DatasinkUpdatesMap#SCHEMA_NAME
     *                                    SCHEMA_NAME}: Updates the schema
     *                                    name.  If {@link
     *                                    DatasinkUpdatesMap#SCHEMA_NAME
     *                                    SCHEMA_NAME} doesn't exist, an error
     *                                    will be thrown. If {@link
     *                                    DatasinkUpdatesMap#SCHEMA_NAME
     *                                    SCHEMA_NAME} is empty, then the
     *                                    user's default schema will be used.
     *                            </ul>
     * @param options  Optional parameters.
     */
    public AlterDatasinkRequest(String name, Map<String, String> datasinkUpdatesMap, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.datasinkUpdatesMap = (datasinkUpdatesMap == null) ? new LinkedHashMap<String, String>() : datasinkUpdatesMap;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the data sink to be altered. Must be an existing data sink.
     *
     * @return The current value of {@code name}.
     */
    public String getName() {
        return name;
    }

    /**
     * Name of the data sink to be altered. Must be an existing data sink.
     *
     * @param name  The new value for {@code name}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterDatasinkRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * Map containing the properties of the data sink to be updated. Error if
     * empty.
     * <ul>
     *     <li>{@link DatasinkUpdatesMap#DESTINATION DESTINATION}: Destination
     *         for the output data in format 'destination_type://path[:port]'.
     *         Supported destination types are 'azure', 'gcs', 'hdfs', 'http',
     *         'https', 'jdbc', 'kafka', and 's3'.
     *     <li>{@link DatasinkUpdatesMap#CONNECTION_TIMEOUT
     *         CONNECTION_TIMEOUT}: Timeout in seconds for connecting to this
     *         sink
     *     <li>{@link DatasinkUpdatesMap#WAIT_TIMEOUT WAIT_TIMEOUT}: Timeout in
     *         seconds for waiting for a response from this sink
     *     <li>{@link DatasinkUpdatesMap#CREDENTIAL CREDENTIAL}: Name of the <a
     *         href="../../../../../../concepts/credentials/"
     *         target="_top">credential</a> object to be used in this data sink
     *     <li>{@link DatasinkUpdatesMap#S3_BUCKET_NAME S3_BUCKET_NAME}: Name
     *         of the Amazon S3 bucket to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#S3_REGION S3_REGION}: Name of the
     *         Amazon S3 region where the given bucket is located
     *     <li>{@link DatasinkUpdatesMap#S3_VERIFY_SSL S3_VERIFY_SSL}: Whether
     *         to verify SSL connections.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}: Connect with SSL
     *                 verification
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Connect without
     *                 verifying the SSL connection; for testing purposes,
     *                 bypassing TLS errors, self-signed certificates, etc.
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#S3_USE_VIRTUAL_ADDRESSING
     *         S3_USE_VIRTUAL_ADDRESSING}: Whether to use virtual addressing
     *         when referencing the Amazon S3 sink.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}: The requests URI
     *                 should be specified in virtual-hosted-style format where
     *                 the bucket name is part of the domain name in the URL.
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Use path-style
     *                 URI for requests.
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#S3_AWS_ROLE_ARN S3_AWS_ROLE_ARN}:
     *         Amazon IAM Role ARN which has required S3 permissions that can
     *         be assumed for the given S3 IAM user
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_ALGORITHM
     *         S3_ENCRYPTION_CUSTOMER_ALGORITHM}: Customer encryption algorithm
     *         used encrypting data
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_KEY
     *         S3_ENCRYPTION_CUSTOMER_KEY}: Customer encryption key to encrypt
     *         or decrypt data
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_TYPE
     *         S3_ENCRYPTION_TYPE}: Server side encryption type
     *     <li>{@link DatasinkUpdatesMap#S3_KMS_KEY_ID S3_KMS_KEY_ID}: KMS key
     *     <li>{@link DatasinkUpdatesMap#HDFS_KERBEROS_KEYTAB
     *         HDFS_KERBEROS_KEYTAB}: Kerberos keytab file location for the
     *         given HDFS user.  This may be a KIFS file.
     *     <li>{@link DatasinkUpdatesMap#HDFS_DELEGATION_TOKEN
     *         HDFS_DELEGATION_TOKEN}: Delegation token for the given HDFS user
     *     <li>{@link DatasinkUpdatesMap#HDFS_USE_KERBEROS HDFS_USE_KERBEROS}:
     *         Use kerberos authentication for the given HDFS cluster.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#AZURE_STORAGE_ACCOUNT_NAME
     *         AZURE_STORAGE_ACCOUNT_NAME}: Name of the Azure storage account
     *         to use as the data sink, this is valid only if tenant_id is
     *         specified
     *     <li>{@link DatasinkUpdatesMap#AZURE_CONTAINER_NAME
     *         AZURE_CONTAINER_NAME}: Name of the Azure storage container to
     *         use as the data sink
     *     <li>{@link DatasinkUpdatesMap#AZURE_TENANT_ID AZURE_TENANT_ID}:
     *         Active Directory tenant ID (or directory ID)
     *     <li>{@link DatasinkUpdatesMap#AZURE_SAS_TOKEN AZURE_SAS_TOKEN}:
     *         Shared access signature token for Azure storage account to use
     *         as the data sink
     *     <li>{@link DatasinkUpdatesMap#AZURE_OAUTH_TOKEN AZURE_OAUTH_TOKEN}:
     *         Oauth token to access given storage container
     *     <li>{@link DatasinkUpdatesMap#GCS_BUCKET_NAME GCS_BUCKET_NAME}: Name
     *         of the Google Cloud Storage bucket to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#GCS_PROJECT_ID GCS_PROJECT_ID}: Name
     *         of the Google Cloud project to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#GCS_SERVICE_ACCOUNT_KEYS
     *         GCS_SERVICE_ACCOUNT_KEYS}: Google Cloud service account keys to
     *         use for authenticating the data sink
     *     <li>{@link DatasinkUpdatesMap#JDBC_DRIVER_JAR_PATH
     *         JDBC_DRIVER_JAR_PATH}: JDBC driver jar file location.  This may
     *         be a KIFS file.
     *     <li>{@link DatasinkUpdatesMap#JDBC_DRIVER_CLASS_NAME
     *         JDBC_DRIVER_CLASS_NAME}: Name of the JDBC driver class
     *     <li>{@link DatasinkUpdatesMap#KAFKA_URL KAFKA_URL}: The
     *         publicly-accessible full path URL to the kafka broker, e.g.,
     *         'http://172.123.45.67:9300'.
     *     <li>{@link DatasinkUpdatesMap#KAFKA_TOPIC_NAME KAFKA_TOPIC_NAME}:
     *         Name of the Kafka topic to use for this data sink, if it
     *         references a Kafka broker
     *     <li>{@link DatasinkUpdatesMap#ANONYMOUS ANONYMOUS}: Create an
     *         anonymous connection to the storage provider--DEPRECATED: this
     *         is now the default.  Specify use_managed_credentials for
     *         non-anonymous connection.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#USE_MANAGED_CREDENTIALS
     *         USE_MANAGED_CREDENTIALS}: When no credentials are supplied, we
     *         use anonymous access by default.  If this is set, we will use
     *         cloud provider user settings.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#USE_HTTPS USE_HTTPS}: Use https to
     *         connect to datasink if true, otherwise use http.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#MAX_BATCH_SIZE MAX_BATCH_SIZE}:
     *         Maximum number of records per notification message. The default
     *         value is '1'.
     *     <li>{@link DatasinkUpdatesMap#MAX_MESSAGE_SIZE MAX_MESSAGE_SIZE}:
     *         Maximum size in bytes of each notification message. The default
     *         value is '1000000'.
     *     <li>{@link DatasinkUpdatesMap#JSON_FORMAT JSON_FORMAT}: The desired
     *         format of JSON encoded notifications message.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#FLAT FLAT}: A single record is
     *                 returned per message
     *             <li>{@link DatasinkUpdatesMap#NESTED NESTED}: Records are
     *                 returned as an array per message
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FLAT FLAT}.
     *     <li>{@link DatasinkUpdatesMap#SKIP_VALIDATION SKIP_VALIDATION}:
     *         Bypass validation of connection to this data sink.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#SCHEMA_NAME SCHEMA_NAME}: Updates the
     *         schema name.  If {@link DatasinkUpdatesMap#SCHEMA_NAME
     *         SCHEMA_NAME} doesn't exist, an error will be thrown. If {@link
     *         DatasinkUpdatesMap#SCHEMA_NAME SCHEMA_NAME} is empty, then the
     *         user's default schema will be used.
     * </ul>
     *
     * @return The current value of {@code datasinkUpdatesMap}.
     */
    public Map<String, String> getDatasinkUpdatesMap() {
        return datasinkUpdatesMap;
    }

    /**
     * Map containing the properties of the data sink to be updated. Error if
     * empty.
     * <ul>
     *     <li>{@link DatasinkUpdatesMap#DESTINATION DESTINATION}: Destination
     *         for the output data in format 'destination_type://path[:port]'.
     *         Supported destination types are 'azure', 'gcs', 'hdfs', 'http',
     *         'https', 'jdbc', 'kafka', and 's3'.
     *     <li>{@link DatasinkUpdatesMap#CONNECTION_TIMEOUT
     *         CONNECTION_TIMEOUT}: Timeout in seconds for connecting to this
     *         sink
     *     <li>{@link DatasinkUpdatesMap#WAIT_TIMEOUT WAIT_TIMEOUT}: Timeout in
     *         seconds for waiting for a response from this sink
     *     <li>{@link DatasinkUpdatesMap#CREDENTIAL CREDENTIAL}: Name of the <a
     *         href="../../../../../../concepts/credentials/"
     *         target="_top">credential</a> object to be used in this data sink
     *     <li>{@link DatasinkUpdatesMap#S3_BUCKET_NAME S3_BUCKET_NAME}: Name
     *         of the Amazon S3 bucket to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#S3_REGION S3_REGION}: Name of the
     *         Amazon S3 region where the given bucket is located
     *     <li>{@link DatasinkUpdatesMap#S3_VERIFY_SSL S3_VERIFY_SSL}: Whether
     *         to verify SSL connections.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}: Connect with SSL
     *                 verification
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Connect without
     *                 verifying the SSL connection; for testing purposes,
     *                 bypassing TLS errors, self-signed certificates, etc.
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#S3_USE_VIRTUAL_ADDRESSING
     *         S3_USE_VIRTUAL_ADDRESSING}: Whether to use virtual addressing
     *         when referencing the Amazon S3 sink.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}: The requests URI
     *                 should be specified in virtual-hosted-style format where
     *                 the bucket name is part of the domain name in the URL.
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}: Use path-style
     *                 URI for requests.
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#S3_AWS_ROLE_ARN S3_AWS_ROLE_ARN}:
     *         Amazon IAM Role ARN which has required S3 permissions that can
     *         be assumed for the given S3 IAM user
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_ALGORITHM
     *         S3_ENCRYPTION_CUSTOMER_ALGORITHM}: Customer encryption algorithm
     *         used encrypting data
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_CUSTOMER_KEY
     *         S3_ENCRYPTION_CUSTOMER_KEY}: Customer encryption key to encrypt
     *         or decrypt data
     *     <li>{@link DatasinkUpdatesMap#S3_ENCRYPTION_TYPE
     *         S3_ENCRYPTION_TYPE}: Server side encryption type
     *     <li>{@link DatasinkUpdatesMap#S3_KMS_KEY_ID S3_KMS_KEY_ID}: KMS key
     *     <li>{@link DatasinkUpdatesMap#HDFS_KERBEROS_KEYTAB
     *         HDFS_KERBEROS_KEYTAB}: Kerberos keytab file location for the
     *         given HDFS user.  This may be a KIFS file.
     *     <li>{@link DatasinkUpdatesMap#HDFS_DELEGATION_TOKEN
     *         HDFS_DELEGATION_TOKEN}: Delegation token for the given HDFS user
     *     <li>{@link DatasinkUpdatesMap#HDFS_USE_KERBEROS HDFS_USE_KERBEROS}:
     *         Use kerberos authentication for the given HDFS cluster.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#AZURE_STORAGE_ACCOUNT_NAME
     *         AZURE_STORAGE_ACCOUNT_NAME}: Name of the Azure storage account
     *         to use as the data sink, this is valid only if tenant_id is
     *         specified
     *     <li>{@link DatasinkUpdatesMap#AZURE_CONTAINER_NAME
     *         AZURE_CONTAINER_NAME}: Name of the Azure storage container to
     *         use as the data sink
     *     <li>{@link DatasinkUpdatesMap#AZURE_TENANT_ID AZURE_TENANT_ID}:
     *         Active Directory tenant ID (or directory ID)
     *     <li>{@link DatasinkUpdatesMap#AZURE_SAS_TOKEN AZURE_SAS_TOKEN}:
     *         Shared access signature token for Azure storage account to use
     *         as the data sink
     *     <li>{@link DatasinkUpdatesMap#AZURE_OAUTH_TOKEN AZURE_OAUTH_TOKEN}:
     *         Oauth token to access given storage container
     *     <li>{@link DatasinkUpdatesMap#GCS_BUCKET_NAME GCS_BUCKET_NAME}: Name
     *         of the Google Cloud Storage bucket to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#GCS_PROJECT_ID GCS_PROJECT_ID}: Name
     *         of the Google Cloud project to use as the data sink
     *     <li>{@link DatasinkUpdatesMap#GCS_SERVICE_ACCOUNT_KEYS
     *         GCS_SERVICE_ACCOUNT_KEYS}: Google Cloud service account keys to
     *         use for authenticating the data sink
     *     <li>{@link DatasinkUpdatesMap#JDBC_DRIVER_JAR_PATH
     *         JDBC_DRIVER_JAR_PATH}: JDBC driver jar file location.  This may
     *         be a KIFS file.
     *     <li>{@link DatasinkUpdatesMap#JDBC_DRIVER_CLASS_NAME
     *         JDBC_DRIVER_CLASS_NAME}: Name of the JDBC driver class
     *     <li>{@link DatasinkUpdatesMap#KAFKA_URL KAFKA_URL}: The
     *         publicly-accessible full path URL to the kafka broker, e.g.,
     *         'http://172.123.45.67:9300'.
     *     <li>{@link DatasinkUpdatesMap#KAFKA_TOPIC_NAME KAFKA_TOPIC_NAME}:
     *         Name of the Kafka topic to use for this data sink, if it
     *         references a Kafka broker
     *     <li>{@link DatasinkUpdatesMap#ANONYMOUS ANONYMOUS}: Create an
     *         anonymous connection to the storage provider--DEPRECATED: this
     *         is now the default.  Specify use_managed_credentials for
     *         non-anonymous connection.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#USE_MANAGED_CREDENTIALS
     *         USE_MANAGED_CREDENTIALS}: When no credentials are supplied, we
     *         use anonymous access by default.  If this is set, we will use
     *         cloud provider user settings.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#USE_HTTPS USE_HTTPS}: Use https to
     *         connect to datasink if true, otherwise use http.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#TRUE TRUE}.
     *     <li>{@link DatasinkUpdatesMap#MAX_BATCH_SIZE MAX_BATCH_SIZE}:
     *         Maximum number of records per notification message. The default
     *         value is '1'.
     *     <li>{@link DatasinkUpdatesMap#MAX_MESSAGE_SIZE MAX_MESSAGE_SIZE}:
     *         Maximum size in bytes of each notification message. The default
     *         value is '1000000'.
     *     <li>{@link DatasinkUpdatesMap#JSON_FORMAT JSON_FORMAT}: The desired
     *         format of JSON encoded notifications message.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#FLAT FLAT}: A single record is
     *                 returned per message
     *             <li>{@link DatasinkUpdatesMap#NESTED NESTED}: Records are
     *                 returned as an array per message
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FLAT FLAT}.
     *     <li>{@link DatasinkUpdatesMap#SKIP_VALIDATION SKIP_VALIDATION}:
     *         Bypass validation of connection to this data sink.
     *         Supported values:
     *         <ul>
     *             <li>{@link DatasinkUpdatesMap#TRUE TRUE}
     *             <li>{@link DatasinkUpdatesMap#FALSE FALSE}
     *         </ul>
     *         The default value is {@link DatasinkUpdatesMap#FALSE FALSE}.
     *     <li>{@link DatasinkUpdatesMap#SCHEMA_NAME SCHEMA_NAME}: Updates the
     *         schema name.  If {@link DatasinkUpdatesMap#SCHEMA_NAME
     *         SCHEMA_NAME} doesn't exist, an error will be thrown. If {@link
     *         DatasinkUpdatesMap#SCHEMA_NAME SCHEMA_NAME} is empty, then the
     *         user's default schema will be used.
     * </ul>
     *
     * @param datasinkUpdatesMap  The new value for {@code datasinkUpdatesMap}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterDatasinkRequest setDatasinkUpdatesMap(Map<String, String> datasinkUpdatesMap) {
        this.datasinkUpdatesMap = (datasinkUpdatesMap == null) ? new LinkedHashMap<String, String>() : datasinkUpdatesMap;
        return this;
    }

    /**
     * Optional parameters.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterDatasinkRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.datasinkUpdatesMap;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.datasinkUpdatesMap = (Map<String, String>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterDatasinkRequest that = (AlterDatasinkRequest)obj;

        return ( this.name.equals( that.name )
                 && this.datasinkUpdatesMap.equals( that.datasinkUpdatesMap )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasinkUpdatesMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasinkUpdatesMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.datasinkUpdatesMap.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
