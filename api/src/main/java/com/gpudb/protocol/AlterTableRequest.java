/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterTable(AlterTableRequest)}.
 * <p>
 * Apply various modifications to a table or view.  The
 * available modifications include the following:
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its
 * <a href="../../../../../../concepts/types/" target="_top">type and
 * properties</a> modified, including whether it is
 * <a href="../../../../../../concepts/dictionary_encoding/"
 * target="_top">dictionary encoded</a> or not.
 * <p>
 * External tables cannot be modified except for their refresh method.
 * <p>
 * Create or delete a <a
 * href="../../../../../../concepts/indexes/#column-index"
 * target="_top">column</a>,
 * <a href="../../../../../../concepts/indexes/#chunk-skip-index"
 * target="_top">chunk skip</a>, or
 * <a href="../../../../../../concepts/indexes/#geospatial-index"
 * target="_top">geospatial</a> index. This can speed up
 * certain operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 * <p>
 * Create or delete a <a href="../../../../../../concepts/tables/#foreign-key"
 * target="_top">foreign key</a>
 * on a particular column.
 * <p>
 * Manage a
 * <a href="../../../../../../concepts/tables/#partitioning-by-range"
 * target="_top">range-partitioned</a> or a
 * <a href="../../../../../../concepts/tables/#partitioning-by-list-manual"
 * target="_top">manual list-partitioned</a>
 * table's partitions.
 * <p>
 * Set (or reset) the <a href="../../../../../../rm/concepts/#tier-strategies"
 * target="_top">tier strategy</a>
 * of a table or view.
 * <p>
 * Refresh and manage the refresh mode of a
 * <a href="../../../../../../concepts/materialized_views/"
 * target="_top">materialized view</a> or an
 * <a href="../../../../../../concepts/external_tables/" target="_top">external
 * table</a>.
 * <p>
 * Set the <a href="../../../../../../concepts/ttl/" target="_top">time-to-live
 * (TTL)</a>. This can be applied
 * to tables or views.
 * <p>
 * Set the global access mode (i.e. locking) for a table. This setting trumps
 * any
 * role-based access controls that may be in place; e.g., a user with write
 * access
 * to a table marked read-only will not be able to insert records into it. The
 * mode
 * can be set to read-only, write-only, read/write, and no access.
 */
public class AlterTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Modification operation to be applied
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     * ALLOW_HOMOGENEOUS_TABLES}: No longer supported; action will be ignored.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX CREATE_INDEX}:
     * Creates a <a href="../../../../../../concepts/indexes/#column-index"
     * target="_top">column (attribute) index</a>,
     * <a href="../../../../../../concepts/indexes/#chunk-skip-index"
     * target="_top">chunk skip index</a>, or
     * <a href="../../../../../../concepts/indexes/#geospatial-index"
     * target="_top">geospatial index</a>
     * (depending on the specified {@code index_type}), on the column name
     * specified in {@code value}.
     * If this column already has the specified index, an error will be
     * returned.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX DELETE_INDEX}:
     * Deletes a <a href="../../../../../../concepts/indexes/#column-index"
     * target="_top">column (attribute) index</a>,
     * <a href="../../../../../../concepts/indexes/#chunk-skip-index"
     * target="_top">chunk skip index</a>, or
     * <a href="../../../../../../concepts/indexes/#geospatial-index"
     * target="_top">geospatial index</a>
     * (depending on the specified {@code index_type}), on the column name
     * specified in {@code value}.
     * If this column does not have the specified index, an error will be
     * returned.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     * MOVE_TO_COLLECTION}: [DEPRECATED--please use {@code move_to_schema} and
     * use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to create
     * the schema if non-existent]  Moves a table or view into a schema named
     * {@code value}.  If the schema provided is non-existent, it will be
     * automatically created.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_SCHEMA
     * MOVE_TO_SCHEMA}: Moves a table or view into a schema named {@code
     * value}.
     * If the schema provided is nonexistent, an error will be thrown.
     * If {@code value} is empty, then the table or view will be placed in the
     * user's default schema.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#PROTECTED PROTECTED}: No
     * longer used.  Previously set whether the given {@code tableName} should
     * be protected or not. The {@code value} would have been either 'true' or
     * 'false'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE RENAME_TABLE}:
     * Renames a table or view within its current schema to {@code value}. Has
     * the same naming restrictions as <a
     * href="../../../../../../concepts/tables/" target="_top">tables</a>.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Action#TTL
     * TTL}: Sets the <a href="../../../../../../concepts/ttl/"
     * target="_top">time-to-live</a> in minutes of the table or view specified
     * in {@code tableName}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN ADD_COLUMN}: Adds
     * the column specified in {@code value} to the table specified in {@code
     * tableName}.
     * Use {@code column_type} and {@code column_properties} in {@code options}
     * to set the column's type and properties, respectively.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     * CHANGE_COLUMN}: Changes type and properties of the column specified in
     * {@code value}.
     * Use {@code column_type} and {@code column_properties} in {@code options}
     * to set
     * the column's type and properties, respectively. Note that primary key
     * and/or shard key columns cannot be changed.
     * All unchanging column properties must be listed for the change to take
     * place, e.g., to add dictionary encoding to
     * an existing 'char4' column, both 'char4' and 'dict' must be specified in
     * the {@code options} map.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     * SET_COLUMN_COMPRESSION}: No longer supported; action will be ignored.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     * DELETE_COLUMN}: Deletes the column specified in {@code value} from the
     * table specified in {@code tableName}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     * CREATE_FOREIGN_KEY}: Creates a <a
     * href="../../../../../../concepts/tables/#foreign-key"
     * target="_top">foreign key</a> specified in {@code value} using the
     * format '(source_column_name [, ...]) references
     * target_table_name(primary_key_column_name [, ...]) [as
     * foreign_key_name]'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     * DELETE_FOREIGN_KEY}: Deletes a <a
     * href="../../../../../../concepts/tables/#foreign-key"
     * target="_top">foreign key</a>.  The {@code value} should be the
     * foreign_key_name specified when creating the key or the complete string
     * used to define it.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#ADD_PARTITION
     * ADD_PARTITION}: Adds the partition specified in {@code value}, to either
     * a <a href="../../../../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or <a
     * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a> table.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#REMOVE_PARTITION
     * REMOVE_PARTITION}: Removes the partition specified in {@code value} (and
     * relocates all of its data to the default partition) from either a <a
     * href="../../../../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or <a
     * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a> table.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#DELETE_PARTITION
     * DELETE_PARTITION}: Deletes the partition specified in {@code value} (and
     * all of its data) from either a <a
     * href="../../../../../../concepts/tables/#partitioning-by-range"
     * target="_top">range-partitioned</a> or <a
     * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a> table.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     * SET_GLOBAL_ACCESS_MODE}: Sets the global access mode (i.e. locking) for
     * the table specified in {@code tableName}. Specify the access mode in
     * {@code value}. Valid modes are 'no_access', 'read_only', 'write_only'
     * and 'read_write'.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     * REFRESH}: For a <a href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a>, replays all the table creation
     * commands required to create the view.  For an <a
     * href="../../../../../../concepts/external_tables/"
     * target="_top">external table</a>, reloads all data in the table from its
     * associated source files or <a
     * href="../../../../../../concepts/data_sources/" target="_top">data
     * source</a>.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     * SET_REFRESH_METHOD}: For a <a
     * href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a>, sets the method by which the view
     * is refreshed to the method specified in {@code value} - one of 'manual',
     * 'periodic', or 'on_change'.  For an <a
     * href="../../../../../../concepts/external_tables/"
     * target="_top">external table</a>, sets the method by which the table is
     * refreshed to the method specified in {@code value} - either 'manual' or
     * 'on_start'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     * SET_REFRESH_START_TIME}: Sets the time to start periodic refreshes of
     * this <a href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a> to the datetime string specified in
     * {@code value} with format 'YYYY-MM-DD HH:MM:SS'.  Subsequent refreshes
     * occur at the specified time + N * the refresh period.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_STOP_TIME
     * SET_REFRESH_STOP_TIME}: Sets the time to stop periodic refreshes of this
     * <a href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a> to the datetime string specified in
     * {@code value} with format 'YYYY-MM-DD HH:MM:SS'.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     * SET_REFRESH_PERIOD}: Sets the time interval in seconds at which to
     * refresh this <a href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a> to the value specified in {@code
     * value}.  Also, sets the refresh method to periodic if not already set.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_SPAN
     * SET_REFRESH_SPAN}: Sets the future time-offset(in seconds) for the view
     * refresh to stop.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_EXECUTE_AS
     * SET_REFRESH_EXECUTE_AS}: Sets the user name to refresh this <a
     * href="../../../../../../concepts/materialized_views/"
     * target="_top">materialized view</a> to the value specified in {@code
     * value}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#REMOVE_TEXT_SEARCH_ATTRIBUTES
     * REMOVE_TEXT_SEARCH_ATTRIBUTES}: Removes <a
     * href="../../../../../../concepts/full_text_search/" target="_top">text
     * search</a> attribute from all columns.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#REMOVE_SHARD_KEYS
     * REMOVE_SHARD_KEYS}: Removes the shard key property from all columns, so
     * that the table will be considered randomly sharded.  The data is not
     * moved.  The {@code value} is ignored.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#SET_STRATEGY_DEFINITION
     * SET_STRATEGY_DEFINITION}: Sets the <a
     * href="../../../../../../rm/concepts/#tier-strategies" target="_top">tier
     * strategy</a> for the table and its columns to the one specified in
     * {@code value}, replacing the existing tier strategy in its entirety.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CANCEL_DATASOURCE_SUBSCRIPTION
     * CANCEL_DATASOURCE_SUBSCRIPTION}: Permanently unsubscribe a data source
     * that is loading continuously as a stream. The data source can be Kafka /
     * S3 / Azure.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#PAUSE_DATASOURCE_SUBSCRIPTION
     * PAUSE_DATASOURCE_SUBSCRIPTION}: Temporarily unsubscribe a data source
     * that is loading continuously as a stream. The data source can be Kafka /
     * S3 / Azure.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#RESUME_DATASOURCE_SUBSCRIPTION
     * RESUME_DATASOURCE_SUBSCRIPTION}: Resubscribe to a paused data source
     * subscription. The data source can be Kafka / S3 / Azure.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Action#CHANGE_OWNER CHANGE_OWNER}:
     * Change the owner resource group of the table.
     * </ul>
     * A set of string constants for the parameter {@code action}.
     */
    public static final class Action {

        /**
         * No longer supported; action will be ignored.
         */
        public static final String ALLOW_HOMOGENEOUS_TABLES = "allow_homogeneous_tables";

        /**
         * Creates a <a href="../../../../../../concepts/indexes/#column-index"
         * target="_top">column (attribute) index</a>,
         * <a href="../../../../../../concepts/indexes/#chunk-skip-index"
         * target="_top">chunk skip index</a>, or
         * <a href="../../../../../../concepts/indexes/#geospatial-index"
         * target="_top">geospatial index</a>
         * (depending on the specified {@code index_type}), on the column name
         * specified in {@code value}.
         * If this column already has the specified index, an error will be
         * returned.
         */
        public static final String CREATE_INDEX = "create_index";

        /**
         * Deletes a <a href="../../../../../../concepts/indexes/#column-index"
         * target="_top">column (attribute) index</a>,
         * <a href="../../../../../../concepts/indexes/#chunk-skip-index"
         * target="_top">chunk skip index</a>, or
         * <a href="../../../../../../concepts/indexes/#geospatial-index"
         * target="_top">geospatial index</a>
         * (depending on the specified {@code index_type}), on the column name
         * specified in {@code value}.
         * If this column does not have the specified index, an error will be
         * returned.
         */
        public static final String DELETE_INDEX = "delete_index";

        /**
         * [DEPRECATED--please use {@code move_to_schema} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to create the
         * schema if non-existent]  Moves a table or view into a schema named
         * {@code value}.  If the schema provided is non-existent, it will be
         * automatically created.
         */
        public static final String MOVE_TO_COLLECTION = "move_to_collection";

        /**
         * Moves a table or view into a schema named {@code value}.
         * If the schema provided is nonexistent, an error will be thrown.
         * If {@code value} is empty, then the table or view will be placed in
         * the user's default schema.
         */
        public static final String MOVE_TO_SCHEMA = "move_to_schema";

        /**
         * No longer used.  Previously set whether the given {@code tableName}
         * should be protected or not. The {@code value} would have been either
         * 'true' or 'false'.
         */
        public static final String PROTECTED = "protected";

        /**
         * Renames a table or view within its current schema to {@code value}.
         * Has the same naming restrictions as <a
         * href="../../../../../../concepts/tables/" target="_top">tables</a>.
         */
        public static final String RENAME_TABLE = "rename_table";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">time-to-live</a> in minutes of the table or view
         * specified in {@code tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * Adds the column specified in {@code value} to the table specified in
         * {@code tableName}.
         * Use {@code column_type} and {@code column_properties} in {@code
         * options}
         * to set the column's type and properties, respectively.
         */
        public static final String ADD_COLUMN = "add_column";

        /**
         * Changes type and properties of the column specified in {@code
         * value}.
         * Use {@code column_type} and {@code column_properties} in {@code
         * options} to set
         * the column's type and properties, respectively. Note that primary
         * key and/or shard key columns cannot be changed.
         * All unchanging column properties must be listed for the change to
         * take place, e.g., to add dictionary encoding to
         * an existing 'char4' column, both 'char4' and 'dict' must be
         * specified in the {@code options} map.
         */
        public static final String CHANGE_COLUMN = "change_column";

        /**
         * No longer supported; action will be ignored.
         */
        public static final String SET_COLUMN_COMPRESSION = "set_column_compression";

        /**
         * Deletes the column specified in {@code value} from the table
         * specified in {@code tableName}.
         */
        public static final String DELETE_COLUMN = "delete_column";

        /**
         * Creates a <a href="../../../../../../concepts/tables/#foreign-key"
         * target="_top">foreign key</a> specified in {@code value} using the
         * format '(source_column_name [, ...]) references
         * target_table_name(primary_key_column_name [, ...]) [as
         * foreign_key_name]'.
         */
        public static final String CREATE_FOREIGN_KEY = "create_foreign_key";

        /**
         * Deletes a <a href="../../../../../../concepts/tables/#foreign-key"
         * target="_top">foreign key</a>.  The {@code value} should be the
         * foreign_key_name specified when creating the key or the complete
         * string used to define it.
         */
        public static final String DELETE_FOREIGN_KEY = "delete_foreign_key";

        /**
         * Adds the partition specified in {@code value}, to either a <a
         * href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range-partitioned</a> or <a
         * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
         * target="_top">manual list-partitioned</a> table.
         */
        public static final String ADD_PARTITION = "add_partition";

        /**
         * Removes the partition specified in {@code value} (and relocates all
         * of its data to the default partition) from either a <a
         * href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range-partitioned</a> or <a
         * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
         * target="_top">manual list-partitioned</a> table.
         */
        public static final String REMOVE_PARTITION = "remove_partition";

        /**
         * Deletes the partition specified in {@code value} (and all of its
         * data) from either a <a
         * href="../../../../../../concepts/tables/#partitioning-by-range"
         * target="_top">range-partitioned</a> or <a
         * href="../../../../../../concepts/tables/#partitioning-by-list-manual"
         * target="_top">manual list-partitioned</a> table.
         */
        public static final String DELETE_PARTITION = "delete_partition";

        /**
         * Sets the global access mode (i.e. locking) for the table specified
         * in {@code tableName}. Specify the access mode in {@code value}.
         * Valid modes are 'no_access', 'read_only', 'write_only' and
         * 'read_write'.
         */
        public static final String SET_GLOBAL_ACCESS_MODE = "set_global_access_mode";

        /**
         * For a <a href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a>, replays all the table creation
         * commands required to create the view.  For an <a
         * href="../../../../../../concepts/external_tables/"
         * target="_top">external table</a>, reloads all data in the table from
         * its associated source files or <a
         * href="../../../../../../concepts/data_sources/" target="_top">data
         * source</a>.
         */
        public static final String REFRESH = "refresh";

        /**
         * For a <a href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a>, sets the method by which the
         * view is refreshed to the method specified in {@code value} - one of
         * 'manual', 'periodic', or 'on_change'.  For an <a
         * href="../../../../../../concepts/external_tables/"
         * target="_top">external table</a>, sets the method by which the table
         * is refreshed to the method specified in {@code value} - either
         * 'manual' or 'on_start'.
         */
        public static final String SET_REFRESH_METHOD = "set_refresh_method";

        /**
         * Sets the time to start periodic refreshes of this <a
         * href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a> to the datetime string specified
         * in {@code value} with format 'YYYY-MM-DD HH:MM:SS'.  Subsequent
         * refreshes occur at the specified time + N * the refresh period.
         */
        public static final String SET_REFRESH_START_TIME = "set_refresh_start_time";

        /**
         * Sets the time to stop periodic refreshes of this <a
         * href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a> to the datetime string specified
         * in {@code value} with format 'YYYY-MM-DD HH:MM:SS'.
         */
        public static final String SET_REFRESH_STOP_TIME = "set_refresh_stop_time";

        /**
         * Sets the time interval in seconds at which to refresh this <a
         * href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a> to the value specified in {@code
         * value}.  Also, sets the refresh method to periodic if not already
         * set.
         */
        public static final String SET_REFRESH_PERIOD = "set_refresh_period";

        /**
         * Sets the future time-offset(in seconds) for the view refresh to
         * stop.
         */
        public static final String SET_REFRESH_SPAN = "set_refresh_span";

        /**
         * Sets the user name to refresh this <a
         * href="../../../../../../concepts/materialized_views/"
         * target="_top">materialized view</a> to the value specified in {@code
         * value}.
         */
        public static final String SET_REFRESH_EXECUTE_AS = "set_refresh_execute_as";

        /**
         * Removes <a href="../../../../../../concepts/full_text_search/"
         * target="_top">text search</a> attribute from all columns.
         */
        public static final String REMOVE_TEXT_SEARCH_ATTRIBUTES = "remove_text_search_attributes";

        /**
         * Removes the shard key property from all columns, so that the table
         * will be considered randomly sharded.  The data is not moved.  The
         * {@code value} is ignored.
         */
        public static final String REMOVE_SHARD_KEYS = "remove_shard_keys";

        /**
         * Sets the <a href="../../../../../../rm/concepts/#tier-strategies"
         * target="_top">tier strategy</a> for the table and its columns to the
         * one specified in {@code value}, replacing the existing tier strategy
         * in its entirety.
         */
        public static final String SET_STRATEGY_DEFINITION = "set_strategy_definition";

        /**
         * Permanently unsubscribe a data source that is loading continuously
         * as a stream. The data source can be Kafka / S3 / Azure.
         */
        public static final String CANCEL_DATASOURCE_SUBSCRIPTION = "cancel_datasource_subscription";

        /**
         * Temporarily unsubscribe a data source that is loading continuously
         * as a stream. The data source can be Kafka / S3 / Azure.
         */
        public static final String PAUSE_DATASOURCE_SUBSCRIPTION = "pause_datasource_subscription";

        /**
         * Resubscribe to a paused data source subscription. The data source
         * can be Kafka / S3 / Azure.
         */
        public static final String RESUME_DATASOURCE_SUBSCRIPTION = "resume_datasource_subscription";

        /**
         * Change the owner resource group of the table.
         */
        public static final String CHANGE_OWNER = "change_owner";

        private Action() {  }
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#ACTION
     * ACTION}
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_NAME COLUMN_NAME}
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#TABLE_NAME TABLE_NAME}
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     * COLUMN_DEFAULT_VALUE}: When adding a column, set a default value for
     * existing records.  For nullable columns, the default value will be null,
     * regardless of data type.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     * COLUMN_PROPERTIES}: When adding or changing a column, set the column
     * properties (strings, separated by a comma: data, store_only,
     * text_search, char8, int8 etc).
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE COLUMN_TYPE}:
     * When adding or changing a column, set the column type (strings,
     * separated by a comma: int, double, string, null etc).
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     * COMPRESSION_TYPE}: No longer supported; option will be ignored.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#NONE
     * NONE}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     * SNAPPY}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4
     * LZ4}
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     * LZ4HC}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     * COPY_VALUES_FROM_COLUMN}: [DEPRECATED--please use {@code
     * add_column_expression} instead.]
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     * RENAME_COLUMN}: When changing a column, specify new column name.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     * VALIDATE_CHANGE_COLUMN}: When changing a column, validate the change
     * before applying it (or not).
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#TRUE
     * TRUE}: Validate all values. A value too large (or too long) for the new
     * type will prevent any change.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#FALSE
     * FALSE}: When a value is too large or long, it will be truncated.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#UPDATE_LAST_ACCESS_TIME
     * UPDATE_LAST_ACCESS_TIME}: Indicates whether the <a
     * href="../../../../../../concepts/ttl/" target="_top">time-to-live</a>
     * (TTL) expiration countdown timer should be reset to the table's TTL.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#TRUE
     * TRUE}: Reset the expiration countdown timer to the table's configured
     * TTL.
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#FALSE
     * FALSE}: Don't reset the timer; expiration countdown will continue from
     * where it is, as if the table had not been accessed.
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     * ADD_COLUMN_EXPRESSION}: When adding a column, an optional expression to
     * use for the new column's values. Any valid expression may be used,
     * including one containing references to existing columns in the same
     * table.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#STRATEGY_DEFINITION
     * STRATEGY_DEFINITION}: Optional parameter for specifying the <a
     * href="../../../../../../rm/concepts/#tier-strategies" target="_top">tier
     * strategy</a> for the table and its columns when {@code action} is {@code
     * set_strategy_definition}, replacing the existing tier strategy in its
     * entirety.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#INDEX_TYPE INDEX_TYPE}:
     * Type of index to create, when {@code action} is {@code create_index},
     * or to delete, when {@code action} is {@code delete_index}.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     * COLUMN}: Create or delete a <a
     * href="../../../../../../concepts/indexes/#column-index"
     * target="_top">column (attribute) index</a>.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP CHUNK_SKIP}:
     * Create or delete a <a
     * href="../../../../../../concepts/indexes/#chunk-skip-index"
     * target="_top">chunk skip index</a>.
     *         <li> {@link
     * com.gpudb.protocol.AlterTableRequest.Options#GEOSPATIAL GEOSPATIAL}:
     * Create or delete a geospatial index
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AlterTableRequest.Options#COLUMN COLUMN}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {
        public static final String ACTION = "action";
        public static final String COLUMN_NAME = "column_name";
        public static final String TABLE_NAME = "table_name";

        /**
         * When adding a column, set a default value for existing records.  For
         * nullable columns, the default value will be null, regardless of data
         * type.
         */
        public static final String COLUMN_DEFAULT_VALUE = "column_default_value";

        /**
         * When adding or changing a column, set the column properties
         * (strings, separated by a comma: data, store_only, text_search,
         * char8, int8 etc).
         */
        public static final String COLUMN_PROPERTIES = "column_properties";

        /**
         * When adding or changing a column, set the column type (strings,
         * separated by a comma: int, double, string, null etc).
         */
        public static final String COLUMN_TYPE = "column_type";

        /**
         * No longer supported; option will be ignored.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}
         *         <li> {@link com.gpudb.protocol.AlterTableRequest.Options#LZ4
         * LZ4}
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#LZ4HC LZ4HC}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
         */
        public static final String COMPRESSION_TYPE = "compression_type";
        public static final String NONE = "none";
        public static final String SNAPPY = "snappy";
        public static final String LZ4 = "lz4";
        public static final String LZ4HC = "lz4hc";

        /**
         * [DEPRECATED--please use {@code add_column_expression} instead.]
         */
        public static final String COPY_VALUES_FROM_COLUMN = "copy_values_from_column";

        /**
         * When changing a column, specify new column name.
         */
        public static final String RENAME_COLUMN = "rename_column";

        /**
         * When changing a column, validate the change before applying it (or
         * not).
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}: Validate
         * all values. A value too large (or too long) for the new type will
         * prevent any change.
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: When a
         * value is too large or long, it will be truncated.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
         */
        public static final String VALIDATE_CHANGE_COLUMN = "validate_change_column";

        /**
         * Reset the expiration countdown timer to the table's configured TTL.
         */
        public static final String TRUE = "true";

        /**
         * Don't reset the timer; expiration countdown will continue from where
         * it is, as if the table had not been accessed.
         */
        public static final String FALSE = "false";

        /**
         * Indicates whether the <a href="../../../../../../concepts/ttl/"
         * target="_top">time-to-live</a> (TTL) expiration countdown timer
         * should be reset to the table's TTL.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}: Reset the
         * expiration countdown timer to the table's configured TTL.
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: Don't
         * reset the timer; expiration countdown will continue from where it
         * is, as if the table had not been accessed.
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
         */
        public static final String UPDATE_LAST_ACCESS_TIME = "update_last_access_time";

        /**
         * When adding a column, an optional expression to use for the new
         * column's values. Any valid expression may be used, including one
         * containing references to existing columns in the same table.
         */
        public static final String ADD_COLUMN_EXPRESSION = "add_column_expression";

        /**
         * Optional parameter for specifying the <a
         * href="../../../../../../rm/concepts/#tier-strategies"
         * target="_top">tier strategy</a> for the table and its columns when
         * {@code action} is {@code set_strategy_definition}, replacing the
         * existing tier strategy in its entirety.
         */
        public static final String STRATEGY_DEFINITION = "strategy_definition";

        /**
         * Type of index to create, when {@code action} is {@code
         * create_index},
         * or to delete, when {@code action} is {@code delete_index}.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#COLUMN COLUMN}: Create
         * or delete a <a
         * href="../../../../../../concepts/indexes/#column-index"
         * target="_top">column (attribute) index</a>.
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP CHUNK_SKIP}:
         * Create or delete a <a
         * href="../../../../../../concepts/indexes/#chunk-skip-index"
         * target="_top">chunk skip index</a>.
         *         <li> {@link
         * com.gpudb.protocol.AlterTableRequest.Options#GEOSPATIAL GEOSPATIAL}:
         * Create or delete a geospatial index
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AlterTableRequest.Options#COLUMN COLUMN}.
         */
        public static final String INDEX_TYPE = "index_type";

        /**
         * Create or delete a <a
         * href="../../../../../../concepts/indexes/#column-index"
         * target="_top">column (attribute) index</a>.
         */
        public static final String COLUMN = "column";

        /**
         * Create or delete a <a
         * href="../../../../../../concepts/indexes/#chunk-skip-index"
         * target="_top">chunk skip index</a>.
         */
        public static final String CHUNK_SKIP = "chunk_skip";

        /**
         * Create or delete a geospatial index
         */
        public static final String GEOSPATIAL = "geospatial";

        private Options() {  }
    }

    private String tableName;
    private String action;
    private String value;
    private Map<String, String> options;


    /**
     * Constructs an AlterTableRequest object with default parameters.
     */
    public AlterTableRequest() {
        tableName = "";
        action = "";
        value = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTableRequest object with the specified parameters.
     * 
     * @param tableName  Table on which the operation will be performed, in
     *                   [schema_name.]table_name format,
     *                   using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     *                   Must be an existing table or view.
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: No longer supported; action
     *                will be ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates a <a
     *                href="../../../../../../concepts/indexes/#column-index"
     *                target="_top">column (attribute) index</a>,
     *                <a
     *                href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                target="_top">chunk skip index</a>, or
     *                <a
     *                href="../../../../../../concepts/indexes/#geospatial-index"
     *                target="_top">geospatial index</a>
     *                (depending on the specified {@code index_type}), on the
     *                column name specified in {@code value}.
     *                If this column already has the specified index, an error
     *                will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes a <a
     *                href="../../../../../../concepts/indexes/#column-index"
     *                target="_top">column (attribute) index</a>,
     *                <a
     *                href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                target="_top">chunk skip index</a>, or
     *                <a
     *                href="../../../../../../concepts/indexes/#geospatial-index"
     *                target="_top">geospatial index</a>
     *                (depending on the specified {@code index_type}), on the
     *                column name specified in {@code value}.
     *                If this column does not have the specified index, an
     *                error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: [DEPRECATED--please use {@code
     *                move_to_schema} and use {@link
     *                com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to
     *                create the schema if non-existent]  Moves a table or view
     *                into a schema named {@code value}.  If the schema
     *                provided is non-existent, it will be automatically
     *                created.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_SCHEMA
     *                MOVE_TO_SCHEMA}: Moves a table or view into a schema
     *                named {@code value}.
     *                If the schema provided is nonexistent, an error will be
     *                thrown.
     *                If {@code value} is empty, then the table or view will be
     *                placed in the user's default schema.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: No longer used.  Previously set whether the
     *                given {@code tableName} should be protected or not. The
     *                {@code value} would have been either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table or view within its current
     *                schema to {@code value}. Has the same naming restrictions
     *                as <a href="../../../../../../concepts/tables/"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../../../concepts/ttl/"
     *                target="_top">time-to-live</a> in minutes of the table or
     *                view specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.
     *                Use {@code column_type} and {@code column_properties} in
     *                {@code options}
     *                to set the column's type and properties, respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.
     *                Use {@code column_type} and {@code column_properties} in
     *                {@code options} to set
     *                the column's type and properties, respectively. Note that
     *                primary key and/or shard key columns cannot be changed.
     *                All unchanging column properties must be listed for the
     *                change to take place, e.g., to add dictionary encoding to
     *                an existing 'char4' column, both 'char4' and 'dict' must
     *                be specified in the {@code options} map.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: No longer supported; action will
     *                be ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../../../concepts/tables/#foreign-key"
     *                target="_top">foreign key</a> specified in {@code value}
     *                using the format '(source_column_name [, ...]) references
     *                target_table_name(primary_key_column_name [, ...]) [as
     *                foreign_key_name]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../../../concepts/tables/#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the foreign_key_name specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_PARTITION
     *                ADD_PARTITION}: Adds the partition specified in {@code
     *                value}, to either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_PARTITION
     *                REMOVE_PARTITION}: Removes the partition specified in
     *                {@code value} (and relocates all of its data to the
     *                default partition) from either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_PARTITION
     *                DELETE_PARTITION}: Deletes the partition specified in
     *                {@code value} (and all of its data) from either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     *                REFRESH}: For a <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a>, replays all the
     *                table creation commands required to create the view.  For
     *                an <a href="../../../../../../concepts/external_tables/"
     *                target="_top">external table</a>, reloads all data in the
     *                table from its associated source files or <a
     *                href="../../../../../../concepts/data_sources/"
     *                target="_top">data source</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *                SET_REFRESH_METHOD}: For a <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a>, sets the method by
     *                which the view is refreshed to the method specified in
     *                {@code value} - one of 'manual', 'periodic', or
     *                'on_change'.  For an <a
     *                href="../../../../../../concepts/external_tables/"
     *                target="_top">external table</a>, sets the method by
     *                which the table is refreshed to the method specified in
     *                {@code value} - either 'manual' or 'on_start'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *                SET_REFRESH_START_TIME}: Sets the time to start periodic
     *                refreshes of this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the datetime
     *                string specified in {@code value} with format 'YYYY-MM-DD
     *                HH:MM:SS'.  Subsequent refreshes occur at the specified
     *                time + N * the refresh period.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_STOP_TIME
     *                SET_REFRESH_STOP_TIME}: Sets the time to stop periodic
     *                refreshes of this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the datetime
     *                string specified in {@code value} with format 'YYYY-MM-DD
     *                HH:MM:SS'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *                SET_REFRESH_PERIOD}: Sets the time interval in seconds at
     *                which to refresh this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the value
     *                specified in {@code value}.  Also, sets the refresh
     *                method to periodic if not already set.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_SPAN
     *                SET_REFRESH_SPAN}: Sets the future time-offset(in
     *                seconds) for the view refresh to stop.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_EXECUTE_AS
     *                SET_REFRESH_EXECUTE_AS}: Sets the user name to refresh
     *                this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the value
     *                specified in {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_TEXT_SEARCH_ATTRIBUTES
     *                REMOVE_TEXT_SEARCH_ATTRIBUTES}: Removes <a
     *                href="../../../../../../concepts/full_text_search/"
     *                target="_top">text search</a> attribute from all columns.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_SHARD_KEYS
     *                REMOVE_SHARD_KEYS}: Removes the shard key property from
     *                all columns, so that the table will be considered
     *                randomly sharded.  The data is not moved.  The {@code
     *                value} is ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_STRATEGY_DEFINITION
     *                SET_STRATEGY_DEFINITION}: Sets the <a
     *                href="../../../../../../rm/concepts/#tier-strategies"
     *                target="_top">tier strategy</a> for the table and its
     *                columns to the one specified in {@code value}, replacing
     *                the existing tier strategy in its entirety.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CANCEL_DATASOURCE_SUBSCRIPTION
     *                CANCEL_DATASOURCE_SUBSCRIPTION}: Permanently unsubscribe
     *                a data source that is loading continuously as a stream.
     *                The data source can be Kafka / S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PAUSE_DATASOURCE_SUBSCRIPTION
     *                PAUSE_DATASOURCE_SUBSCRIPTION}: Temporarily unsubscribe a
     *                data source that is loading continuously as a stream. The
     *                data source can be Kafka / S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RESUME_DATASOURCE_SUBSCRIPTION
     *                RESUME_DATASOURCE_SUBSCRIPTION}: Resubscribe to a paused
     *                data source subscription. The data source can be Kafka /
     *                S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_OWNER
     *                CHANGE_OWNER}: Change the owner resource group of the
     *                table.
     *                </ul>
     * @param value  The value of the modification, depending on {@code
     *               action}.
     *               For example, if {@code action} is {@code add_column}, this
     *               would be the column name;
     *               while the column's definition would be covered by the
     *               {@code column_type},
     *               {@code column_properties}, {@code column_default_value},
     *               and {@code add_column_expression} in {@code options}.
     *               If {@code action} is {@code ttl}, it would be the number
     *               of minutes for the new TTL.
     *               If {@code action} is {@code refresh}, this field would be
     *               blank.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ACTION
     *                 ACTION}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_NAME
     *                 COLUMN_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TABLE_NAME
     *                 TABLE_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.  For nullable
     *                 columns, the default value will be null, regardless of
     *                 data type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: No longer supported; option will be
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: [DEPRECATED--please use {@code
     *                 add_column_expression} instead.]
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it (or not).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 Validate all values. A value too large (or too long) for
     *                 the new type will prevent any change.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: When a value is too large or long, it will be
     *                 truncated.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#UPDATE_LAST_ACCESS_TIME
     *                 UPDATE_LAST_ACCESS_TIME}: Indicates whether the <a
     *                 href="../../../../../../concepts/ttl/"
     *                 target="_top">time-to-live</a> (TTL) expiration
     *                 countdown timer should be reset to the table's TTL.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 Reset the expiration countdown timer to the table's
     *                 configured TTL.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: Don't reset the timer; expiration countdown will
     *                 continue from where it is, as if the table had not been
     *                 accessed.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *                 ADD_COLUMN_EXPRESSION}: When adding a column, an
     *                 optional expression to use for the new column's values.
     *                 Any valid expression may be used, including one
     *                 containing references to existing columns in the same
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#STRATEGY_DEFINITION
     *                 STRATEGY_DEFINITION}: Optional parameter for specifying
     *                 the <a
     *                 href="../../../../../../rm/concepts/#tier-strategies"
     *                 target="_top">tier strategy</a> for the table and its
     *                 columns when {@code action} is {@code
     *                 set_strategy_definition}, replacing the existing tier
     *                 strategy in its entirety.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#INDEX_TYPE
     *                 INDEX_TYPE}: Type of index to create, when {@code
     *                 action} is {@code create_index},
     *                 or to delete, when {@code action} is {@code
     *                 delete_index}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}: Create or delete a <a
     *                 href="../../../../../../concepts/indexes/#column-index"
     *                 target="_top">column (attribute) index</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP
     *                 CHUNK_SKIP}: Create or delete a <a
     *                 href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                 target="_top">chunk skip index</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#GEOSPATIAL
     *                 GEOSPATIAL}: Create or delete a geospatial index
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public AlterTableRequest(String tableName, String action, String value, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.action = (action == null) ? "" : action;
        this.value = (value == null) ? "" : value;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Table on which the operation will be performed, in
     *         [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a>.
     *         Must be an existing table or view.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Table on which the operation will be performed, in
     *                   [schema_name.]table_name format,
     *                   using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     *                   Must be an existing table or view.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Modification operation to be applied
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *         ALLOW_HOMOGENEOUS_TABLES}: No longer supported; action will be
     *         ignored.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *         CREATE_INDEX}: Creates a <a
     *         href="../../../../../../concepts/indexes/#column-index"
     *         target="_top">column (attribute) index</a>,
     *         <a href="../../../../../../concepts/indexes/#chunk-skip-index"
     *         target="_top">chunk skip index</a>, or
     *         <a href="../../../../../../concepts/indexes/#geospatial-index"
     *         target="_top">geospatial index</a>
     *         (depending on the specified {@code index_type}), on the column
     *         name specified in {@code value}.
     *         If this column already has the specified index, an error will be
     *         returned.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *         DELETE_INDEX}: Deletes a <a
     *         href="../../../../../../concepts/indexes/#column-index"
     *         target="_top">column (attribute) index</a>,
     *         <a href="../../../../../../concepts/indexes/#chunk-skip-index"
     *         target="_top">chunk skip index</a>, or
     *         <a href="../../../../../../concepts/indexes/#geospatial-index"
     *         target="_top">geospatial index</a>
     *         (depending on the specified {@code index_type}), on the column
     *         name specified in {@code value}.
     *         If this column does not have the specified index, an error will
     *         be returned.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *         MOVE_TO_COLLECTION}: [DEPRECATED--please use {@code
     *         move_to_schema} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to create the
     *         schema if non-existent]  Moves a table or view into a schema
     *         named {@code value}.  If the schema provided is non-existent, it
     *         will be automatically created.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_SCHEMA
     *         MOVE_TO_SCHEMA}: Moves a table or view into a schema named
     *         {@code value}.
     *         If the schema provided is nonexistent, an error will be thrown.
     *         If {@code value} is empty, then the table or view will be placed
     *         in the user's default schema.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *         PROTECTED}: No longer used.  Previously set whether the given
     *         {@code tableName} should be protected or not. The {@code value}
     *         would have been either 'true' or 'false'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *         RENAME_TABLE}: Renames a table or view within its current schema
     *         to {@code value}. Has the same naming restrictions as <a
     *         href="../../../../../../concepts/tables/"
     *         target="_top">tables</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}: Sets the
     *         <a href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a> in minutes of the table or view
     *         specified in {@code tableName}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *         ADD_COLUMN}: Adds the column specified in {@code value} to the
     *         table specified in {@code tableName}.
     *         Use {@code column_type} and {@code column_properties} in {@code
     *         options}
     *         to set the column's type and properties, respectively.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *         CHANGE_COLUMN}: Changes type and properties of the column
     *         specified in {@code value}.
     *         Use {@code column_type} and {@code column_properties} in {@code
     *         options} to set
     *         the column's type and properties, respectively. Note that
     *         primary key and/or shard key columns cannot be changed.
     *         All unchanging column properties must be listed for the change
     *         to take place, e.g., to add dictionary encoding to
     *         an existing 'char4' column, both 'char4' and 'dict' must be
     *         specified in the {@code options} map.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *         SET_COLUMN_COMPRESSION}: No longer supported; action will be
     *         ignored.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *         DELETE_COLUMN}: Deletes the column specified in {@code value}
     *         from the table specified in {@code tableName}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *         CREATE_FOREIGN_KEY}: Creates a <a
     *         href="../../../../../../concepts/tables/#foreign-key"
     *         target="_top">foreign key</a> specified in {@code value} using
     *         the format '(source_column_name [, ...]) references
     *         target_table_name(primary_key_column_name [, ...]) [as
     *         foreign_key_name]'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *         DELETE_FOREIGN_KEY}: Deletes a <a
     *         href="../../../../../../concepts/tables/#foreign-key"
     *         target="_top">foreign key</a>.  The {@code value} should be the
     *         foreign_key_name specified when creating the key or the complete
     *         string used to define it.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#ADD_PARTITION
     *         ADD_PARTITION}: Adds the partition specified in {@code value},
     *         to either a <a
     *         href="../../../../../../concepts/tables/#partitioning-by-range"
     *         target="_top">range-partitioned</a> or <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *         target="_top">manual list-partitioned</a> table.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#REMOVE_PARTITION
     *         REMOVE_PARTITION}: Removes the partition specified in {@code
     *         value} (and relocates all of its data to the default partition)
     *         from either a <a
     *         href="../../../../../../concepts/tables/#partitioning-by-range"
     *         target="_top">range-partitioned</a> or <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *         target="_top">manual list-partitioned</a> table.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#DELETE_PARTITION
     *         DELETE_PARTITION}: Deletes the partition specified in {@code
     *         value} (and all of its data) from either a <a
     *         href="../../../../../../concepts/tables/#partitioning-by-range"
     *         target="_top">range-partitioned</a> or <a
     *         href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *         target="_top">manual list-partitioned</a> table.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *         SET_GLOBAL_ACCESS_MODE}: Sets the global access mode (i.e.
     *         locking) for the table specified in {@code tableName}. Specify
     *         the access mode in {@code value}. Valid modes are 'no_access',
     *         'read_only', 'write_only' and 'read_write'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#REFRESH REFRESH}:
     *         For a <a href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a>, replays all the table
     *         creation commands required to create the view.  For an <a
     *         href="../../../../../../concepts/external_tables/"
     *         target="_top">external table</a>, reloads all data in the table
     *         from its associated source files or <a
     *         href="../../../../../../concepts/data_sources/"
     *         target="_top">data source</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *         SET_REFRESH_METHOD}: For a <a
     *         href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a>, sets the method by which
     *         the view is refreshed to the method specified in {@code value} -
     *         one of 'manual', 'periodic', or 'on_change'.  For an <a
     *         href="../../../../../../concepts/external_tables/"
     *         target="_top">external table</a>, sets the method by which the
     *         table is refreshed to the method specified in {@code value} -
     *         either 'manual' or 'on_start'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *         SET_REFRESH_START_TIME}: Sets the time to start periodic
     *         refreshes of this <a
     *         href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a> to the datetime string
     *         specified in {@code value} with format 'YYYY-MM-DD HH:MM:SS'.
     *         Subsequent refreshes occur at the specified time + N * the
     *         refresh period.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_STOP_TIME
     *         SET_REFRESH_STOP_TIME}: Sets the time to stop periodic refreshes
     *         of this <a href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a> to the datetime string
     *         specified in {@code value} with format 'YYYY-MM-DD HH:MM:SS'.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *         SET_REFRESH_PERIOD}: Sets the time interval in seconds at which
     *         to refresh this <a
     *         href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a> to the value specified in
     *         {@code value}.  Also, sets the refresh method to periodic if not
     *         already set.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_SPAN
     *         SET_REFRESH_SPAN}: Sets the future time-offset(in seconds) for
     *         the view refresh to stop.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_EXECUTE_AS
     *         SET_REFRESH_EXECUTE_AS}: Sets the user name to refresh this <a
     *         href="../../../../../../concepts/materialized_views/"
     *         target="_top">materialized view</a> to the value specified in
     *         {@code value}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#REMOVE_TEXT_SEARCH_ATTRIBUTES
     *         REMOVE_TEXT_SEARCH_ATTRIBUTES}: Removes <a
     *         href="../../../../../../concepts/full_text_search/"
     *         target="_top">text search</a> attribute from all columns.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#REMOVE_SHARD_KEYS
     *         REMOVE_SHARD_KEYS}: Removes the shard key property from all
     *         columns, so that the table will be considered randomly sharded.
     *         The data is not moved.  The {@code value} is ignored.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#SET_STRATEGY_DEFINITION
     *         SET_STRATEGY_DEFINITION}: Sets the <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns to
     *         the one specified in {@code value}, replacing the existing tier
     *         strategy in its entirety.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CANCEL_DATASOURCE_SUBSCRIPTION
     *         CANCEL_DATASOURCE_SUBSCRIPTION}: Permanently unsubscribe a data
     *         source that is loading continuously as a stream. The data source
     *         can be Kafka / S3 / Azure.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#PAUSE_DATASOURCE_SUBSCRIPTION
     *         PAUSE_DATASOURCE_SUBSCRIPTION}: Temporarily unsubscribe a data
     *         source that is loading continuously as a stream. The data source
     *         can be Kafka / S3 / Azure.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#RESUME_DATASOURCE_SUBSCRIPTION
     *         RESUME_DATASOURCE_SUBSCRIPTION}: Resubscribe to a paused data
     *         source subscription. The data source can be Kafka / S3 / Azure.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Action#CHANGE_OWNER
     *         CHANGE_OWNER}: Change the owner resource group of the table.
     *         </ul>
     * 
     */
    public String getAction() {
        return action;
    }

    /**
     * 
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: No longer supported; action
     *                will be ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates a <a
     *                href="../../../../../../concepts/indexes/#column-index"
     *                target="_top">column (attribute) index</a>,
     *                <a
     *                href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                target="_top">chunk skip index</a>, or
     *                <a
     *                href="../../../../../../concepts/indexes/#geospatial-index"
     *                target="_top">geospatial index</a>
     *                (depending on the specified {@code index_type}), on the
     *                column name specified in {@code value}.
     *                If this column already has the specified index, an error
     *                will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes a <a
     *                href="../../../../../../concepts/indexes/#column-index"
     *                target="_top">column (attribute) index</a>,
     *                <a
     *                href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                target="_top">chunk skip index</a>, or
     *                <a
     *                href="../../../../../../concepts/indexes/#geospatial-index"
     *                target="_top">geospatial index</a>
     *                (depending on the specified {@code index_type}), on the
     *                column name specified in {@code value}.
     *                If this column does not have the specified index, an
     *                error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: [DEPRECATED--please use {@code
     *                move_to_schema} and use {@link
     *                com.gpudb.GPUdb#createSchema(CreateSchemaRequest)} to
     *                create the schema if non-existent]  Moves a table or view
     *                into a schema named {@code value}.  If the schema
     *                provided is non-existent, it will be automatically
     *                created.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_SCHEMA
     *                MOVE_TO_SCHEMA}: Moves a table or view into a schema
     *                named {@code value}.
     *                If the schema provided is nonexistent, an error will be
     *                thrown.
     *                If {@code value} is empty, then the table or view will be
     *                placed in the user's default schema.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: No longer used.  Previously set whether the
     *                given {@code tableName} should be protected or not. The
     *                {@code value} would have been either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table or view within its current
     *                schema to {@code value}. Has the same naming restrictions
     *                as <a href="../../../../../../concepts/tables/"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../../../concepts/ttl/"
     *                target="_top">time-to-live</a> in minutes of the table or
     *                view specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.
     *                Use {@code column_type} and {@code column_properties} in
     *                {@code options}
     *                to set the column's type and properties, respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.
     *                Use {@code column_type} and {@code column_properties} in
     *                {@code options} to set
     *                the column's type and properties, respectively. Note that
     *                primary key and/or shard key columns cannot be changed.
     *                All unchanging column properties must be listed for the
     *                change to take place, e.g., to add dictionary encoding to
     *                an existing 'char4' column, both 'char4' and 'dict' must
     *                be specified in the {@code options} map.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: No longer supported; action will
     *                be ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../../../concepts/tables/#foreign-key"
     *                target="_top">foreign key</a> specified in {@code value}
     *                using the format '(source_column_name [, ...]) references
     *                target_table_name(primary_key_column_name [, ...]) [as
     *                foreign_key_name]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../../../concepts/tables/#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the foreign_key_name specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_PARTITION
     *                ADD_PARTITION}: Adds the partition specified in {@code
     *                value}, to either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_PARTITION
     *                REMOVE_PARTITION}: Removes the partition specified in
     *                {@code value} (and relocates all of its data to the
     *                default partition) from either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_PARTITION
     *                DELETE_PARTITION}: Deletes the partition specified in
     *                {@code value} (and all of its data) from either a <a
     *                href="../../../../../../concepts/tables/#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../../../concepts/tables/#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     *                REFRESH}: For a <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a>, replays all the
     *                table creation commands required to create the view.  For
     *                an <a href="../../../../../../concepts/external_tables/"
     *                target="_top">external table</a>, reloads all data in the
     *                table from its associated source files or <a
     *                href="../../../../../../concepts/data_sources/"
     *                target="_top">data source</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *                SET_REFRESH_METHOD}: For a <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a>, sets the method by
     *                which the view is refreshed to the method specified in
     *                {@code value} - one of 'manual', 'periodic', or
     *                'on_change'.  For an <a
     *                href="../../../../../../concepts/external_tables/"
     *                target="_top">external table</a>, sets the method by
     *                which the table is refreshed to the method specified in
     *                {@code value} - either 'manual' or 'on_start'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *                SET_REFRESH_START_TIME}: Sets the time to start periodic
     *                refreshes of this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the datetime
     *                string specified in {@code value} with format 'YYYY-MM-DD
     *                HH:MM:SS'.  Subsequent refreshes occur at the specified
     *                time + N * the refresh period.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_STOP_TIME
     *                SET_REFRESH_STOP_TIME}: Sets the time to stop periodic
     *                refreshes of this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the datetime
     *                string specified in {@code value} with format 'YYYY-MM-DD
     *                HH:MM:SS'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *                SET_REFRESH_PERIOD}: Sets the time interval in seconds at
     *                which to refresh this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the value
     *                specified in {@code value}.  Also, sets the refresh
     *                method to periodic if not already set.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_SPAN
     *                SET_REFRESH_SPAN}: Sets the future time-offset(in
     *                seconds) for the view refresh to stop.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_EXECUTE_AS
     *                SET_REFRESH_EXECUTE_AS}: Sets the user name to refresh
     *                this <a
     *                href="../../../../../../concepts/materialized_views/"
     *                target="_top">materialized view</a> to the value
     *                specified in {@code value}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_TEXT_SEARCH_ATTRIBUTES
     *                REMOVE_TEXT_SEARCH_ATTRIBUTES}: Removes <a
     *                href="../../../../../../concepts/full_text_search/"
     *                target="_top">text search</a> attribute from all columns.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_SHARD_KEYS
     *                REMOVE_SHARD_KEYS}: Removes the shard key property from
     *                all columns, so that the table will be considered
     *                randomly sharded.  The data is not moved.  The {@code
     *                value} is ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_STRATEGY_DEFINITION
     *                SET_STRATEGY_DEFINITION}: Sets the <a
     *                href="../../../../../../rm/concepts/#tier-strategies"
     *                target="_top">tier strategy</a> for the table and its
     *                columns to the one specified in {@code value}, replacing
     *                the existing tier strategy in its entirety.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CANCEL_DATASOURCE_SUBSCRIPTION
     *                CANCEL_DATASOURCE_SUBSCRIPTION}: Permanently unsubscribe
     *                a data source that is loading continuously as a stream.
     *                The data source can be Kafka / S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PAUSE_DATASOURCE_SUBSCRIPTION
     *                PAUSE_DATASOURCE_SUBSCRIPTION}: Temporarily unsubscribe a
     *                data source that is loading continuously as a stream. The
     *                data source can be Kafka / S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RESUME_DATASOURCE_SUBSCRIPTION
     *                RESUME_DATASOURCE_SUBSCRIPTION}: Resubscribe to a paused
     *                data source subscription. The data source can be Kafka /
     *                S3 / Azure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_OWNER
     *                CHANGE_OWNER}: Change the owner resource group of the
     *                table.
     *                </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * 
     * @return The value of the modification, depending on {@code action}.
     *         For example, if {@code action} is {@code add_column}, this would
     *         be the column name;
     *         while the column's definition would be covered by the {@code
     *         column_type},
     *         {@code column_properties}, {@code column_default_value},
     *         and {@code add_column_expression} in {@code options}.
     *         If {@code action} is {@code ttl}, it would be the number of
     *         minutes for the new TTL.
     *         If {@code action} is {@code refresh}, this field would be blank.
     * 
     */
    public String getValue() {
        return value;
    }

    /**
     * 
     * @param value  The value of the modification, depending on {@code
     *               action}.
     *               For example, if {@code action} is {@code add_column}, this
     *               would be the column name;
     *               while the column's definition would be covered by the
     *               {@code column_type},
     *               {@code column_properties}, {@code column_default_value},
     *               and {@code add_column_expression} in {@code options}.
     *               If {@code action} is {@code ttl}, it would be the number
     *               of minutes for the new TTL.
     *               If {@code action} is {@code refresh}, this field would be
     *               blank.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#ACTION ACTION}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_NAME
     *         COLUMN_NAME}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TABLE_NAME
     *         TABLE_NAME}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *         COLUMN_DEFAULT_VALUE}: When adding a column, set a default value
     *         for existing records.  For nullable columns, the default value
     *         will be null, regardless of data type.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *         COLUMN_PROPERTIES}: When adding or changing a column, set the
     *         column properties (strings, separated by a comma: data,
     *         store_only, text_search, char8, int8 etc).
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *         COLUMN_TYPE}: When adding or changing a column, set the column
     *         type (strings, separated by a comma: int, double, string, null
     *         etc).
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *         COMPRESSION_TYPE}: No longer supported; option will be ignored.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#LZ4HC LZ4HC}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#SNAPPY SNAPPY}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *         COPY_VALUES_FROM_COLUMN}: [DEPRECATED--please use {@code
     *         add_column_expression} instead.]
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *         RENAME_COLUMN}: When changing a column, specify new column name.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *         VALIDATE_CHANGE_COLUMN}: When changing a column, validate the
     *         change before applying it (or not).
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *         Validate all values. A value too large (or too long) for the new
     *         type will prevent any change.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: When
     *         a value is too large or long, it will be truncated.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#UPDATE_LAST_ACCESS_TIME
     *         UPDATE_LAST_ACCESS_TIME}: Indicates whether the <a
     *         href="../../../../../../concepts/ttl/"
     *         target="_top">time-to-live</a> (TTL) expiration countdown timer
     *         should be reset to the table's TTL.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}: Reset
     *         the expiration countdown timer to the table's configured TTL.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#FALSE FALSE}: Don't
     *         reset the timer; expiration countdown will continue from where
     *         it is, as if the table had not been accessed.
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *         ADD_COLUMN_EXPRESSION}: When adding a column, an optional
     *         expression to use for the new column's values. Any valid
     *         expression may be used, including one containing references to
     *         existing columns in the same table.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#STRATEGY_DEFINITION
     *         STRATEGY_DEFINITION}: Optional parameter for specifying the <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns
     *         when {@code action} is {@code set_strategy_definition},
     *         replacing the existing tier strategy in its entirety.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#INDEX_TYPE
     *         INDEX_TYPE}: Type of index to create, when {@code action} is
     *         {@code create_index},
     *         or to delete, when {@code action} is {@code delete_index}.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN COLUMN}:
     *         Create or delete a <a
     *         href="../../../../../../concepts/indexes/#column-index"
     *         target="_top">column (attribute) index</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP
     *         CHUNK_SKIP}: Create or delete a <a
     *         href="../../../../../../concepts/indexes/#chunk-skip-index"
     *         target="_top">chunk skip index</a>.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#GEOSPATIAL
     *         GEOSPATIAL}: Create or delete a geospatial index
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AlterTableRequest.Options#COLUMN COLUMN}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ACTION
     *                 ACTION}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_NAME
     *                 COLUMN_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TABLE_NAME
     *                 TABLE_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.  For nullable
     *                 columns, the default value will be null, regardless of
     *                 data type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: No longer supported; option will be
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: [DEPRECATED--please use {@code
     *                 add_column_expression} instead.]
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it (or not).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 Validate all values. A value too large (or too long) for
     *                 the new type will prevent any change.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: When a value is too large or long, it will be
     *                 truncated.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#UPDATE_LAST_ACCESS_TIME
     *                 UPDATE_LAST_ACCESS_TIME}: Indicates whether the <a
     *                 href="../../../../../../concepts/ttl/"
     *                 target="_top">time-to-live</a> (TTL) expiration
     *                 countdown timer should be reset to the table's TTL.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 Reset the expiration countdown timer to the table's
     *                 configured TTL.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: Don't reset the timer; expiration countdown will
     *                 continue from where it is, as if the table had not been
     *                 accessed.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *                 ADD_COLUMN_EXPRESSION}: When adding a column, an
     *                 optional expression to use for the new column's values.
     *                 Any valid expression may be used, including one
     *                 containing references to existing columns in the same
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#STRATEGY_DEFINITION
     *                 STRATEGY_DEFINITION}: Optional parameter for specifying
     *                 the <a
     *                 href="../../../../../../rm/concepts/#tier-strategies"
     *                 target="_top">tier strategy</a> for the table and its
     *                 columns when {@code action} is {@code
     *                 set_strategy_definition}, replacing the existing tier
     *                 strategy in its entirety.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#INDEX_TYPE
     *                 INDEX_TYPE}: Type of index to create, when {@code
     *                 action} is {@code create_index},
     *                 or to delete, when {@code action} is {@code
     *                 delete_index}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}: Create or delete a <a
     *                 href="../../../../../../concepts/indexes/#column-index"
     *                 target="_top">column (attribute) index</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP
     *                 CHUNK_SKIP}: Create or delete a <a
     *                 href="../../../../../../concepts/indexes/#chunk-skip-index"
     *                 target="_top">chunk skip index</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#GEOSPATIAL
     *                 GEOSPATIAL}: Create or delete a geospatial index
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableRequest that = (AlterTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
