/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createUnion(CreateUnionRequest) GPUdb.createUnion}.
 * <p>
 * Merges data from one or more tables with comparable data types into a new
 * table.
 * <p>
 * The following merges are supported:
 * <p>
 * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
 * href="../../../../../../concepts/unions/" target="_top">Union</a>.  For
 * limitations, see <a
 * href="../../../../../../concepts/unions/#limitations-and-cautions"
 * target="_top">Union Limitations and Cautions</a>.
 * <p>
 * INTERSECT (DISTINCT/ALL) - For data set intersection details and examples,
 * see <a href="../../../../../../concepts/intersect/"
 * target="_top">Intersect</a>.  For limitations, see <a
 * href="../../../../../../concepts/intersect/#limitations"
 * target="_top">Intersect Limitations</a>.
 * <p>
 * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples, see
 * <a href="../../../../../../concepts/except/" target="_top">Except</a>.  For
 * limitations, see <a href="../../../../../../concepts/except/#limitations"
 * target="_top">Except Limitations</a>.
 * <p>
 * MERGE VIEWS - For a given set of <a
 * href="../../../../../../concepts/filtered_views/" target="_top">filtered
 * views</a> on a single table, creates a single filtered view containing all
 * of the unique records across all of the given filtered data sets.
 * <p>
 * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
 * columns marked as <a href="../../../../../../concepts/types/#data-handling"
 * target="_top">store-only</a>.
 */
public class CreateUnionRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateUnionRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("inputColumnNames").type().array().items().array().items().stringType().noDefault()
                .name("outputColumnNames").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateUnionRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * #getTableName() tableName}. If {@link Options#PERSIST PERSIST} is
         * {@link Options#FALSE FALSE} (or unspecified), then this is always
         * allowed even if the caller does not have permission to create
         * tables. The generated name is returned in {@link
         * com.gpudb.protocol.CreateUnionResponse.Info#QUALIFIED_TABLE_NAME
         * QUALIFIED_TABLE_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * [DEPRECATED--please specify the containing schema for the projection
         * as part of {@link #getTableName() tableName} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of
         * the schema for the output table. If the schema provided is
         * non-existent, it will be automatically created. The default value is
         * ''.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * The mode describes what rows of the tables being unioned will be
         * retained.
         * Supported values:
         * <ul>
         *     <li>{@link Options#UNION_ALL UNION_ALL}: Retains all rows from
         *         the specified tables.
         *     <li>{@link Options#UNION UNION}: Retains all unique rows from
         *         the specified tables (synonym for {@link
         *         Options#UNION_DISTINCT UNION_DISTINCT}).
         *     <li>{@link Options#UNION_DISTINCT UNION_DISTINCT}: Retains all
         *         unique rows from the specified tables.
         *     <li>{@link Options#EXCEPT EXCEPT}: Retains all unique rows from
         *         the first table that do not appear in the second table (only
         *         works on 2 tables).
         *     <li>{@link Options#EXCEPT_ALL EXCEPT_ALL}: Retains all
         *         rows(including duplicates) from the first table that do not
         *         appear in the second table (only works on 2 tables).
         *     <li>{@link Options#INTERSECT INTERSECT}: Retains all unique rows
         *         that appear in both of the specified tables (only works on 2
         *         tables).
         *     <li>{@link Options#INTERSECT_ALL INTERSECT_ALL}: Retains all
         *         rows(including duplicates) that appear in both of the
         *         specified tables (only works on 2 tables).
         * </ul>
         * The default value is {@link Options#UNION_ALL UNION_ALL}.
         */
        public static final String MODE = "mode";

        /**
         * Retains all rows from the specified tables.
         */
        public static final String UNION_ALL = "union_all";

        /**
         * Retains all unique rows from the specified tables (synonym for
         * {@link Options#UNION_DISTINCT UNION_DISTINCT}).
         */
        public static final String UNION = "union";

        /**
         * Retains all unique rows from the specified tables.
         */
        public static final String UNION_DISTINCT = "union_distinct";

        /**
         * Retains all unique rows from the first table that do not appear in
         * the second table (only works on 2 tables).
         */
        public static final String EXCEPT = "except";

        /**
         * Retains all rows(including duplicates) from the first table that do
         * not appear in the second table (only works on 2 tables).
         */
        public static final String EXCEPT_ALL = "except_all";

        /**
         * Retains all unique rows that appear in both of the specified tables
         * (only works on 2 tables).
         */
        public static final String INTERSECT = "intersect";

        /**
         * Retains all rows(including duplicates) that appear in both of the
         * specified tables (only works on 2 tables).
         */
        public static final String INTERSECT_ALL = "intersect_all";

        /**
         * When true use 128 bit hash for union-distinct, except, except_all,
         * intersect and intersect_all modes. Otherwise use 64 bit hash.
         */
        public static final String LONG_HASH = "long_hash";

        /**
         * Indicates the number of records per chunk to be used for this output
         * table.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Indicates the target maximum data size for each column in a chunk to
         * be used for this output table.
         */
        public static final String CHUNK_COLUMN_MAX_MEMORY = "chunk_column_max_memory";

        /**
         * Indicates the target maximum data size for all columns in a chunk to
         * be used for this output table.
         */
        public static final String CHUNK_MAX_MEMORY = "chunk_max_memory";

        /**
         * Comma-separated list of columns on which to create indexes on the
         * output table.  The columns specified must be present in {@link
         * #getOutputColumnNames() outputColumnNames}.
         */
        public static final String CREATE_INDEXES = "create_indexes";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the output table specified in {@link
         * #getTableName() tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * If {@link Options#TRUE TRUE}, then the output table specified in
         * {@link #getTableName() tableName} will be persisted and will not
         * expire unless a {@link Options#TTL TTL} is specified.   If {@link
         * Options#FALSE FALSE}, then the output table will be an in-memory
         * table and will expire unless a {@link Options#TTL TTL} is specified
         * otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String PERSIST = "persist";

        /**
         * ID of view of which this output table is a member. The default value
         * is ''.
         */
        public static final String VIEW_ID = "view_id";

        /**
         * If {@link Options#TRUE TRUE}, then the output table specified in
         * {@link #getTableName() tableName} will be replicated even if the
         * source tables are not.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String FORCE_REPLICATED = "force_replicated";

        /**
         * The <a href="../../../../../../rm/concepts/#tier-strategies"
         * target="_top">tier strategy</a> for the table and its columns.
         */
        public static final String STRATEGY_DEFINITION = "strategy_definition";

        /**
         * The default <a href="../../../../../../concepts/column_compression/"
         * target="_top">compression codec</a> for this table's columns.
         */
        public static final String COMPRESSION_CODEC = "compression_codec";

        /**
         * Return a count of 0 for the union table response to avoid the cost
         * of counting; optimization needed for many chunk virtual_union's. The
         * default value is 'false'.
         */
        public static final String NO_COUNT = "no_count";

        private Options() {  }
    }

    private String tableName;
    private List<String> tableNames;
    private List<List<String>> inputColumnNames;
    private List<String> outputColumnNames;
    private Map<String, String> options;

    /**
     * Constructs a CreateUnionRequest object with default parameters.
     */
    public CreateUnionRequest() {
        tableName = "";
        tableNames = new ArrayList<>();
        inputColumnNames = new ArrayList<>();
        outputColumnNames = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateUnionRequest object with the specified parameters.
     *
     * @param tableName  Name of the table to be created, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a> and meeting <a
     *                   href="../../../../../../concepts/tables/#table-naming-criteria"
     *                   target="_top">table naming criteria</a>.
     * @param tableNames  The list of table names to merge, in
     *                    [schema_name.]table_name format, using standard <a
     *                    href="../../../../../../concepts/tables/#table-name-resolution"
     *                    target="_top">name resolution rules</a>.  Must
     *                    contain the names of one or more existing tables.
     * @param inputColumnNames  The list of columns from each of the
     *                          corresponding input tables.
     * @param outputColumnNames  The list of names of the columns to be stored
     *                           in the output table.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@code tableName}. If {@link
     *                         Options#PERSIST PERSIST} is {@link Options#FALSE
     *                         FALSE} (or unspecified), then this is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.CreateUnionResponse.Info#QUALIFIED_TABLE_NAME
     *                         QUALIFIED_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema for the projection as part of {@code
     *                         tableName} and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of the schema for the output
     *                         table. If the schema provided is non-existent,
     *                         it will be automatically created. The default
     *                         value is ''.
     *                     <li>{@link Options#MODE MODE}: The mode describes
     *                         what rows of the tables being unioned will be
     *                         retained.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#UNION_ALL UNION_ALL}:
     *                                 Retains all rows from the specified
     *                                 tables.
     *                             <li>{@link Options#UNION UNION}: Retains all
     *                                 unique rows from the specified tables
     *                                 (synonym for {@link
     *                                 Options#UNION_DISTINCT UNION_DISTINCT}).
     *                             <li>{@link Options#UNION_DISTINCT
     *                                 UNION_DISTINCT}: Retains all unique rows
     *                                 from the specified tables.
     *                             <li>{@link Options#EXCEPT EXCEPT}: Retains
     *                                 all unique rows from the first table
     *                                 that do not appear in the second table
     *                                 (only works on 2 tables).
     *                             <li>{@link Options#EXCEPT_ALL EXCEPT_ALL}:
     *                                 Retains all rows(including duplicates)
     *                                 from the first table that do not appear
     *                                 in the second table (only works on 2
     *                                 tables).
     *                             <li>{@link Options#INTERSECT INTERSECT}:
     *                                 Retains all unique rows that appear in
     *                                 both of the specified tables (only works
     *                                 on 2 tables).
     *                             <li>{@link Options#INTERSECT_ALL
     *                                 INTERSECT_ALL}: Retains all
     *                                 rows(including duplicates) that appear
     *                                 in both of the specified tables (only
     *                                 works on 2 tables).
     *                         </ul>
     *                         The default value is {@link Options#UNION_ALL
     *                         UNION_ALL}.
     *                     <li>{@link Options#LONG_HASH LONG_HASH}: When true
     *                         use 128 bit hash for union-distinct, except,
     *                         except_all, intersect and intersect_all modes.
     *                         Otherwise use 64 bit hash.
     *                     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates
     *                         the number of records per chunk to be used for
     *                         this output table.
     *                     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY
     *                         CHUNK_COLUMN_MAX_MEMORY}: Indicates the target
     *                         maximum data size for each column in a chunk to
     *                         be used for this output table.
     *                     <li>{@link Options#CHUNK_MAX_MEMORY
     *                         CHUNK_MAX_MEMORY}: Indicates the target maximum
     *                         data size for all columns in a chunk to be used
     *                         for this output table.
     *                     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}:
     *                         Comma-separated list of columns on which to
     *                         create indexes on the output table.  The columns
     *                         specified must be present in {@code
     *                         outputColumnNames}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the output table
     *                         specified in {@code tableName}.
     *                     <li>{@link Options#PERSIST PERSIST}: If {@link
     *                         Options#TRUE TRUE}, then the output table
     *                         specified in {@code tableName} will be persisted
     *                         and will not expire unless a {@link Options#TTL
     *                         TTL} is specified.   If {@link Options#FALSE
     *                         FALSE}, then the output table will be an
     *                         in-memory table and will expire unless a {@link
     *                         Options#TTL TTL} is specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#VIEW_ID VIEW_ID}: ID of view of
     *                         which this output table is a member. The default
     *                         value is ''.
     *                     <li>{@link Options#FORCE_REPLICATED
     *                         FORCE_REPLICATED}: If {@link Options#TRUE TRUE},
     *                         then the output table specified in {@code
     *                         tableName} will be replicated even if the source
     *                         tables are not.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#STRATEGY_DEFINITION
     *                         STRATEGY_DEFINITION}: The <a
     *                         href="../../../../../../rm/concepts/#tier-strategies"
     *                         target="_top">tier strategy</a> for the table
     *                         and its columns.
     *                     <li>{@link Options#COMPRESSION_CODEC
     *                         COMPRESSION_CODEC}: The default <a
     *                         href="../../../../../../concepts/column_compression/"
     *                         target="_top">compression codec</a> for this
     *                         table's columns.
     *                     <li>{@link Options#NO_COUNT NO_COUNT}: Return a
     *                         count of 0 for the union table response to avoid
     *                         the cost of counting; optimization needed for
     *                         many chunk virtual_union's. The default value is
     *                         'false'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateUnionRequest(String tableName, List<String> tableNames, List<List<String>> inputColumnNames, List<String> outputColumnNames, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.inputColumnNames = (inputColumnNames == null) ? new ArrayList<List<String>>() : inputColumnNames;
        this.outputColumnNames = (outputColumnNames == null) ? new ArrayList<String>() : outputColumnNames;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table to be created, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table to be created, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUnionRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * The list of table names to merge, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must contain the names of one
     * or more existing tables.
     *
     * @return The current value of {@code tableNames}.
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * The list of table names to merge, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must contain the names of one
     * or more existing tables.
     *
     * @param tableNames  The new value for {@code tableNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUnionRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * The list of columns from each of the corresponding input tables.
     *
     * @return The current value of {@code inputColumnNames}.
     */
    public List<List<String>> getInputColumnNames() {
        return inputColumnNames;
    }

    /**
     * The list of columns from each of the corresponding input tables.
     *
     * @param inputColumnNames  The new value for {@code inputColumnNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUnionRequest setInputColumnNames(List<List<String>> inputColumnNames) {
        this.inputColumnNames = (inputColumnNames == null) ? new ArrayList<List<String>>() : inputColumnNames;
        return this;
    }

    /**
     * The list of names of the columns to be stored in the output table.
     *
     * @return The current value of {@code outputColumnNames}.
     */
    public List<String> getOutputColumnNames() {
        return outputColumnNames;
    }

    /**
     * The list of names of the columns to be stored in the output table.
     *
     * @param outputColumnNames  The new value for {@code outputColumnNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUnionRequest setOutputColumnNames(List<String> outputColumnNames) {
        this.outputColumnNames = (outputColumnNames == null) ? new ArrayList<String>() : outputColumnNames;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#PERSIST PERSIST}
     *         is {@link Options#FALSE FALSE} (or unspecified), then this is
     *         always allowed even if the caller does not have permission to
     *         create tables. The generated name is returned in {@link
     *         com.gpudb.protocol.CreateUnionResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the
     *         projection as part of {@link #getTableName() tableName} and use
     *         {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of the schema for the output table. If the schema provided is
     *         non-existent, it will be automatically created. The default
     *         value is ''.
     *     <li>{@link Options#MODE MODE}: The mode describes what rows of the
     *         tables being unioned will be retained.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#UNION_ALL UNION_ALL}: Retains all rows
     *                 from the specified tables.
     *             <li>{@link Options#UNION UNION}: Retains all unique rows
     *                 from the specified tables (synonym for {@link
     *                 Options#UNION_DISTINCT UNION_DISTINCT}).
     *             <li>{@link Options#UNION_DISTINCT UNION_DISTINCT}: Retains
     *                 all unique rows from the specified tables.
     *             <li>{@link Options#EXCEPT EXCEPT}: Retains all unique rows
     *                 from the first table that do not appear in the second
     *                 table (only works on 2 tables).
     *             <li>{@link Options#EXCEPT_ALL EXCEPT_ALL}: Retains all
     *                 rows(including duplicates) from the first table that do
     *                 not appear in the second table (only works on 2 tables).
     *             <li>{@link Options#INTERSECT INTERSECT}: Retains all unique
     *                 rows that appear in both of the specified tables (only
     *                 works on 2 tables).
     *             <li>{@link Options#INTERSECT_ALL INTERSECT_ALL}: Retains all
     *                 rows(including duplicates) that appear in both of the
     *                 specified tables (only works on 2 tables).
     *         </ul>
     *         The default value is {@link Options#UNION_ALL UNION_ALL}.
     *     <li>{@link Options#LONG_HASH LONG_HASH}: When true use 128 bit hash
     *         for union-distinct, except, except_all, intersect and
     *         intersect_all modes. Otherwise use 64 bit hash.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for this output table.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for this output table.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for this output table.
     *     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}: Comma-separated
     *         list of columns on which to create indexes on the output table.
     *         The columns specified must be present in {@link
     *         #getOutputColumnNames() outputColumnNames}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the output table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the output table specified in {@link #getTableName()
     *         tableName} will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the output table will be an in-memory table and will expire
     *         unless a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: ID of view of which this output
     *         table is a member. The default value is ''.
     *     <li>{@link Options#FORCE_REPLICATED FORCE_REPLICATED}: If {@link
     *         Options#TRUE TRUE}, then the output table specified in {@link
     *         #getTableName() tableName} will be replicated even if the source
     *         tables are not.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#STRATEGY_DEFINITION STRATEGY_DEFINITION}: The <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns.
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for this table's columns.
     *     <li>{@link Options#NO_COUNT NO_COUNT}: Return a count of 0 for the
     *         union table response to avoid the cost of counting; optimization
     *         needed for many chunk virtual_union's. The default value is
     *         'false'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#PERSIST PERSIST}
     *         is {@link Options#FALSE FALSE} (or unspecified), then this is
     *         always allowed even if the caller does not have permission to
     *         create tables. The generated name is returned in {@link
     *         com.gpudb.protocol.CreateUnionResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the
     *         projection as part of {@link #getTableName() tableName} and use
     *         {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of the schema for the output table. If the schema provided is
     *         non-existent, it will be automatically created. The default
     *         value is ''.
     *     <li>{@link Options#MODE MODE}: The mode describes what rows of the
     *         tables being unioned will be retained.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#UNION_ALL UNION_ALL}: Retains all rows
     *                 from the specified tables.
     *             <li>{@link Options#UNION UNION}: Retains all unique rows
     *                 from the specified tables (synonym for {@link
     *                 Options#UNION_DISTINCT UNION_DISTINCT}).
     *             <li>{@link Options#UNION_DISTINCT UNION_DISTINCT}: Retains
     *                 all unique rows from the specified tables.
     *             <li>{@link Options#EXCEPT EXCEPT}: Retains all unique rows
     *                 from the first table that do not appear in the second
     *                 table (only works on 2 tables).
     *             <li>{@link Options#EXCEPT_ALL EXCEPT_ALL}: Retains all
     *                 rows(including duplicates) from the first table that do
     *                 not appear in the second table (only works on 2 tables).
     *             <li>{@link Options#INTERSECT INTERSECT}: Retains all unique
     *                 rows that appear in both of the specified tables (only
     *                 works on 2 tables).
     *             <li>{@link Options#INTERSECT_ALL INTERSECT_ALL}: Retains all
     *                 rows(including duplicates) that appear in both of the
     *                 specified tables (only works on 2 tables).
     *         </ul>
     *         The default value is {@link Options#UNION_ALL UNION_ALL}.
     *     <li>{@link Options#LONG_HASH LONG_HASH}: When true use 128 bit hash
     *         for union-distinct, except, except_all, intersect and
     *         intersect_all modes. Otherwise use 64 bit hash.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for this output table.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for this output table.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for this output table.
     *     <li>{@link Options#CREATE_INDEXES CREATE_INDEXES}: Comma-separated
     *         list of columns on which to create indexes on the output table.
     *         The columns specified must be present in {@link
     *         #getOutputColumnNames() outputColumnNames}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the output table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the output table specified in {@link #getTableName()
     *         tableName} will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the output table will be an in-memory table and will expire
     *         unless a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: ID of view of which this output
     *         table is a member. The default value is ''.
     *     <li>{@link Options#FORCE_REPLICATED FORCE_REPLICATED}: If {@link
     *         Options#TRUE TRUE}, then the output table specified in {@link
     *         #getTableName() tableName} will be replicated even if the source
     *         tables are not.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#STRATEGY_DEFINITION STRATEGY_DEFINITION}: The <a
     *         href="../../../../../../rm/concepts/#tier-strategies"
     *         target="_top">tier strategy</a> for the table and its columns.
     *     <li>{@link Options#COMPRESSION_CODEC COMPRESSION_CODEC}: The default
     *         <a href="../../../../../../concepts/column_compression/"
     *         target="_top">compression codec</a> for this table's columns.
     *     <li>{@link Options#NO_COUNT NO_COUNT}: Return a count of 0 for the
     *         union table response to avoid the cost of counting; optimization
     *         needed for many chunk virtual_union's. The default value is
     *         'false'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUnionRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.tableNames;

            case 2:
                return this.inputColumnNames;

            case 3:
                return this.outputColumnNames;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.tableNames = (List<String>)value;
                break;

            case 2:
                this.inputColumnNames = (List<List<String>>)value;
                break;

            case 3:
                this.outputColumnNames = (List<String>)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateUnionRequest that = (CreateUnionRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.tableNames.equals( that.tableNames )
                 && this.inputColumnNames.equals( that.inputColumnNames )
                 && this.outputColumnNames.equals( that.outputColumnNames )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "inputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "outputColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.outputColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.inputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.outputColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
