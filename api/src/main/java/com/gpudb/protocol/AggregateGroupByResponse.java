/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import com.gpudb.Record;
import com.gpudb.Type;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.generic.GenericData;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#aggregateGroupBy(AggregateGroupByRequest)
 * GPUdb.aggregateGroupBy}.
 */
public class AggregateGroupByResponse {
    /**
     * A set of string constants for the {@link AggregateGroupByResponse}
     * parameter {@link #getInfo() info}.
     * <p>
     * Additional information.
     */
    public static final class Info {
        /**
         * The fully qualified name of the table (i.e.&nbsp;including the
         * schema) used to store the results.
         */
        public static final String QUALIFIED_RESULT_TABLE_NAME = "qualified_result_table_name";

        private Info() {  }
    }

    private List<Record> data;
    private long totalNumberOfRecords;
    private boolean hasMoreRecords;
    private Map<String, String> info;
    private Type dataType;

    /**
     * Constructs an AggregateGroupByResponse object with default parameters.
     */
    public AggregateGroupByResponse() {
    }

    /**
     * Avro binary encoded response.
     *
     * @return The current value of {@code data}.
     */
    public List<Record> getData() {
        return data;
    }

    /**
     * Avro binary encoded response.
     *
     * @param data  The new value for {@code data}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateGroupByResponse setData(List<Record> data) {
        this.data = (data == null) ? new ArrayList<Record>() : data;
        return this;
    }

    /**
     * Total/Filtered number of records.  This may be an over-estimate if a
     * limit was applied and there are additional records (i.e., when {@link
     * #getHasMoreRecords() hasMoreRecords} is true).
     *
     * @return The current value of {@code totalNumberOfRecords}.
     */
    public long getTotalNumberOfRecords() {
        return totalNumberOfRecords;
    }

    /**
     * Total/Filtered number of records.  This may be an over-estimate if a
     * limit was applied and there are additional records (i.e., when {@link
     * #getHasMoreRecords() hasMoreRecords} is true).
     *
     * @param totalNumberOfRecords  The new value for {@code
     *                              totalNumberOfRecords}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateGroupByResponse setTotalNumberOfRecords(long totalNumberOfRecords) {
        this.totalNumberOfRecords = totalNumberOfRecords;
        return this;
    }

    /**
     * Too many records. Returned a partial set.
     *
     * @return The current value of {@code hasMoreRecords}.
     */
    public boolean getHasMoreRecords() {
        return hasMoreRecords;
    }

    /**
     * Too many records. Returned a partial set.
     *
     * @param hasMoreRecords  The new value for {@code hasMoreRecords}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateGroupByResponse setHasMoreRecords(boolean hasMoreRecords) {
        this.hasMoreRecords = hasMoreRecords;
        return this;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}: The fully qualified name of the
     *         table (i.e. including the schema) used to store the results.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}: The fully qualified name of the
     *         table (i.e. including the schema) used to store the results.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateGroupByResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * The {@link Type} object containing the type of the dynamically generated
     * data.
     *
     * @return The current value of {@code dataType}.
     */
    public Type getDataType() {
        return dataType;
    }

    /**
     * The {@link Type} object containing the type of the dynamically generated
     * data.
     *
     * @param dataType  The new value for {@code dataType}.
     *
     * @return {@code this} to mimic the builder pattern.
     *
     */
    public AggregateGroupByResponse setDataType(Type dataType) {
        this.dataType = dataType;
        return this;
    }
    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AggregateGroupByResponse that = (AggregateGroupByResponse)obj;

        return ( this.data.equals( that.data )
                 && ( this.totalNumberOfRecords == that.totalNumberOfRecords )
                 && ( this.hasMoreRecords == that.hasMoreRecords )
                 && this.info.equals( that.info )
                 && this.dataType.equals( that.dataType ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "data" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.data ) );
        builder.append( ", " );
        builder.append( gd.toString( "totalNumberOfRecords" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.totalNumberOfRecords ) );
        builder.append( ", " );
        builder.append( gd.toString( "hasMoreRecords" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hasMoreRecords ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( ", " );
        builder.append( gd.toString( "dataType" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dataType ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.data.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.totalNumberOfRecords).hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.hasMoreRecords).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        hashCode = (31 * hashCode) + this.dataType.hashCode();
        return hashCode;
    }
}
