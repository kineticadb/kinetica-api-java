/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#showEnvironment(ShowEnvironmentRequest)
 * GPUdb.showEnvironment}.
 * <p>
 * Shows information about a specified <a
 * href="../../../../../../concepts/udf/" target="_top">user-defined
 * function</a> (UDF) environment or all environments.
 * Returns detailed information about existing environments.
 */
public class ShowEnvironmentRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowEnvironmentRequest")
            .namespace("com.gpudb")
            .fields()
                .name("environmentName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ShowEnvironmentRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE} and if the environment specified in
         * {@link #getEnvironmentName() environmentName} does not exist, no
         * error is returned. If {@link Options#FALSE FALSE} and if the
         * environment specified in {@link #getEnvironmentName()
         * environmentName} does not exist, then an error is returned.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@link Options#TRUE TRUE} only return the names of the installed
         * environments and omit package listing.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String SHOW_NAMES_ONLY = "show_names_only";

        private Options() {  }
    }

    private String environmentName;
    private Map<String, String> options;

    /**
     * Constructs a ShowEnvironmentRequest object with default parameters.
     */
    public ShowEnvironmentRequest() {
        environmentName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a ShowEnvironmentRequest object with the specified
     * parameters.
     *
     * @param environmentName  Name of the environment on which to retrieve
     *                         information. The name must refer to a currently
     *                         existing environment. If '*' or an empty value
     *                         is specified, information about all environments
     *                         will be returned. The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS
     *                         NO_ERROR_IF_NOT_EXISTS}: If {@link Options#TRUE
     *                         TRUE} and if the environment specified in {@code
     *                         environmentName} does not exist, no error is
     *                         returned. If {@link Options#FALSE FALSE} and if
     *                         the environment specified in {@code
     *                         environmentName} does not exist, then an error
     *                         is returned.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#SHOW_NAMES_ONLY SHOW_NAMES_ONLY}:
     *                         If {@link Options#TRUE TRUE} only return the
     *                         names of the installed environments and omit
     *                         package listing.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ShowEnvironmentRequest(String environmentName, Map<String, String> options) {
        this.environmentName = (environmentName == null) ? "" : environmentName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the environment on which to retrieve information. The name must
     * refer to a currently existing environment. If '*' or an empty value is
     * specified, information about all environments will be returned. The
     * default value is ''.
     *
     * @return The current value of {@code environmentName}.
     */
    public String getEnvironmentName() {
        return environmentName;
    }

    /**
     * Name of the environment on which to retrieve information. The name must
     * refer to a currently existing environment. If '*' or an empty value is
     * specified, information about all environments will be returned. The
     * default value is ''.
     *
     * @param environmentName  The new value for {@code environmentName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowEnvironmentRequest setEnvironmentName(String environmentName) {
        this.environmentName = (environmentName == null) ? "" : environmentName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#TRUE TRUE} and if the environment specified in
     *         {@link #getEnvironmentName() environmentName} does not exist, no
     *         error is returned. If {@link Options#FALSE FALSE} and if the
     *         environment specified in {@link #getEnvironmentName()
     *         environmentName} does not exist, then an error is returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#SHOW_NAMES_ONLY SHOW_NAMES_ONLY}: If {@link
     *         Options#TRUE TRUE} only return the names of the installed
     *         environments and omit package listing.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#TRUE TRUE} and if the environment specified in
     *         {@link #getEnvironmentName() environmentName} does not exist, no
     *         error is returned. If {@link Options#FALSE FALSE} and if the
     *         environment specified in {@link #getEnvironmentName()
     *         environmentName} does not exist, then an error is returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#SHOW_NAMES_ONLY SHOW_NAMES_ONLY}: If {@link
     *         Options#TRUE TRUE} only return the names of the installed
     *         environments and omit package listing.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowEnvironmentRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.environmentName;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.environmentName = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowEnvironmentRequest that = (ShowEnvironmentRequest)obj;

        return ( this.environmentName.equals( that.environmentName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "environmentName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.environmentName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.environmentName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
