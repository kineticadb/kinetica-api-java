/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterSystemProperties(AlterSystemPropertiesRequest)
 * GPUdb.alterSystemProperties}.
 * <p>
 * The {@link
 * com.gpudb.GPUdb#alterSystemProperties(AlterSystemPropertiesRequest)
 * GPUdb.alterSystemProperties} endpoint is primarily used to simplify the
 * testing of the system and is not expected to be used during normal
 * execution.  Commands are given through the {@link #getPropertyUpdatesMap()
 * propertyUpdatesMap} whose keys are commands and values are strings
 * representing integer values (for example '8000') or boolean values ('true'
 * or 'false').
 */
public class AlterSystemPropertiesRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterSystemPropertiesRequest")
            .namespace("com.gpudb")
            .fields()
                .name("propertyUpdatesMap").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AlterSystemPropertiesRequest}
     * parameter {@link #getPropertyUpdatesMap() propertyUpdatesMap}.
     * <p>
     * Map containing the properties of the system to be updated. Error if
     * empty.
     */
    public static final class PropertyUpdatesMap {
        /**
         * Enables concurrent kernel execution if the value is {@link
         * PropertyUpdatesMap#TRUE TRUE} and disables it if the value is {@link
         * PropertyUpdatesMap#FALSE FALSE}.
         * Supported values:
         * <ul>
         *     <li>{@link PropertyUpdatesMap#TRUE TRUE}
         *     <li>{@link PropertyUpdatesMap#FALSE FALSE}
         * </ul>
         */
        public static final String CONCURRENT_KERNEL_EXECUTION = "concurrent_kernel_execution";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Sets the maximum number of simultaneous threads allocated to a given
         * request, on each rank. Note that thread allocation may also be
         * limited by resource group limits and/or system load.
         */
        public static final String SUBTASK_CONCURRENCY_LIMIT = "subtask_concurrency_limit";

        /**
         * Sets the number of records per chunk to be used for all new tables.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Sets the target maximum data size for each column in a chunk to be
         * used for all new tables.
         */
        public static final String CHUNK_COLUMN_MAX_MEMORY = "chunk_column_max_memory";

        /**
         * Indicates the target maximum data size for all columns in a chunk to
         * be used for all new tables.
         */
        public static final String CHUNK_MAX_MEMORY = "chunk_max_memory";

        /**
         * Sets the execution_mode for kernel executions to the specified
         * string value. Possible values are host, device, default (engine
         * decides) or an integer value that indicates max chunk size to exec
         * on host
         */
        public static final String EXECUTION_MODE = "execution_mode";

        /**
         * Sets the root directory path where external table data files are
         * accessed from.  Path must exist on the head node
         */
        public static final String EXTERNAL_FILES_DIRECTORY = "external_files_directory";

        /**
         * Number of minutes after which filtering (e.g., {@link
         * com.gpudb.GPUdb#filter(FilterRequest) GPUdb.filter}) and aggregating
         * (e.g., {@link
         * com.gpudb.GPUdb#aggregateGroupBy(AggregateGroupByRequest)
         * GPUdb.aggregateGroupBy}) queries will timeout. The default value is
         * '20'. The minimum allowed value is '0'. The maximum allowed value is
         * '1440'.
         */
        public static final String REQUEST_TIMEOUT = "request_timeout";

        /**
         * The maximum number of records the database will serve for a given
         * data retrieval call. The default value is '20000'. The minimum
         * allowed value is '0'. The maximum allowed value is '1000000'.
         */
        public static final String MAX_GET_RECORDS_SIZE = "max_get_records_size";

        /**
         * Enable or disable auditing.
         */
        public static final String ENABLE_AUDIT = "enable_audit";

        /**
         * Enable or disable auditing of request headers.
         */
        public static final String AUDIT_HEADERS = "audit_headers";

        /**
         * Enable or disable auditing of request bodies.
         */
        public static final String AUDIT_BODY = "audit_body";

        /**
         * Enable or disable auditing of request data.
         */
        public static final String AUDIT_DATA = "audit_data";

        /**
         * Enable or disable auditing of response information.
         */
        public static final String AUDIT_RESPONSE = "audit_response";

        /**
         * Size of the shadow aggregate chunk cache in bytes. The default value
         * is '10000000'. The minimum allowed value is '0'. The maximum allowed
         * value is '2147483647'.
         */
        public static final String SHADOW_AGG_SIZE = "shadow_agg_size";

        /**
         * Size of the shadow filter chunk cache in bytes. The default value is
         * '10000000'. The minimum allowed value is '0'. The maximum allowed
         * value is '2147483647'.
         */
        public static final String SHADOW_FILTER_SIZE = "shadow_filter_size";

        /**
         * Enable overlapped-equi-join filter. The default value is 'true'.
         */
        public static final String ENABLE_OVERLAPPED_EQUI_JOIN = "enable_overlapped_equi_join";

        /**
         * Enable the one_step compound-equi-join algorithm. The default value
         * is 'true'.
         */
        public static final String ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN = "enable_one_step_compound_equi_join";

        /**
         * Maximum number of records to be ingested in a single batch. The
         * default value is '1000'. The minimum allowed value is '1'. The
         * maximum allowed value is '10000000'.
         */
        public static final String KAFKA_BATCH_SIZE = "kafka_batch_size";

        /**
         * Maximum time (milliseconds) for each poll to get records from kafka.
         * The default value is '0'. The minimum allowed value is '0'. The
         * maximum allowed value is '1000'.
         */
        public static final String KAFKA_POLL_TIMEOUT = "kafka_poll_timeout";

        /**
         * Maximum time (seconds) to buffer records received from kafka before
         * ingestion. The default value is '30'. The minimum allowed value is
         * '1'. The maximum allowed value is '120'.
         */
        public static final String KAFKA_WAIT_TIME = "kafka_wait_time";

        /**
         * Parquet file compression type.
         * Supported values:
         * <ul>
         *     <li>{@link PropertyUpdatesMap#UNCOMPRESSED UNCOMPRESSED}
         *     <li>{@link PropertyUpdatesMap#SNAPPY SNAPPY}
         *     <li>{@link PropertyUpdatesMap#GZIP GZIP}
         * </ul>
         * The default value is {@link PropertyUpdatesMap#SNAPPY SNAPPY}.
         */
        public static final String EGRESS_PARQUET_COMPRESSION = "egress_parquet_compression";

        public static final String UNCOMPRESSED = "uncompressed";
        public static final String SNAPPY = "snappy";
        public static final String GZIP = "gzip";

        /**
         * Max file size (in MB) to allow saving to a single file. May be
         * overridden by target limitations. The default value is '10000'. The
         * minimum allowed value is '1'. The maximum allowed value is '200000'.
         */
        public static final String EGRESS_SINGLE_FILE_MAX_SIZE = "egress_single_file_max_size";

        /**
         * Sets the max_concurrent_kernels value of the conf. The minimum
         * allowed value is '0'. The maximum allowed value is '256'.
         */
        public static final String MAX_CONCURRENT_KERNELS = "max_concurrent_kernels";

        /**
         * Sets the system_metadata.retention_period value of the conf. The
         * minimum allowed value is '1'.
         */
        public static final String SYSTEM_METADATA_RETENTION_PERIOD = "system_metadata_retention_period";

        /**
         * Size of the worker rank data calculation thread pool.  This is
         * primarily used for computation-based operations such as aggregates
         * and record retrieval. The minimum allowed value is '2'. The maximum
         * allowed value is '8192'.
         */
        public static final String TCS_PER_TOM = "tcs_per_tom";

        /**
         * Size of the worker rank data processing thread pool.  This includes
         * operations such as inserts, updates, & deletes on table data.
         * Multi-head inserts are not affected by this limit. The minimum
         * allowed value is '2'. The maximum allowed value is '8192'.
         */
        public static final String TPS_PER_TOM = "tps_per_tom";

        /**
         * Size of the worker rank background thread pool. This includes
         * background operations such as watermark evictions catalog table
         * updates. The minimum allowed value is '1'. The maximum allowed value
         * is '8192'.
         */
        public static final String BACKGROUND_WORKER_THREADS = "background_worker_threads";

        /**
         * Outputs various job-related information to the rank logs. Used for
         * troubleshooting.
         */
        public static final String LOG_DEBUG_JOB_INFO = "log_debug_job_info";

        /**
         * Log a stack trace for any thread that runs longer than a defined
         * threshold. Used for troubleshooting. The default value is 'true'.
         */
        public static final String ENABLE_THREAD_HANG_LOGGING = "enable_thread_hang_logging";

        /**
         * Enable RAG. The default value is 'false'.
         */
        public static final String AI_ENABLE_RAG = "ai_enable_rag";

        /**
         * AI API provider type
         */
        public static final String AI_API_PROVIDER = "ai_api_provider";

        /**
         * AI API URL
         */
        public static final String AI_API_URL = "ai_api_url";

        /**
         * AI API key
         */
        public static final String AI_API_KEY = "ai_api_key";

        /**
         * AI API connection timeout in seconds
         */
        public static final String AI_API_CONNECTION_TIMEOUT = "ai_api_connection_timeout";

        /**
         * AI API model name
         */
        public static final String AI_API_EMBEDDINGS_MODEL = "ai_api_embeddings_model";

        /**
         * Enable or disable persisting of query metrics.
         */
        public static final String TELM_PERSIST_QUERY_METRICS = "telm_persist_query_metrics";

        /**
         * Idle connection timeout in seconds
         */
        public static final String POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT = "postgres_proxy_idle_connection_timeout";

        /**
         * Enable  postgres proxy keep alive. The default value is 'false'.
         */
        public static final String POSTGRES_PROXY_KEEP_ALIVE = "postgres_proxy_keep_alive";

        /**
         * The default maximum capacity to apply when creating a KiFS directory
         * (bytes). The minimum allowed value is '-1'.
         */
        public static final String KIFS_DIRECTORY_DATA_LIMIT = "kifs_directory_data_limit";

        /**
         * The default <a href="../../../../../../concepts/column_compression/"
         * target="_top">compression algorithm</a> applied to any column
         * without a column-level or table-level default compression specified
         * at the time it was created
         */
        public static final String COMPRESSION_CODEC = "compression_codec";

        /**
         * Time interval in seconds after which the database will apply
         * optimizations/transformations to persisted data, such as
         * compression. The minimum allowed value is '0'.
         */
        public static final String DISK_AUTO_OPTIMIZE_TIMEOUT = "disk_auto_optimize_timeout";

        /**
         * Initializes HA replay from the given timestamp (as milliseconds
         * since unix epoch). The minimum allowed value is '-1'.
         */
        public static final String HA_CONSUMER_REPLAY_OFFSET = "ha_consumer_replay_offset";

        private PropertyUpdatesMap() {  }
    }

    /**
     * A set of string constants for the {@link AlterSystemPropertiesRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE} and evict_columns is specified, the
         * given objects will be evicted to cold storage (if such a tier
         * exists).
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         */
        public static final String EVICT_TO_COLD = "evict_to_cold";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@link Options#TRUE TRUE} the system configuration will be
         * written to disk upon successful application of this request. This
         * will commit the changes from this request and any additional
         * in-memory modifications.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String PERSIST = "persist";

        private Options() {  }
    }

    private Map<String, String> propertyUpdatesMap;
    private Map<String, String> options;

    /**
     * Constructs an AlterSystemPropertiesRequest object with default
     * parameters.
     */
    public AlterSystemPropertiesRequest() {
        propertyUpdatesMap = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterSystemPropertiesRequest object with the specified
     * parameters.
     *
     * @param propertyUpdatesMap  Map containing the properties of the system
     *                            to be updated. Error if empty.
     *                            <ul>
     *                                <li>{@link
     *                                    PropertyUpdatesMap#CONCURRENT_KERNEL_EXECUTION
     *                                    CONCURRENT_KERNEL_EXECUTION}: Enables
     *                                    concurrent kernel execution if the
     *                                    value is {@link
     *                                    PropertyUpdatesMap#TRUE TRUE} and
     *                                    disables it if the value is {@link
     *                                    PropertyUpdatesMap#FALSE FALSE}.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            PropertyUpdatesMap#TRUE TRUE}
     *                                        <li>{@link
     *                                            PropertyUpdatesMap#FALSE
     *                                            FALSE}
     *                                    </ul>
     *                                <li>{@link
     *                                    PropertyUpdatesMap#SUBTASK_CONCURRENCY_LIMIT
     *                                    SUBTASK_CONCURRENCY_LIMIT}: Sets the
     *                                    maximum number of simultaneous
     *                                    threads allocated to a given request,
     *                                    on each rank. Note that thread
     *                                    allocation may also be limited by
     *                                    resource group limits and/or system
     *                                    load.
     *                                <li>{@link PropertyUpdatesMap#CHUNK_SIZE
     *                                    CHUNK_SIZE}: Sets the number of
     *                                    records per chunk to be used for all
     *                                    new tables.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#CHUNK_COLUMN_MAX_MEMORY
     *                                    CHUNK_COLUMN_MAX_MEMORY}: Sets the
     *                                    target maximum data size for each
     *                                    column in a chunk to be used for all
     *                                    new tables.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#CHUNK_MAX_MEMORY
     *                                    CHUNK_MAX_MEMORY}: Indicates the
     *                                    target maximum data size for all
     *                                    columns in a chunk to be used for all
     *                                    new tables.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#EXECUTION_MODE
     *                                    EXECUTION_MODE}: Sets the
     *                                    execution_mode for kernel executions
     *                                    to the specified string value.
     *                                    Possible values are host, device,
     *                                    default (engine decides) or an
     *                                    integer value that indicates max
     *                                    chunk size to exec on host
     *                                <li>{@link
     *                                    PropertyUpdatesMap#EXTERNAL_FILES_DIRECTORY
     *                                    EXTERNAL_FILES_DIRECTORY}: Sets the
     *                                    root directory path where external
     *                                    table data files are accessed from.
     *                                    Path must exist on the head node
     *                                <li>{@link
     *                                    PropertyUpdatesMap#REQUEST_TIMEOUT
     *                                    REQUEST_TIMEOUT}: Number of minutes
     *                                    after which filtering (e.g., {@link
     *                                    com.gpudb.GPUdb#filter(FilterRequest)
     *                                    GPUdb.filter}) and aggregating (e.g.,
     *                                    {@link
     *                                    com.gpudb.GPUdb#aggregateGroupBy(AggregateGroupByRequest)
     *                                    GPUdb.aggregateGroupBy}) queries will
     *                                    timeout. The default value is '20'.
     *                                    The minimum allowed value is '0'. The
     *                                    maximum allowed value is '1440'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#MAX_GET_RECORDS_SIZE
     *                                    MAX_GET_RECORDS_SIZE}: The maximum
     *                                    number of records the database will
     *                                    serve for a given data retrieval
     *                                    call. The default value is '20000'.
     *                                    The minimum allowed value is '0'. The
     *                                    maximum allowed value is '1000000'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#ENABLE_AUDIT
     *                                    ENABLE_AUDIT}: Enable or disable
     *                                    auditing.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AUDIT_HEADERS
     *                                    AUDIT_HEADERS}: Enable or disable
     *                                    auditing of request headers.
     *                                <li>{@link PropertyUpdatesMap#AUDIT_BODY
     *                                    AUDIT_BODY}: Enable or disable
     *                                    auditing of request bodies.
     *                                <li>{@link PropertyUpdatesMap#AUDIT_DATA
     *                                    AUDIT_DATA}: Enable or disable
     *                                    auditing of request data.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AUDIT_RESPONSE
     *                                    AUDIT_RESPONSE}: Enable or disable
     *                                    auditing of response information.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#SHADOW_AGG_SIZE
     *                                    SHADOW_AGG_SIZE}: Size of the shadow
     *                                    aggregate chunk cache in bytes. The
     *                                    default value is '10000000'. The
     *                                    minimum allowed value is '0'. The
     *                                    maximum allowed value is
     *                                    '2147483647'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#SHADOW_FILTER_SIZE
     *                                    SHADOW_FILTER_SIZE}: Size of the
     *                                    shadow filter chunk cache in bytes.
     *                                    The default value is '10000000'. The
     *                                    minimum allowed value is '0'. The
     *                                    maximum allowed value is
     *                                    '2147483647'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#ENABLE_OVERLAPPED_EQUI_JOIN
     *                                    ENABLE_OVERLAPPED_EQUI_JOIN}: Enable
     *                                    overlapped-equi-join filter. The
     *                                    default value is 'true'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN
     *                                    ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN}:
     *                                    Enable the one_step
     *                                    compound-equi-join algorithm. The
     *                                    default value is 'true'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#KAFKA_BATCH_SIZE
     *                                    KAFKA_BATCH_SIZE}: Maximum number of
     *                                    records to be ingested in a single
     *                                    batch. The default value is '1000'.
     *                                    The minimum allowed value is '1'. The
     *                                    maximum allowed value is '10000000'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#KAFKA_POLL_TIMEOUT
     *                                    KAFKA_POLL_TIMEOUT}: Maximum time
     *                                    (milliseconds) for each poll to get
     *                                    records from kafka. The default value
     *                                    is '0'. The minimum allowed value is
     *                                    '0'. The maximum allowed value is
     *                                    '1000'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#KAFKA_WAIT_TIME
     *                                    KAFKA_WAIT_TIME}: Maximum time
     *                                    (seconds) to buffer records received
     *                                    from kafka before ingestion. The
     *                                    default value is '30'. The minimum
     *                                    allowed value is '1'. The maximum
     *                                    allowed value is '120'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#EGRESS_PARQUET_COMPRESSION
     *                                    EGRESS_PARQUET_COMPRESSION}: Parquet
     *                                    file compression type.
     *                                    Supported values:
     *                                    <ul>
     *                                        <li>{@link
     *                                            PropertyUpdatesMap#UNCOMPRESSED
     *                                            UNCOMPRESSED}
     *                                        <li>{@link
     *                                            PropertyUpdatesMap#SNAPPY
     *                                            SNAPPY}
     *                                        <li>{@link
     *                                            PropertyUpdatesMap#GZIP GZIP}
     *                                    </ul>
     *                                    The default value is {@link
     *                                    PropertyUpdatesMap#SNAPPY SNAPPY}.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#EGRESS_SINGLE_FILE_MAX_SIZE
     *                                    EGRESS_SINGLE_FILE_MAX_SIZE}: Max
     *                                    file size (in MB) to allow saving to
     *                                    a single file. May be overridden by
     *                                    target limitations. The default value
     *                                    is '10000'. The minimum allowed value
     *                                    is '1'. The maximum allowed value is
     *                                    '200000'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#MAX_CONCURRENT_KERNELS
     *                                    MAX_CONCURRENT_KERNELS}: Sets the
     *                                    max_concurrent_kernels value of the
     *                                    conf. The minimum allowed value is
     *                                    '0'. The maximum allowed value is
     *                                    '256'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#SYSTEM_METADATA_RETENTION_PERIOD
     *                                    SYSTEM_METADATA_RETENTION_PERIOD}:
     *                                    Sets the
     *                                    system_metadata.retention_period
     *                                    value of the conf. The minimum
     *                                    allowed value is '1'.
     *                                <li>{@link PropertyUpdatesMap#TCS_PER_TOM
     *                                    TCS_PER_TOM}: Size of the worker rank
     *                                    data calculation thread pool.  This
     *                                    is primarily used for
     *                                    computation-based operations such as
     *                                    aggregates and record retrieval. The
     *                                    minimum allowed value is '2'. The
     *                                    maximum allowed value is '8192'.
     *                                <li>{@link PropertyUpdatesMap#TPS_PER_TOM
     *                                    TPS_PER_TOM}: Size of the worker rank
     *                                    data processing thread pool.  This
     *                                    includes operations such as inserts,
     *                                    updates, & deletes on table data.
     *                                    Multi-head inserts are not affected
     *                                    by this limit. The minimum allowed
     *                                    value is '2'. The maximum allowed
     *                                    value is '8192'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#BACKGROUND_WORKER_THREADS
     *                                    BACKGROUND_WORKER_THREADS}: Size of
     *                                    the worker rank background thread
     *                                    pool. This includes background
     *                                    operations such as watermark
     *                                    evictions catalog table updates. The
     *                                    minimum allowed value is '1'. The
     *                                    maximum allowed value is '8192'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#LOG_DEBUG_JOB_INFO
     *                                    LOG_DEBUG_JOB_INFO}: Outputs various
     *                                    job-related information to the rank
     *                                    logs. Used for troubleshooting.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#ENABLE_THREAD_HANG_LOGGING
     *                                    ENABLE_THREAD_HANG_LOGGING}: Log a
     *                                    stack trace for any thread that runs
     *                                    longer than a defined threshold. Used
     *                                    for troubleshooting. The default
     *                                    value is 'true'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AI_ENABLE_RAG
     *                                    AI_ENABLE_RAG}: Enable RAG. The
     *                                    default value is 'false'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AI_API_PROVIDER
     *                                    AI_API_PROVIDER}: AI API provider
     *                                    type
     *                                <li>{@link PropertyUpdatesMap#AI_API_URL
     *                                    AI_API_URL}: AI API URL
     *                                <li>{@link PropertyUpdatesMap#AI_API_KEY
     *                                    AI_API_KEY}: AI API key
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AI_API_CONNECTION_TIMEOUT
     *                                    AI_API_CONNECTION_TIMEOUT}: AI API
     *                                    connection timeout in seconds
     *                                <li>{@link
     *                                    PropertyUpdatesMap#AI_API_EMBEDDINGS_MODEL
     *                                    AI_API_EMBEDDINGS_MODEL}: AI API
     *                                    model name
     *                                <li>{@link
     *                                    PropertyUpdatesMap#TELM_PERSIST_QUERY_METRICS
     *                                    TELM_PERSIST_QUERY_METRICS}: Enable
     *                                    or disable persisting of query
     *                                    metrics.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT
     *                                    POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT}:
     *                                    Idle connection timeout in seconds
     *                                <li>{@link
     *                                    PropertyUpdatesMap#POSTGRES_PROXY_KEEP_ALIVE
     *                                    POSTGRES_PROXY_KEEP_ALIVE}: Enable
     *                                    postgres proxy keep alive. The
     *                                    default value is 'false'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#KIFS_DIRECTORY_DATA_LIMIT
     *                                    KIFS_DIRECTORY_DATA_LIMIT}: The
     *                                    default maximum capacity to apply
     *                                    when creating a KiFS directory
     *                                    (bytes). The minimum allowed value is
     *                                    '-1'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#COMPRESSION_CODEC
     *                                    COMPRESSION_CODEC}: The default <a
     *                                    href="../../../../../../concepts/column_compression/"
     *                                    target="_top">compression
     *                                    algorithm</a> applied to any column
     *                                    without a column-level or table-level
     *                                    default compression specified at the
     *                                    time it was created
     *                                <li>{@link
     *                                    PropertyUpdatesMap#DISK_AUTO_OPTIMIZE_TIMEOUT
     *                                    DISK_AUTO_OPTIMIZE_TIMEOUT}: Time
     *                                    interval in seconds after which the
     *                                    database will apply
     *                                    optimizations/transformations to
     *                                    persisted data, such as compression.
     *                                    The minimum allowed value is '0'.
     *                                <li>{@link
     *                                    PropertyUpdatesMap#HA_CONSUMER_REPLAY_OFFSET
     *                                    HA_CONSUMER_REPLAY_OFFSET}:
     *                                    Initializes HA replay from the given
     *                                    timestamp (as milliseconds since unix
     *                                    epoch). The minimum allowed value is
     *                                    '-1'.
     *                            </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#EVICT_TO_COLD EVICT_TO_COLD}: If
     *                         {@link Options#TRUE TRUE} and evict_columns is
     *                         specified, the given objects will be evicted to
     *                         cold storage (if such a tier exists).
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                     <li>{@link Options#PERSIST PERSIST}: If {@link
     *                         Options#TRUE TRUE} the system configuration will
     *                         be written to disk upon successful application
     *                         of this request. This will commit the changes
     *                         from this request and any additional in-memory
     *                         modifications.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AlterSystemPropertiesRequest(Map<String, String> propertyUpdatesMap, Map<String, String> options) {
        this.propertyUpdatesMap = (propertyUpdatesMap == null) ? new LinkedHashMap<String, String>() : propertyUpdatesMap;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Map containing the properties of the system to be updated. Error if
     * empty.
     * <ul>
     *     <li>{@link PropertyUpdatesMap#CONCURRENT_KERNEL_EXECUTION
     *         CONCURRENT_KERNEL_EXECUTION}: Enables concurrent kernel
     *         execution if the value is {@link PropertyUpdatesMap#TRUE TRUE}
     *         and disables it if the value is {@link PropertyUpdatesMap#FALSE
     *         FALSE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link PropertyUpdatesMap#TRUE TRUE}
     *             <li>{@link PropertyUpdatesMap#FALSE FALSE}
     *         </ul>
     *     <li>{@link PropertyUpdatesMap#SUBTASK_CONCURRENCY_LIMIT
     *         SUBTASK_CONCURRENCY_LIMIT}: Sets the maximum number of
     *         simultaneous threads allocated to a given request, on each rank.
     *         Note that thread allocation may also be limited by resource
     *         group limits and/or system load.
     *     <li>{@link PropertyUpdatesMap#CHUNK_SIZE CHUNK_SIZE}: Sets the
     *         number of records per chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#CHUNK_COLUMN_MAX_MEMORY
     *         CHUNK_COLUMN_MAX_MEMORY}: Sets the target maximum data size for
     *         each column in a chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}:
     *         Indicates the target maximum data size for all columns in a
     *         chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#EXECUTION_MODE EXECUTION_MODE}: Sets
     *         the execution_mode for kernel executions to the specified string
     *         value. Possible values are host, device, default (engine
     *         decides) or an integer value that indicates max chunk size to
     *         exec on host
     *     <li>{@link PropertyUpdatesMap#EXTERNAL_FILES_DIRECTORY
     *         EXTERNAL_FILES_DIRECTORY}: Sets the root directory path where
     *         external table data files are accessed from.  Path must exist on
     *         the head node
     *     <li>{@link PropertyUpdatesMap#REQUEST_TIMEOUT REQUEST_TIMEOUT}:
     *         Number of minutes after which filtering (e.g., {@link
     *         com.gpudb.GPUdb#filter(FilterRequest) GPUdb.filter}) and
     *         aggregating (e.g., {@link
     *         com.gpudb.GPUdb#aggregateGroupBy(AggregateGroupByRequest)
     *         GPUdb.aggregateGroupBy}) queries will timeout. The default value
     *         is '20'. The minimum allowed value is '0'. The maximum allowed
     *         value is '1440'.
     *     <li>{@link PropertyUpdatesMap#MAX_GET_RECORDS_SIZE
     *         MAX_GET_RECORDS_SIZE}: The maximum number of records the
     *         database will serve for a given data retrieval call. The default
     *         value is '20000'. The minimum allowed value is '0'. The maximum
     *         allowed value is '1000000'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_AUDIT ENABLE_AUDIT}: Enable or
     *         disable auditing.
     *     <li>{@link PropertyUpdatesMap#AUDIT_HEADERS AUDIT_HEADERS}: Enable
     *         or disable auditing of request headers.
     *     <li>{@link PropertyUpdatesMap#AUDIT_BODY AUDIT_BODY}: Enable or
     *         disable auditing of request bodies.
     *     <li>{@link PropertyUpdatesMap#AUDIT_DATA AUDIT_DATA}: Enable or
     *         disable auditing of request data.
     *     <li>{@link PropertyUpdatesMap#AUDIT_RESPONSE AUDIT_RESPONSE}: Enable
     *         or disable auditing of response information.
     *     <li>{@link PropertyUpdatesMap#SHADOW_AGG_SIZE SHADOW_AGG_SIZE}: Size
     *         of the shadow aggregate chunk cache in bytes. The default value
     *         is '10000000'. The minimum allowed value is '0'. The maximum
     *         allowed value is '2147483647'.
     *     <li>{@link PropertyUpdatesMap#SHADOW_FILTER_SIZE
     *         SHADOW_FILTER_SIZE}: Size of the shadow filter chunk cache in
     *         bytes. The default value is '10000000'. The minimum allowed
     *         value is '0'. The maximum allowed value is '2147483647'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_OVERLAPPED_EQUI_JOIN
     *         ENABLE_OVERLAPPED_EQUI_JOIN}: Enable overlapped-equi-join
     *         filter. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN
     *         ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN}: Enable the one_step
     *         compound-equi-join algorithm. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_BATCH_SIZE KAFKA_BATCH_SIZE}:
     *         Maximum number of records to be ingested in a single batch. The
     *         default value is '1000'. The minimum allowed value is '1'. The
     *         maximum allowed value is '10000000'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_POLL_TIMEOUT
     *         KAFKA_POLL_TIMEOUT}: Maximum time (milliseconds) for each poll
     *         to get records from kafka. The default value is '0'. The minimum
     *         allowed value is '0'. The maximum allowed value is '1000'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_WAIT_TIME KAFKA_WAIT_TIME}:
     *         Maximum time (seconds) to buffer records received from kafka
     *         before ingestion. The default value is '30'. The minimum allowed
     *         value is '1'. The maximum allowed value is '120'.
     *     <li>{@link PropertyUpdatesMap#EGRESS_PARQUET_COMPRESSION
     *         EGRESS_PARQUET_COMPRESSION}: Parquet file compression type.
     *         Supported values:
     *         <ul>
     *             <li>{@link PropertyUpdatesMap#UNCOMPRESSED UNCOMPRESSED}
     *             <li>{@link PropertyUpdatesMap#SNAPPY SNAPPY}
     *             <li>{@link PropertyUpdatesMap#GZIP GZIP}
     *         </ul>
     *         The default value is {@link PropertyUpdatesMap#SNAPPY SNAPPY}.
     *     <li>{@link PropertyUpdatesMap#EGRESS_SINGLE_FILE_MAX_SIZE
     *         EGRESS_SINGLE_FILE_MAX_SIZE}: Max file size (in MB) to allow
     *         saving to a single file. May be overridden by target
     *         limitations. The default value is '10000'. The minimum allowed
     *         value is '1'. The maximum allowed value is '200000'.
     *     <li>{@link PropertyUpdatesMap#MAX_CONCURRENT_KERNELS
     *         MAX_CONCURRENT_KERNELS}: Sets the max_concurrent_kernels value
     *         of the conf. The minimum allowed value is '0'. The maximum
     *         allowed value is '256'.
     *     <li>{@link PropertyUpdatesMap#SYSTEM_METADATA_RETENTION_PERIOD
     *         SYSTEM_METADATA_RETENTION_PERIOD}: Sets the
     *         system_metadata.retention_period value of the conf. The minimum
     *         allowed value is '1'.
     *     <li>{@link PropertyUpdatesMap#TCS_PER_TOM TCS_PER_TOM}: Size of the
     *         worker rank data calculation thread pool.  This is primarily
     *         used for computation-based operations such as aggregates and
     *         record retrieval. The minimum allowed value is '2'. The maximum
     *         allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#TPS_PER_TOM TPS_PER_TOM}: Size of the
     *         worker rank data processing thread pool.  This includes
     *         operations such as inserts, updates, & deletes on table data.
     *         Multi-head inserts are not affected by this limit. The minimum
     *         allowed value is '2'. The maximum allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#BACKGROUND_WORKER_THREADS
     *         BACKGROUND_WORKER_THREADS}: Size of the worker rank background
     *         thread pool. This includes background operations such as
     *         watermark evictions catalog table updates. The minimum allowed
     *         value is '1'. The maximum allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#LOG_DEBUG_JOB_INFO
     *         LOG_DEBUG_JOB_INFO}: Outputs various job-related information to
     *         the rank logs. Used for troubleshooting.
     *     <li>{@link PropertyUpdatesMap#ENABLE_THREAD_HANG_LOGGING
     *         ENABLE_THREAD_HANG_LOGGING}: Log a stack trace for any thread
     *         that runs longer than a defined threshold. Used for
     *         troubleshooting. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#AI_ENABLE_RAG AI_ENABLE_RAG}: Enable
     *         RAG. The default value is 'false'.
     *     <li>{@link PropertyUpdatesMap#AI_API_PROVIDER AI_API_PROVIDER}: AI
     *         API provider type
     *     <li>{@link PropertyUpdatesMap#AI_API_URL AI_API_URL}: AI API URL
     *     <li>{@link PropertyUpdatesMap#AI_API_KEY AI_API_KEY}: AI API key
     *     <li>{@link PropertyUpdatesMap#AI_API_CONNECTION_TIMEOUT
     *         AI_API_CONNECTION_TIMEOUT}: AI API connection timeout in seconds
     *     <li>{@link PropertyUpdatesMap#AI_API_EMBEDDINGS_MODEL
     *         AI_API_EMBEDDINGS_MODEL}: AI API model name
     *     <li>{@link PropertyUpdatesMap#TELM_PERSIST_QUERY_METRICS
     *         TELM_PERSIST_QUERY_METRICS}: Enable or disable persisting of
     *         query metrics.
     *     <li>{@link PropertyUpdatesMap#POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT
     *         POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT}: Idle connection timeout
     *         in seconds
     *     <li>{@link PropertyUpdatesMap#POSTGRES_PROXY_KEEP_ALIVE
     *         POSTGRES_PROXY_KEEP_ALIVE}: Enable  postgres proxy keep alive.
     *         The default value is 'false'.
     *     <li>{@link PropertyUpdatesMap#KIFS_DIRECTORY_DATA_LIMIT
     *         KIFS_DIRECTORY_DATA_LIMIT}: The default maximum capacity to
     *         apply when creating a KiFS directory (bytes). The minimum
     *         allowed value is '-1'.
     *     <li>{@link PropertyUpdatesMap#COMPRESSION_CODEC COMPRESSION_CODEC}:
     *         The default <a
     *         href="../../../../../../concepts/column_compression/"
     *         target="_top">compression algorithm</a> applied to any column
     *         without a column-level or table-level default compression
     *         specified at the time it was created
     *     <li>{@link PropertyUpdatesMap#DISK_AUTO_OPTIMIZE_TIMEOUT
     *         DISK_AUTO_OPTIMIZE_TIMEOUT}: Time interval in seconds after
     *         which the database will apply optimizations/transformations to
     *         persisted data, such as compression. The minimum allowed value
     *         is '0'.
     *     <li>{@link PropertyUpdatesMap#HA_CONSUMER_REPLAY_OFFSET
     *         HA_CONSUMER_REPLAY_OFFSET}: Initializes HA replay from the given
     *         timestamp (as milliseconds since unix epoch). The minimum
     *         allowed value is '-1'.
     * </ul>
     *
     * @return The current value of {@code propertyUpdatesMap}.
     */
    public Map<String, String> getPropertyUpdatesMap() {
        return propertyUpdatesMap;
    }

    /**
     * Map containing the properties of the system to be updated. Error if
     * empty.
     * <ul>
     *     <li>{@link PropertyUpdatesMap#CONCURRENT_KERNEL_EXECUTION
     *         CONCURRENT_KERNEL_EXECUTION}: Enables concurrent kernel
     *         execution if the value is {@link PropertyUpdatesMap#TRUE TRUE}
     *         and disables it if the value is {@link PropertyUpdatesMap#FALSE
     *         FALSE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link PropertyUpdatesMap#TRUE TRUE}
     *             <li>{@link PropertyUpdatesMap#FALSE FALSE}
     *         </ul>
     *     <li>{@link PropertyUpdatesMap#SUBTASK_CONCURRENCY_LIMIT
     *         SUBTASK_CONCURRENCY_LIMIT}: Sets the maximum number of
     *         simultaneous threads allocated to a given request, on each rank.
     *         Note that thread allocation may also be limited by resource
     *         group limits and/or system load.
     *     <li>{@link PropertyUpdatesMap#CHUNK_SIZE CHUNK_SIZE}: Sets the
     *         number of records per chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#CHUNK_COLUMN_MAX_MEMORY
     *         CHUNK_COLUMN_MAX_MEMORY}: Sets the target maximum data size for
     *         each column in a chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}:
     *         Indicates the target maximum data size for all columns in a
     *         chunk to be used for all new tables.
     *     <li>{@link PropertyUpdatesMap#EXECUTION_MODE EXECUTION_MODE}: Sets
     *         the execution_mode for kernel executions to the specified string
     *         value. Possible values are host, device, default (engine
     *         decides) or an integer value that indicates max chunk size to
     *         exec on host
     *     <li>{@link PropertyUpdatesMap#EXTERNAL_FILES_DIRECTORY
     *         EXTERNAL_FILES_DIRECTORY}: Sets the root directory path where
     *         external table data files are accessed from.  Path must exist on
     *         the head node
     *     <li>{@link PropertyUpdatesMap#REQUEST_TIMEOUT REQUEST_TIMEOUT}:
     *         Number of minutes after which filtering (e.g., {@link
     *         com.gpudb.GPUdb#filter(FilterRequest) GPUdb.filter}) and
     *         aggregating (e.g., {@link
     *         com.gpudb.GPUdb#aggregateGroupBy(AggregateGroupByRequest)
     *         GPUdb.aggregateGroupBy}) queries will timeout. The default value
     *         is '20'. The minimum allowed value is '0'. The maximum allowed
     *         value is '1440'.
     *     <li>{@link PropertyUpdatesMap#MAX_GET_RECORDS_SIZE
     *         MAX_GET_RECORDS_SIZE}: The maximum number of records the
     *         database will serve for a given data retrieval call. The default
     *         value is '20000'. The minimum allowed value is '0'. The maximum
     *         allowed value is '1000000'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_AUDIT ENABLE_AUDIT}: Enable or
     *         disable auditing.
     *     <li>{@link PropertyUpdatesMap#AUDIT_HEADERS AUDIT_HEADERS}: Enable
     *         or disable auditing of request headers.
     *     <li>{@link PropertyUpdatesMap#AUDIT_BODY AUDIT_BODY}: Enable or
     *         disable auditing of request bodies.
     *     <li>{@link PropertyUpdatesMap#AUDIT_DATA AUDIT_DATA}: Enable or
     *         disable auditing of request data.
     *     <li>{@link PropertyUpdatesMap#AUDIT_RESPONSE AUDIT_RESPONSE}: Enable
     *         or disable auditing of response information.
     *     <li>{@link PropertyUpdatesMap#SHADOW_AGG_SIZE SHADOW_AGG_SIZE}: Size
     *         of the shadow aggregate chunk cache in bytes. The default value
     *         is '10000000'. The minimum allowed value is '0'. The maximum
     *         allowed value is '2147483647'.
     *     <li>{@link PropertyUpdatesMap#SHADOW_FILTER_SIZE
     *         SHADOW_FILTER_SIZE}: Size of the shadow filter chunk cache in
     *         bytes. The default value is '10000000'. The minimum allowed
     *         value is '0'. The maximum allowed value is '2147483647'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_OVERLAPPED_EQUI_JOIN
     *         ENABLE_OVERLAPPED_EQUI_JOIN}: Enable overlapped-equi-join
     *         filter. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN
     *         ENABLE_ONE_STEP_COMPOUND_EQUI_JOIN}: Enable the one_step
     *         compound-equi-join algorithm. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_BATCH_SIZE KAFKA_BATCH_SIZE}:
     *         Maximum number of records to be ingested in a single batch. The
     *         default value is '1000'. The minimum allowed value is '1'. The
     *         maximum allowed value is '10000000'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_POLL_TIMEOUT
     *         KAFKA_POLL_TIMEOUT}: Maximum time (milliseconds) for each poll
     *         to get records from kafka. The default value is '0'. The minimum
     *         allowed value is '0'. The maximum allowed value is '1000'.
     *     <li>{@link PropertyUpdatesMap#KAFKA_WAIT_TIME KAFKA_WAIT_TIME}:
     *         Maximum time (seconds) to buffer records received from kafka
     *         before ingestion. The default value is '30'. The minimum allowed
     *         value is '1'. The maximum allowed value is '120'.
     *     <li>{@link PropertyUpdatesMap#EGRESS_PARQUET_COMPRESSION
     *         EGRESS_PARQUET_COMPRESSION}: Parquet file compression type.
     *         Supported values:
     *         <ul>
     *             <li>{@link PropertyUpdatesMap#UNCOMPRESSED UNCOMPRESSED}
     *             <li>{@link PropertyUpdatesMap#SNAPPY SNAPPY}
     *             <li>{@link PropertyUpdatesMap#GZIP GZIP}
     *         </ul>
     *         The default value is {@link PropertyUpdatesMap#SNAPPY SNAPPY}.
     *     <li>{@link PropertyUpdatesMap#EGRESS_SINGLE_FILE_MAX_SIZE
     *         EGRESS_SINGLE_FILE_MAX_SIZE}: Max file size (in MB) to allow
     *         saving to a single file. May be overridden by target
     *         limitations. The default value is '10000'. The minimum allowed
     *         value is '1'. The maximum allowed value is '200000'.
     *     <li>{@link PropertyUpdatesMap#MAX_CONCURRENT_KERNELS
     *         MAX_CONCURRENT_KERNELS}: Sets the max_concurrent_kernels value
     *         of the conf. The minimum allowed value is '0'. The maximum
     *         allowed value is '256'.
     *     <li>{@link PropertyUpdatesMap#SYSTEM_METADATA_RETENTION_PERIOD
     *         SYSTEM_METADATA_RETENTION_PERIOD}: Sets the
     *         system_metadata.retention_period value of the conf. The minimum
     *         allowed value is '1'.
     *     <li>{@link PropertyUpdatesMap#TCS_PER_TOM TCS_PER_TOM}: Size of the
     *         worker rank data calculation thread pool.  This is primarily
     *         used for computation-based operations such as aggregates and
     *         record retrieval. The minimum allowed value is '2'. The maximum
     *         allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#TPS_PER_TOM TPS_PER_TOM}: Size of the
     *         worker rank data processing thread pool.  This includes
     *         operations such as inserts, updates, & deletes on table data.
     *         Multi-head inserts are not affected by this limit. The minimum
     *         allowed value is '2'. The maximum allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#BACKGROUND_WORKER_THREADS
     *         BACKGROUND_WORKER_THREADS}: Size of the worker rank background
     *         thread pool. This includes background operations such as
     *         watermark evictions catalog table updates. The minimum allowed
     *         value is '1'. The maximum allowed value is '8192'.
     *     <li>{@link PropertyUpdatesMap#LOG_DEBUG_JOB_INFO
     *         LOG_DEBUG_JOB_INFO}: Outputs various job-related information to
     *         the rank logs. Used for troubleshooting.
     *     <li>{@link PropertyUpdatesMap#ENABLE_THREAD_HANG_LOGGING
     *         ENABLE_THREAD_HANG_LOGGING}: Log a stack trace for any thread
     *         that runs longer than a defined threshold. Used for
     *         troubleshooting. The default value is 'true'.
     *     <li>{@link PropertyUpdatesMap#AI_ENABLE_RAG AI_ENABLE_RAG}: Enable
     *         RAG. The default value is 'false'.
     *     <li>{@link PropertyUpdatesMap#AI_API_PROVIDER AI_API_PROVIDER}: AI
     *         API provider type
     *     <li>{@link PropertyUpdatesMap#AI_API_URL AI_API_URL}: AI API URL
     *     <li>{@link PropertyUpdatesMap#AI_API_KEY AI_API_KEY}: AI API key
     *     <li>{@link PropertyUpdatesMap#AI_API_CONNECTION_TIMEOUT
     *         AI_API_CONNECTION_TIMEOUT}: AI API connection timeout in seconds
     *     <li>{@link PropertyUpdatesMap#AI_API_EMBEDDINGS_MODEL
     *         AI_API_EMBEDDINGS_MODEL}: AI API model name
     *     <li>{@link PropertyUpdatesMap#TELM_PERSIST_QUERY_METRICS
     *         TELM_PERSIST_QUERY_METRICS}: Enable or disable persisting of
     *         query metrics.
     *     <li>{@link PropertyUpdatesMap#POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT
     *         POSTGRES_PROXY_IDLE_CONNECTION_TIMEOUT}: Idle connection timeout
     *         in seconds
     *     <li>{@link PropertyUpdatesMap#POSTGRES_PROXY_KEEP_ALIVE
     *         POSTGRES_PROXY_KEEP_ALIVE}: Enable  postgres proxy keep alive.
     *         The default value is 'false'.
     *     <li>{@link PropertyUpdatesMap#KIFS_DIRECTORY_DATA_LIMIT
     *         KIFS_DIRECTORY_DATA_LIMIT}: The default maximum capacity to
     *         apply when creating a KiFS directory (bytes). The minimum
     *         allowed value is '-1'.
     *     <li>{@link PropertyUpdatesMap#COMPRESSION_CODEC COMPRESSION_CODEC}:
     *         The default <a
     *         href="../../../../../../concepts/column_compression/"
     *         target="_top">compression algorithm</a> applied to any column
     *         without a column-level or table-level default compression
     *         specified at the time it was created
     *     <li>{@link PropertyUpdatesMap#DISK_AUTO_OPTIMIZE_TIMEOUT
     *         DISK_AUTO_OPTIMIZE_TIMEOUT}: Time interval in seconds after
     *         which the database will apply optimizations/transformations to
     *         persisted data, such as compression. The minimum allowed value
     *         is '0'.
     *     <li>{@link PropertyUpdatesMap#HA_CONSUMER_REPLAY_OFFSET
     *         HA_CONSUMER_REPLAY_OFFSET}: Initializes HA replay from the given
     *         timestamp (as milliseconds since unix epoch). The minimum
     *         allowed value is '-1'.
     * </ul>
     *
     * @param propertyUpdatesMap  The new value for {@code propertyUpdatesMap}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterSystemPropertiesRequest setPropertyUpdatesMap(Map<String, String> propertyUpdatesMap) {
        this.propertyUpdatesMap = (propertyUpdatesMap == null) ? new LinkedHashMap<String, String>() : propertyUpdatesMap;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#EVICT_TO_COLD EVICT_TO_COLD}: If {@link
     *         Options#TRUE TRUE} and evict_columns is specified, the given
     *         objects will be evicted to cold storage (if such a tier exists).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE}
     *         the system configuration will be written to disk upon successful
     *         application of this request. This will commit the changes from
     *         this request and any additional in-memory modifications.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#EVICT_TO_COLD EVICT_TO_COLD}: If {@link
     *         Options#TRUE TRUE} and evict_columns is specified, the given
     *         objects will be evicted to cold storage (if such a tier exists).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE}
     *         the system configuration will be written to disk upon successful
     *         application of this request. This will commit the changes from
     *         this request and any additional in-memory modifications.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterSystemPropertiesRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.propertyUpdatesMap;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.propertyUpdatesMap = (Map<String, String>)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterSystemPropertiesRequest that = (AlterSystemPropertiesRequest)obj;

        return ( this.propertyUpdatesMap.equals( that.propertyUpdatesMap )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "propertyUpdatesMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.propertyUpdatesMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.propertyUpdatesMap.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
