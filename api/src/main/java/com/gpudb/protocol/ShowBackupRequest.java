/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link com.gpudb.GPUdb#showBackup(ShowBackupRequest)
 * GPUdb.showBackup}.
 * <p>
 * Shows information about a backup
 * Returns detailed information about one or more backup instances.
 */
public class ShowBackupRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowBackupRequest")
            .namespace("com.gpudb")
            .fields()
                .name("backupName").type().stringType().noDefault()
                .name("datasourceName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ShowBackupRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Backup instance ID to show. Leave empty to show information from the
         * most recent backup instance in the container. The default value is
         * ''.
         */
        public static final String BACKUP_ID = "backup_id";

        /**
         * Shows the contents of the specified backup_id.
         * Supported values:
         * <ul>
         *     <li>{@link Options#NONE NONE}: No backup contents
         *     <li>{@link Options#OBJECT_NAMES OBJECT_NAMES}: Object names only
         *     <li>{@link Options#OBJECT_FILES OBJECT_FILES}: Object names and
         *         files
         * </ul>
         * The default value is {@link Options#NONE NONE}.
         */
        public static final String SHOW_CONTENTS = "show_contents";

        /**
         * No backup contents
         */
        public static final String NONE = "none";

        /**
         * Object names only
         */
        public static final String OBJECT_NAMES = "object_names";

        /**
         * Object names and files
         */
        public static final String OBJECT_FILES = "object_files";

        /**
         * If {@link Options#FALSE FALSE} will return an error if the provided
         * {@link #getBackupName() backupName} does not exist. If {@link
         * Options#TRUE TRUE} then it will return an empty result.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private String backupName;
    private String datasourceName;
    private Map<String, String> options;

    /**
     * Constructs a ShowBackupRequest object with default parameters.
     */
    public ShowBackupRequest() {
        backupName = "";
        datasourceName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a ShowBackupRequest object with the specified parameters.
     *
     * @param backupName  Name of the backup object. An empty string or '*'
     *                    will return all existing backups. The default value
     *                    is ''.
     * @param datasourceName  Datasource where backup is located.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup
     *                         instance ID to show. Leave empty to show
     *                         information from the most recent backup instance
     *                         in the container. The default value is ''.
     *                     <li>{@link Options#SHOW_CONTENTS SHOW_CONTENTS}:
     *                         Shows the contents of the specified backup_id.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#NONE NONE}: No backup
     *                                 contents
     *                             <li>{@link Options#OBJECT_NAMES
     *                                 OBJECT_NAMES}: Object names only
     *                             <li>{@link Options#OBJECT_FILES
     *                                 OBJECT_FILES}: Object names and files
     *                         </ul>
     *                         The default value is {@link Options#NONE NONE}.
     *                     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS
     *                         NO_ERROR_IF_NOT_EXISTS}: If {@link Options#FALSE
     *                         FALSE} will return an error if the provided
     *                         {@code backupName} does not exist. If {@link
     *                         Options#TRUE TRUE} then it will return an empty
     *                         result.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ShowBackupRequest(String backupName, String datasourceName, Map<String, String> options) {
        this.backupName = (backupName == null) ? "" : backupName;
        this.datasourceName = (datasourceName == null) ? "" : datasourceName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the backup object. An empty string or '*' will return all
     * existing backups. The default value is ''.
     *
     * @return The current value of {@code backupName}.
     */
    public String getBackupName() {
        return backupName;
    }

    /**
     * Name of the backup object. An empty string or '*' will return all
     * existing backups. The default value is ''.
     *
     * @param backupName  The new value for {@code backupName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowBackupRequest setBackupName(String backupName) {
        this.backupName = (backupName == null) ? "" : backupName;
        return this;
    }

    /**
     * Datasource where backup is located.
     *
     * @return The current value of {@code datasourceName}.
     */
    public String getDatasourceName() {
        return datasourceName;
    }

    /**
     * Datasource where backup is located.
     *
     * @param datasourceName  The new value for {@code datasourceName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowBackupRequest setDatasourceName(String datasourceName) {
        this.datasourceName = (datasourceName == null) ? "" : datasourceName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup instance ID to show.
     *         Leave empty to show information from the most recent backup
     *         instance in the container. The default value is ''.
     *     <li>{@link Options#SHOW_CONTENTS SHOW_CONTENTS}: Shows the contents
     *         of the specified backup_id.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NONE NONE}: No backup contents
     *             <li>{@link Options#OBJECT_NAMES OBJECT_NAMES}: Object names
     *                 only
     *             <li>{@link Options#OBJECT_FILES OBJECT_FILES}: Object names
     *                 and files
     *         </ul>
     *         The default value is {@link Options#NONE NONE}.
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#FALSE FALSE} will return an error if the
     *         provided {@link #getBackupName() backupName} does not exist. If
     *         {@link Options#TRUE TRUE} then it will return an empty result.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup instance ID to show.
     *         Leave empty to show information from the most recent backup
     *         instance in the container. The default value is ''.
     *     <li>{@link Options#SHOW_CONTENTS SHOW_CONTENTS}: Shows the contents
     *         of the specified backup_id.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NONE NONE}: No backup contents
     *             <li>{@link Options#OBJECT_NAMES OBJECT_NAMES}: Object names
     *                 only
     *             <li>{@link Options#OBJECT_FILES OBJECT_FILES}: Object names
     *                 and files
     *         </ul>
     *         The default value is {@link Options#NONE NONE}.
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#FALSE FALSE} will return an error if the
     *         provided {@link #getBackupName() backupName} does not exist. If
     *         {@link Options#TRUE TRUE} then it will return an empty result.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowBackupRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.backupName;

            case 1:
                return this.datasourceName;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.backupName = (String)value;
                break;

            case 1:
                this.datasourceName = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowBackupRequest that = (ShowBackupRequest)obj;

        return ( this.backupName.equals( that.backupName )
                 && this.datasourceName.equals( that.datasourceName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "backupName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupName ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasourceName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasourceName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.backupName.hashCode();
        hashCode = (31 * hashCode) + this.datasourceName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
