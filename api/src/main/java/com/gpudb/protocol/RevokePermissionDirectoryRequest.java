/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#revokePermissionDirectory(RevokePermissionDirectoryRequest)
 * GPUdb.revokePermissionDirectory}.
 * <p>
 * Revokes a <a href="../../../../../../tools/kifs/" target="_top">KiFS</a>
 * directory-level permission from a user or role.
 */
public class RevokePermissionDirectoryRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("RevokePermissionDirectoryRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("permission").type().stringType().noDefault()
                .name("directoryName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link
     * RevokePermissionDirectoryRequest} parameter {@link #getPermission()
     * permission}.
     * <p>
     * Permission to revoke from the user or role.
     */
    public static final class Permission {
        /**
         * For files in the directory, access to list files, download files, or
         * use files in server side functions.
         */
        public static final String DIRECTORY_READ = "directory_read";

        /**
         * Access to upload files to, or delete files from, the directory. A
         * user or role with write access automatically has read access.
         */
        public static final String DIRECTORY_WRITE = "directory_write";

        private Permission() {  }
    }

    private String name;
    private String permission;
    private String directoryName;
    private Map<String, String> options;

    /**
     * Constructs a RevokePermissionDirectoryRequest object with default
     * parameters.
     */
    public RevokePermissionDirectoryRequest() {
        name = "";
        permission = "";
        directoryName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a RevokePermissionDirectoryRequest object with the specified
     * parameters.
     *
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                        <li>{@link Permission#DIRECTORY_READ
     *                            DIRECTORY_READ}: For files in the directory,
     *                            access to list files, download files, or use
     *                            files in server side functions.
     *                        <li>{@link Permission#DIRECTORY_WRITE
     *                            DIRECTORY_WRITE}: Access to upload files to,
     *                            or delete files from, the directory. A user
     *                            or role with write access automatically has
     *                            read access.
     *                    </ul>
     * @param directoryName  Name of the KiFS directory to which the permission
     *                       revokes access
     * @param options  Optional parameters. The default value is an empty
     *                 {@link Map}.
     */
    public RevokePermissionDirectoryRequest(String name, String permission, String directoryName, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.permission = (permission == null) ? "" : permission;
        this.directoryName = (directoryName == null) ? "" : directoryName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the user or role from which the permission will be revoked. Must
     * be an existing user or role.
     *
     * @return The current value of {@code name}.
     */
    public String getName() {
        return name;
    }

    /**
     * Name of the user or role from which the permission will be revoked. Must
     * be an existing user or role.
     *
     * @param name  The new value for {@code name}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RevokePermissionDirectoryRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * Permission to revoke from the user or role.
     * Supported values:
     * <ul>
     *     <li>{@link Permission#DIRECTORY_READ DIRECTORY_READ}: For files in
     *         the directory, access to list files, download files, or use
     *         files in server side functions.
     *     <li>{@link Permission#DIRECTORY_WRITE DIRECTORY_WRITE}: Access to
     *         upload files to, or delete files from, the directory. A user or
     *         role with write access automatically has read access.
     * </ul>
     *
     * @return The current value of {@code permission}.
     */
    public String getPermission() {
        return permission;
    }

    /**
     * Permission to revoke from the user or role.
     * Supported values:
     * <ul>
     *     <li>{@link Permission#DIRECTORY_READ DIRECTORY_READ}: For files in
     *         the directory, access to list files, download files, or use
     *         files in server side functions.
     *     <li>{@link Permission#DIRECTORY_WRITE DIRECTORY_WRITE}: Access to
     *         upload files to, or delete files from, the directory. A user or
     *         role with write access automatically has read access.
     * </ul>
     *
     * @param permission  The new value for {@code permission}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RevokePermissionDirectoryRequest setPermission(String permission) {
        this.permission = (permission == null) ? "" : permission;
        return this;
    }

    /**
     * Name of the KiFS directory to which the permission revokes access
     *
     * @return The current value of {@code directoryName}.
     */
    public String getDirectoryName() {
        return directoryName;
    }

    /**
     * Name of the KiFS directory to which the permission revokes access
     *
     * @param directoryName  The new value for {@code directoryName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RevokePermissionDirectoryRequest setDirectoryName(String directoryName) {
        this.directoryName = (directoryName == null) ? "" : directoryName;
        return this;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RevokePermissionDirectoryRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.permission;

            case 2:
                return this.directoryName;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.permission = (String)value;
                break;

            case 2:
                this.directoryName = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        RevokePermissionDirectoryRequest that = (RevokePermissionDirectoryRequest)obj;

        return ( this.name.equals( that.name )
                 && this.permission.equals( that.permission )
                 && this.directoryName.equals( that.directoryName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "permission" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.permission ) );
        builder.append( ", " );
        builder.append( gd.toString( "directoryName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.directoryName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.permission.hashCode();
        hashCode = (31 * hashCode) + this.directoryName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
