/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#restoreBackup(RestoreBackupRequest) GPUdb.restoreBackup}.
 * <p>
 * Restores objects from a backup instance.
 * Response from a backup restoration operation.
 */
public class RestoreBackupRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("RestoreBackupRequest")
            .namespace("com.gpudb")
            .fields()
                .name("backupName").type().stringType().noDefault()
                .name("restoreObjectsMap").type().map().values().stringType().noDefault()
                .name("datasourceName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link RestoreBackupRequest} parameter
     * {@link #getRestoreObjectsMap() restoreObjectsMap}.
     * <p>
     * Map of objects to be restored from the backup. Error if empty.
     */
    public static final class RestoreObjectsMap {
        /**
         * All object types in a schema (excludes permissions, system
         * configuration, host secret key, KiFS directories and user defined
         * functions)
         */
        public static final String ALL = "all";

        /**
         * Database Table
         */
        public static final String TABLE = "table";

        /**
         * Credential
         */
        public static final String CREDENTIAL = "credential";

        /**
         * Context
         */
        public static final String CONTEXT = "context";

        /**
         * Data Sink
         */
        public static final String DATASINK = "datasink";

        /**
         * Data Source
         */
        public static final String DATASOURCE = "datasource";

        /**
         * SQL Procedure
         */
        public static final String STORED_PROCEDURE = "stored_procedure";

        /**
         * Table Monitor (Stream)
         */
        public static final String MONITOR = "monitor";

        /**
         * User (internal and external) and associated permissions
         */
        public static final String USER = "user";

        /**
         * Role, role members (roles or users, recursively) and associated
         * permissions
         */
        public static final String ROLE = "role";

        /**
         * If {@link RestoreObjectsMap#TRUE TRUE}, restore the database
         * configuration file.
         * Supported values:
         * <ul>
         *     <li>{@link RestoreObjectsMap#FALSE FALSE}
         *     <li>{@link RestoreObjectsMap#TRUE TRUE}
         * </ul>
         * The default value is {@link RestoreObjectsMap#FALSE FALSE}.
         */
        public static final String CONFIGURATION = "configuration";

        public static final String FALSE = "false";
        public static final String TRUE = "true";

        private RestoreObjectsMap() {  }
    }

    /**
     * A set of string constants for the {@link RestoreBackupRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Backup instance ID to restore. Leave empty to restore the most
         * recent backup instance. The default value is ''.
         */
        public static final String BACKUP_ID = "backup_id";

        /**
         * Behavior to apply when restoring objects that already exist.
         * Supported values:
         * <ul>
         *     <li>{@link Options#NONE NONE}: If an object to be restored
         *         currently exists with the same name, abort and return error
         *     <li>{@link Options#REPLACE REPLACE}: If an object to be restored
         *         currently exists with the same name, replace it with the
         *         backup version
         *     <li>{@link Options#RENAME RENAME}: If an object to be restored
         *         currently exists with the same name, rename the original
         *         version
         * </ul>
         * The default value is {@link Options#NONE NONE}.
         */
        public static final String RESTORE_POLICY = "restore_policy";

        /**
         * If an object to be restored currently exists with the same name,
         * abort and return error
         */
        public static final String NONE = "none";

        /**
         * If an object to be restored currently exists with the same name,
         * replace it with the backup version
         */
        public static final String REPLACE = "replace";

        /**
         * If an object to be restored currently exists with the same name,
         * rename the original version
         */
        public static final String RENAME = "rename";

        /**
         * If the restore policy is rename, optionally use this schema for
         * renamed objects instead of a default generated one. The default
         * value is ''.
         */
        public static final String RENAMED_OBJECTS_SCHEMA = "renamed_objects_schema";

        /**
         * Create the schema for an object to be restored if it does not
         * currently exist. Error otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String CREATE_SCHEMA_IF_NOT_EXIST = "create_schema_if_not_exist";

        public static final String FALSE = "false";
        public static final String TRUE = "true";

        /**
         * Only recreates the objects from their DDL, do not restore table
         * data.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DDL_ONLY = "ddl_only";

        /**
         * Verify checksum for backup files.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String CHECKSUM = "checksum";

        /**
         * Does a dry-run restoration operation.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        private Options() {  }
    }

    private String backupName;
    private Map<String, String> restoreObjectsMap;
    private String datasourceName;
    private Map<String, String> options;

    /**
     * Constructs a RestoreBackupRequest object with default parameters.
     */
    public RestoreBackupRequest() {
        backupName = "";
        restoreObjectsMap = new LinkedHashMap<>();
        datasourceName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a RestoreBackupRequest object with the specified parameters.
     *
     * @param backupName  Name of the backup object, which must refer to a
     *                    currently existing backup. The default value is ''.
     * @param restoreObjectsMap  Map of objects to be restored from the backup.
     *                           Error if empty.
     *                           <ul>
     *                               <li>{@link RestoreObjectsMap#ALL ALL}: All
     *                                   object types in a schema (excludes
     *                                   permissions, system configuration,
     *                                   host secret key, KiFS directories and
     *                                   user defined functions)
     *                               <li>{@link RestoreObjectsMap#TABLE TABLE}:
     *                                   Database Table
     *                               <li>{@link RestoreObjectsMap#CREDENTIAL
     *                                   CREDENTIAL}: Credential
     *                               <li>{@link RestoreObjectsMap#CONTEXT
     *                                   CONTEXT}: Context
     *                               <li>{@link RestoreObjectsMap#DATASINK
     *                                   DATASINK}: Data Sink
     *                               <li>{@link RestoreObjectsMap#DATASOURCE
     *                                   DATASOURCE}: Data Source
     *                               <li>{@link
     *                                   RestoreObjectsMap#STORED_PROCEDURE
     *                                   STORED_PROCEDURE}: SQL Procedure
     *                               <li>{@link RestoreObjectsMap#MONITOR
     *                                   MONITOR}: Table Monitor (Stream)
     *                               <li>{@link RestoreObjectsMap#USER USER}:
     *                                   User (internal and external) and
     *                                   associated permissions
     *                               <li>{@link RestoreObjectsMap#ROLE ROLE}:
     *                                   Role, role members (roles or users,
     *                                   recursively) and associated
     *                                   permissions
     *                               <li>{@link RestoreObjectsMap#CONFIGURATION
     *                                   CONFIGURATION}: If {@link
     *                                   RestoreObjectsMap#TRUE TRUE}, restore
     *                                   the database configuration file.
     *                                   Supported values:
     *                                   <ul>
     *                                       <li>{@link RestoreObjectsMap#FALSE
     *                                           FALSE}
     *                                       <li>{@link RestoreObjectsMap#TRUE
     *                                           TRUE}
     *                                   </ul>
     *                                   The default value is {@link
     *                                   RestoreObjectsMap#FALSE FALSE}.
     *                           </ul>
     * @param datasourceName  Datasource where backup is located.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup
     *                         instance ID to restore. Leave empty to restore
     *                         the most recent backup instance. The default
     *                         value is ''.
     *                     <li>{@link Options#RESTORE_POLICY RESTORE_POLICY}:
     *                         Behavior to apply when restoring objects that
     *                         already exist.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#NONE NONE}: If an object
     *                                 to be restored currently exists with the
     *                                 same name, abort and return error
     *                             <li>{@link Options#REPLACE REPLACE}: If an
     *                                 object to be restored currently exists
     *                                 with the same name, replace it with the
     *                                 backup version
     *                             <li>{@link Options#RENAME RENAME}: If an
     *                                 object to be restored currently exists
     *                                 with the same name, rename the original
     *                                 version
     *                         </ul>
     *                         The default value is {@link Options#NONE NONE}.
     *                     <li>{@link Options#RENAMED_OBJECTS_SCHEMA
     *                         RENAMED_OBJECTS_SCHEMA}: If the restore policy
     *                         is rename, optionally use this schema for
     *                         renamed objects instead of a default generated
     *                         one. The default value is ''.
     *                     <li>{@link Options#CREATE_SCHEMA_IF_NOT_EXIST
     *                         CREATE_SCHEMA_IF_NOT_EXIST}: Create the schema
     *                         for an object to be restored if it does not
     *                         currently exist. Error otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only
     *                         recreates the objects from their DDL, do not
     *                         restore table data.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#CHECKSUM CHECKSUM}: Verify
     *                         checksum for backup files.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: Does a dry-run
     *                         restoration operation.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public RestoreBackupRequest(String backupName, Map<String, String> restoreObjectsMap, String datasourceName, Map<String, String> options) {
        this.backupName = (backupName == null) ? "" : backupName;
        this.restoreObjectsMap = (restoreObjectsMap == null) ? new LinkedHashMap<String, String>() : restoreObjectsMap;
        this.datasourceName = (datasourceName == null) ? "" : datasourceName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the backup object, which must refer to a currently existing
     * backup. The default value is ''.
     *
     * @return The current value of {@code backupName}.
     */
    public String getBackupName() {
        return backupName;
    }

    /**
     * Name of the backup object, which must refer to a currently existing
     * backup. The default value is ''.
     *
     * @param backupName  The new value for {@code backupName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RestoreBackupRequest setBackupName(String backupName) {
        this.backupName = (backupName == null) ? "" : backupName;
        return this;
    }

    /**
     * Map of objects to be restored from the backup. Error if empty.
     * <ul>
     *     <li>{@link RestoreObjectsMap#ALL ALL}: All object types in a schema
     *         (excludes permissions, system configuration, host secret key,
     *         KiFS directories and user defined functions)
     *     <li>{@link RestoreObjectsMap#TABLE TABLE}: Database Table
     *     <li>{@link RestoreObjectsMap#CREDENTIAL CREDENTIAL}: Credential
     *     <li>{@link RestoreObjectsMap#CONTEXT CONTEXT}: Context
     *     <li>{@link RestoreObjectsMap#DATASINK DATASINK}: Data Sink
     *     <li>{@link RestoreObjectsMap#DATASOURCE DATASOURCE}: Data Source
     *     <li>{@link RestoreObjectsMap#STORED_PROCEDURE STORED_PROCEDURE}: SQL
     *         Procedure
     *     <li>{@link RestoreObjectsMap#MONITOR MONITOR}: Table Monitor
     *         (Stream)
     *     <li>{@link RestoreObjectsMap#USER USER}: User (internal and
     *         external) and associated permissions
     *     <li>{@link RestoreObjectsMap#ROLE ROLE}: Role, role members (roles
     *         or users, recursively) and associated permissions
     *     <li>{@link RestoreObjectsMap#CONFIGURATION CONFIGURATION}: If {@link
     *         RestoreObjectsMap#TRUE TRUE}, restore the database configuration
     *         file.
     *         Supported values:
     *         <ul>
     *             <li>{@link RestoreObjectsMap#FALSE FALSE}
     *             <li>{@link RestoreObjectsMap#TRUE TRUE}
     *         </ul>
     *         The default value is {@link RestoreObjectsMap#FALSE FALSE}.
     * </ul>
     *
     * @return The current value of {@code restoreObjectsMap}.
     */
    public Map<String, String> getRestoreObjectsMap() {
        return restoreObjectsMap;
    }

    /**
     * Map of objects to be restored from the backup. Error if empty.
     * <ul>
     *     <li>{@link RestoreObjectsMap#ALL ALL}: All object types in a schema
     *         (excludes permissions, system configuration, host secret key,
     *         KiFS directories and user defined functions)
     *     <li>{@link RestoreObjectsMap#TABLE TABLE}: Database Table
     *     <li>{@link RestoreObjectsMap#CREDENTIAL CREDENTIAL}: Credential
     *     <li>{@link RestoreObjectsMap#CONTEXT CONTEXT}: Context
     *     <li>{@link RestoreObjectsMap#DATASINK DATASINK}: Data Sink
     *     <li>{@link RestoreObjectsMap#DATASOURCE DATASOURCE}: Data Source
     *     <li>{@link RestoreObjectsMap#STORED_PROCEDURE STORED_PROCEDURE}: SQL
     *         Procedure
     *     <li>{@link RestoreObjectsMap#MONITOR MONITOR}: Table Monitor
     *         (Stream)
     *     <li>{@link RestoreObjectsMap#USER USER}: User (internal and
     *         external) and associated permissions
     *     <li>{@link RestoreObjectsMap#ROLE ROLE}: Role, role members (roles
     *         or users, recursively) and associated permissions
     *     <li>{@link RestoreObjectsMap#CONFIGURATION CONFIGURATION}: If {@link
     *         RestoreObjectsMap#TRUE TRUE}, restore the database configuration
     *         file.
     *         Supported values:
     *         <ul>
     *             <li>{@link RestoreObjectsMap#FALSE FALSE}
     *             <li>{@link RestoreObjectsMap#TRUE TRUE}
     *         </ul>
     *         The default value is {@link RestoreObjectsMap#FALSE FALSE}.
     * </ul>
     *
     * @param restoreObjectsMap  The new value for {@code restoreObjectsMap}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RestoreBackupRequest setRestoreObjectsMap(Map<String, String> restoreObjectsMap) {
        this.restoreObjectsMap = (restoreObjectsMap == null) ? new LinkedHashMap<String, String>() : restoreObjectsMap;
        return this;
    }

    /**
     * Datasource where backup is located.
     *
     * @return The current value of {@code datasourceName}.
     */
    public String getDatasourceName() {
        return datasourceName;
    }

    /**
     * Datasource where backup is located.
     *
     * @param datasourceName  The new value for {@code datasourceName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RestoreBackupRequest setDatasourceName(String datasourceName) {
        this.datasourceName = (datasourceName == null) ? "" : datasourceName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup instance ID to
     *         restore. Leave empty to restore the most recent backup instance.
     *         The default value is ''.
     *     <li>{@link Options#RESTORE_POLICY RESTORE_POLICY}: Behavior to apply
     *         when restoring objects that already exist.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NONE NONE}: If an object to be restored
     *                 currently exists with the same name, abort and return
     *                 error
     *             <li>{@link Options#REPLACE REPLACE}: If an object to be
     *                 restored currently exists with the same name, replace it
     *                 with the backup version
     *             <li>{@link Options#RENAME RENAME}: If an object to be
     *                 restored currently exists with the same name, rename the
     *                 original version
     *         </ul>
     *         The default value is {@link Options#NONE NONE}.
     *     <li>{@link Options#RENAMED_OBJECTS_SCHEMA RENAMED_OBJECTS_SCHEMA}:
     *         If the restore policy is rename, optionally use this schema for
     *         renamed objects instead of a default generated one. The default
     *         value is ''.
     *     <li>{@link Options#CREATE_SCHEMA_IF_NOT_EXIST
     *         CREATE_SCHEMA_IF_NOT_EXIST}: Create the schema for an object to
     *         be restored if it does not currently exist. Error otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only recreates the objects
     *         from their DDL, do not restore table data.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#CHECKSUM CHECKSUM}: Verify checksum for backup
     *         files.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Does a dry-run restoration
     *         operation.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#BACKUP_ID BACKUP_ID}: Backup instance ID to
     *         restore. Leave empty to restore the most recent backup instance.
     *         The default value is ''.
     *     <li>{@link Options#RESTORE_POLICY RESTORE_POLICY}: Behavior to apply
     *         when restoring objects that already exist.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NONE NONE}: If an object to be restored
     *                 currently exists with the same name, abort and return
     *                 error
     *             <li>{@link Options#REPLACE REPLACE}: If an object to be
     *                 restored currently exists with the same name, replace it
     *                 with the backup version
     *             <li>{@link Options#RENAME RENAME}: If an object to be
     *                 restored currently exists with the same name, rename the
     *                 original version
     *         </ul>
     *         The default value is {@link Options#NONE NONE}.
     *     <li>{@link Options#RENAMED_OBJECTS_SCHEMA RENAMED_OBJECTS_SCHEMA}:
     *         If the restore policy is rename, optionally use this schema for
     *         renamed objects instead of a default generated one. The default
     *         value is ''.
     *     <li>{@link Options#CREATE_SCHEMA_IF_NOT_EXIST
     *         CREATE_SCHEMA_IF_NOT_EXIST}: Create the schema for an object to
     *         be restored if it does not currently exist. Error otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DDL_ONLY DDL_ONLY}: Only recreates the objects
     *         from their DDL, do not restore table data.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#CHECKSUM CHECKSUM}: Verify checksum for backup
     *         files.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Does a dry-run restoration
     *         operation.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RestoreBackupRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.backupName;

            case 1:
                return this.restoreObjectsMap;

            case 2:
                return this.datasourceName;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.backupName = (String)value;
                break;

            case 1:
                this.restoreObjectsMap = (Map<String, String>)value;
                break;

            case 2:
                this.datasourceName = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        RestoreBackupRequest that = (RestoreBackupRequest)obj;

        return ( this.backupName.equals( that.backupName )
                 && this.restoreObjectsMap.equals( that.restoreObjectsMap )
                 && this.datasourceName.equals( that.datasourceName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "backupName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupName ) );
        builder.append( ", " );
        builder.append( gd.toString( "restoreObjectsMap" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.restoreObjectsMap ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasourceName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasourceName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.backupName.hashCode();
        hashCode = (31 * hashCode) + this.restoreObjectsMap.hashCode();
        hashCode = (31 * hashCode) + this.datasourceName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
