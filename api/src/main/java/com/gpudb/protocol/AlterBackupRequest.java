/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterBackup(AlterBackupRequest) GPUdb.alterBackup}.
 * <p>
 * Alters an existing database backup containing a current snapshot of existing
 * objects.
 */
public class AlterBackupRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterBackupRequest")
            .namespace("com.gpudb")
            .fields()
                .name("backupName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("datasinkName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AlterBackupRequest} parameter
     * {@link #getAction() action}.
     * <p>
     * Operation to be applied
     */
    public static final class Action {
        /**
         * Calculate checksum for backup files
         */
        public static final String CHECKSUM = "checksum";

        /**
         * Only save the DDL, do not backup table data
         */
        public static final String DDL_ONLY = "ddl_only";

        /**
         * Maximum number of incremental backups to keep
         */
        public static final String MAX_INCREMENTAL_BACKUPS_TO_KEEP = "max_incremental_backups_to_keep";

        /**
         * Merges all backup instances and creates a single full backup
         */
        public static final String MERGE = "merge";

        /**
         * Purges backup instances
         */
        public static final String PURGE = "purge";

        private Action() {  }
    }

    /**
     * A set of string constants for the {@link AlterBackupRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Comments to store with the new backup instance
         */
        public static final String COMMENT = "comment";

        /**
         * Dry run of backup changes.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FALSE FALSE}
         *     <li>{@link Options#TRUE TRUE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        public static final String FALSE = "false";
        public static final String TRUE = "true";

        private Options() {  }
    }

    private String backupName;
    private String action;
    private String value;
    private String datasinkName;
    private Map<String, String> options;

    /**
     * Constructs an AlterBackupRequest object with default parameters.
     */
    public AlterBackupRequest() {
        backupName = "";
        action = "";
        value = "";
        datasinkName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterBackupRequest object with the specified parameters.
     *
     * @param backupName  Name of the backup object to be altered
     * @param action  Operation to be applied.
     *                Supported values:
     *                <ul>
     *                    <li>{@link Action#CHECKSUM CHECKSUM}: Calculate
     *                        checksum for backup files
     *                    <li>{@link Action#DDL_ONLY DDL_ONLY}: Only save the
     *                        DDL, do not backup table data
     *                    <li>{@link Action#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *                        MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number
     *                        of incremental backups to keep
     *                    <li>{@link Action#MERGE MERGE}: Merges all backup
     *                        instances and creates a single full backup
     *                    <li>{@link Action#PURGE PURGE}: Purges backup
     *                        instances
     *                </ul>
     * @param value  Action specific argument.
     * @param datasinkName  Datasink where backup will be stored.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COMMENT COMMENT}: Comments to
     *                         store with the new backup instance
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of
     *                         backup changes.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FALSE FALSE}
     *                             <li>{@link Options#TRUE TRUE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AlterBackupRequest(String backupName, String action, String value, String datasinkName, Map<String, String> options) {
        this.backupName = (backupName == null) ? "" : backupName;
        this.action = (action == null) ? "" : action;
        this.value = (value == null) ? "" : value;
        this.datasinkName = (datasinkName == null) ? "" : datasinkName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the backup object to be altered
     *
     * @return The current value of {@code backupName}.
     */
    public String getBackupName() {
        return backupName;
    }

    /**
     * Name of the backup object to be altered
     *
     * @param backupName  The new value for {@code backupName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterBackupRequest setBackupName(String backupName) {
        this.backupName = (backupName == null) ? "" : backupName;
        return this;
    }

    /**
     * Operation to be applied.
     * Supported values:
     * <ul>
     *     <li>{@link Action#CHECKSUM CHECKSUM}: Calculate checksum for backup
     *         files
     *     <li>{@link Action#DDL_ONLY DDL_ONLY}: Only save the DDL, do not
     *         backup table data
     *     <li>{@link Action#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number of incremental
     *         backups to keep
     *     <li>{@link Action#MERGE MERGE}: Merges all backup instances and
     *         creates a single full backup
     *     <li>{@link Action#PURGE PURGE}: Purges backup instances
     * </ul>
     *
     * @return The current value of {@code action}.
     */
    public String getAction() {
        return action;
    }

    /**
     * Operation to be applied.
     * Supported values:
     * <ul>
     *     <li>{@link Action#CHECKSUM CHECKSUM}: Calculate checksum for backup
     *         files
     *     <li>{@link Action#DDL_ONLY DDL_ONLY}: Only save the DDL, do not
     *         backup table data
     *     <li>{@link Action#MAX_INCREMENTAL_BACKUPS_TO_KEEP
     *         MAX_INCREMENTAL_BACKUPS_TO_KEEP}: Maximum number of incremental
     *         backups to keep
     *     <li>{@link Action#MERGE MERGE}: Merges all backup instances and
     *         creates a single full backup
     *     <li>{@link Action#PURGE PURGE}: Purges backup instances
     * </ul>
     *
     * @param action  The new value for {@code action}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterBackupRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * Action specific argument.
     *
     * @return The current value of {@code value}.
     */
    public String getValue() {
        return value;
    }

    /**
     * Action specific argument.
     *
     * @param value  The new value for {@code value}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterBackupRequest setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    /**
     * Datasink where backup will be stored.
     *
     * @return The current value of {@code datasinkName}.
     */
    public String getDatasinkName() {
        return datasinkName;
    }

    /**
     * Datasink where backup will be stored.
     *
     * @param datasinkName  The new value for {@code datasinkName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterBackupRequest setDatasinkName(String datasinkName) {
        this.datasinkName = (datasinkName == null) ? "" : datasinkName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMMENT COMMENT}: Comments to store with the new
     *         backup instance
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of backup changes.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COMMENT COMMENT}: Comments to store with the new
     *         backup instance
     *     <li>{@link Options#DRY_RUN DRY_RUN}: Dry run of backup changes.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FALSE FALSE}
     *             <li>{@link Options#TRUE TRUE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterBackupRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.backupName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.datasinkName;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.backupName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.datasinkName = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterBackupRequest that = (AlterBackupRequest)obj;

        return ( this.backupName.equals( that.backupName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.datasinkName.equals( that.datasinkName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "backupName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.backupName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasinkName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasinkName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.backupName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.datasinkName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
