/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#uploadFilesFromurl(UploadFilesFromurlRequest)
 * GPUdb.uploadFilesFromurl}.
 * <p>
 * Uploads one or more files to <a href="../../../../../../tools/kifs/"
 * target="_top">KiFS</a>.
 * <p>
 * Each file path must reside in a top-level KiFS directory, i.e. one of the
 * directories listed in {@link
 * com.gpudb.GPUdb#showDirectories(ShowDirectoriesRequest)
 * GPUdb.showDirectories}. The user must have write permission on the
 * directory. Nested directories are permitted in file name paths. Directories
 * are delineated with the directory separator of '/'.  For example, given the
 * file path '/a/b/c/d.txt', 'a' must be a KiFS directory.
 * <p>
 * These characters are allowed in file name paths: letters, numbers, spaces,
 * the path delimiter of '/', and the characters: '.' '-' ':' '[' ']' '(' ')'
 * '#' '='.
 */
public class UploadFilesFromurlRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("UploadFilesFromurlRequest")
            .namespace("com.gpudb")
            .fields()
                .name("fileNames").type().array().items().stringType().noDefault()
                .name("urls").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private List<String> fileNames;
    private List<String> urls;
    private Map<String, String> options;

    /**
     * Constructs an UploadFilesFromurlRequest object with default parameters.
     */
    public UploadFilesFromurlRequest() {
        fileNames = new ArrayList<>();
        urls = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an UploadFilesFromurlRequest object with the specified
     * parameters.
     *
     * @param fileNames  An array of full file name paths to be used for the
     *                   files uploaded to KiFS. File names may have any number
     *                   of nested directories in their paths, but the
     *                   top-level directory must be an existing KiFS
     *                   directory. Each file must reside in or under a
     *                   top-level directory. A full file name path cannot be
     *                   larger than 1024 characters.
     * @param urls  List of URLs to upload, for each respective file in {@code
     *              fileNames}.
     * @param options  Optional parameters. The default value is an empty
     *                 {@link Map}.
     */
    public UploadFilesFromurlRequest(List<String> fileNames, List<String> urls, Map<String, String> options) {
        this.fileNames = (fileNames == null) ? new ArrayList<String>() : fileNames;
        this.urls = (urls == null) ? new ArrayList<String>() : urls;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * An array of full file name paths to be used for the files uploaded to
     * KiFS. File names may have any number of nested directories in their
     * paths, but the top-level directory must be an existing KiFS directory.
     * Each file must reside in or under a top-level directory. A full file
     * name path cannot be larger than 1024 characters.
     *
     * @return The current value of {@code fileNames}.
     */
    public List<String> getFileNames() {
        return fileNames;
    }

    /**
     * An array of full file name paths to be used for the files uploaded to
     * KiFS. File names may have any number of nested directories in their
     * paths, but the top-level directory must be an existing KiFS directory.
     * Each file must reside in or under a top-level directory. A full file
     * name path cannot be larger than 1024 characters.
     *
     * @param fileNames  The new value for {@code fileNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public UploadFilesFromurlRequest setFileNames(List<String> fileNames) {
        this.fileNames = (fileNames == null) ? new ArrayList<String>() : fileNames;
        return this;
    }

    /**
     * List of URLs to upload, for each respective file in {@link
     * #getFileNames() fileNames}.
     *
     * @return The current value of {@code urls}.
     */
    public List<String> getUrls() {
        return urls;
    }

    /**
     * List of URLs to upload, for each respective file in {@link
     * #getFileNames() fileNames}.
     *
     * @param urls  The new value for {@code urls}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public UploadFilesFromurlRequest setUrls(List<String> urls) {
        this.urls = (urls == null) ? new ArrayList<String>() : urls;
        return this;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public UploadFilesFromurlRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.fileNames;

            case 1:
                return this.urls;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.fileNames = (List<String>)value;
                break;

            case 1:
                this.urls = (List<String>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        UploadFilesFromurlRequest that = (UploadFilesFromurlRequest)obj;

        return ( this.fileNames.equals( that.fileNames )
                 && this.urls.equals( that.urls )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "fileNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.fileNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "urls" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.urls ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.fileNames.hashCode();
        hashCode = (31 * hashCode) + this.urls.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
