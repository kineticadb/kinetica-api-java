/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#insertRecordsRaw(RawInsertRecordsRequest)
 * GPUdb.insertRecordsRaw}.
 * <p>
 * Adds multiple records to the specified table. The operation is synchronous,
 * meaning that a response will not be returned until all the records are fully
 * inserted and available. The response payload provides the counts of the
 * number of records actually inserted and/or updated, and can provide the
 * unique identifier of each added record.
 * <p>
 * The {@link #getOptions() options} parameter can be used to customize this
 * function's behavior.
 * <p>
 * The {@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} option
 * specifies the record collision policy for inserting into a table with a <a
 * href="../../../../../../concepts/tables/#primary-keys" target="_top">primary
 * key</a>, but is ignored if no primary key exists.
 * <p>
 * The {@link Options#RETURN_RECORD_IDS RETURN_RECORD_IDS} option indicates
 * that the database should return the unique identifiers of inserted records.
 */
public class RawInsertRecordsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("RawInsertRecordsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("list").type().array().items().bytesType().noDefault()
                .name("listStr").type().array().items().stringType().noDefault()
                .name("listEncoding").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link RawInsertRecordsRequest}
     * parameter {@link #getListEncoding() listEncoding}.
     * <p>
     * The encoding of the records to be inserted.
     */
    public static final class ListEncoding {
        public static final String BINARY = "binary";
        public static final String JSON = "json";

        private ListEncoding() {  }
    }

    /**
     * A set of string constants for the {@link RawInsertRecordsRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Specifies the record collision policy for inserting into a table
         * with a <a href="../../../../../../concepts/tables/#primary-keys"
         * target="_top">primary key</a>. If set to {@link Options#TRUE TRUE},
         * any existing table record with primary key values that match those
         * of a record being inserted will be replaced by that new record (the
         * new data will be "upserted"). If set to {@link Options#FALSE FALSE},
         * any existing table record with primary key values that match those
         * of a record being inserted will remain unchanged, while the new
         * record will be rejected and the error handled as determined by
         * {@link Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}, {@link
         * Options#ALLOW_PARTIAL_BATCH ALLOW_PARTIAL_BATCH}, & {@link
         * Options#RETURN_INDIVIDUAL_ERRORS RETURN_INDIVIDUAL_ERRORS}.  If the
         * specified table does not have a primary key, then this option has no
         * effect.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: Upsert new records when primary
         *         keys match existing records
         *     <li>{@link Options#FALSE FALSE}: Reject new records when primary
         *         keys match existing records
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String UPDATE_ON_EXISTING_PK = "update_on_existing_pk";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Specifies the record collision error-suppression policy for
         * inserting into a table with a <a
         * href="../../../../../../concepts/tables/#primary-keys"
         * target="_top">primary key</a>, only used when not in upsert mode
         * (upsert mode is disabled when {@link Options#UPDATE_ON_EXISTING_PK
         * UPDATE_ON_EXISTING_PK} is {@link Options#FALSE FALSE}).  If set to
         * {@link Options#TRUE TRUE}, any record being inserted that is
         * rejected for having primary key values that match those of an
         * existing table record will be ignored with no error generated.  If
         * {@link Options#FALSE FALSE}, the rejection of any record for having
         * primary key values matching an existing record will result in an
         * error being reported, as determined by {@link
         * Options#ALLOW_PARTIAL_BATCH ALLOW_PARTIAL_BATCH} & {@link
         * Options#RETURN_INDIVIDUAL_ERRORS RETURN_INDIVIDUAL_ERRORS}.  If the
         * specified table does not have a primary key or if upsert mode is in
         * effect ({@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK}
         * is {@link Options#TRUE TRUE}), then this option has no effect.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: Ignore new records whose primary
         *         key values collide with those of existing records
         *     <li>{@link Options#FALSE FALSE}: Treat as errors any new records
         *         whose primary key values collide with those of existing
         *         records
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IGNORE_EXISTING_PK = "ignore_existing_pk";

        /**
         * The record with higher value for the column resolves the primary-key
         * insert conflict. The default value is ''.
         */
        public static final String PK_CONFLICT_PREDICATE_HIGHER = "pk_conflict_predicate_higher";

        /**
         * The record with lower value for the column resolves the primary-key
         * insert conflict. The default value is ''.
         */
        public static final String PK_CONFLICT_PREDICATE_LOWER = "pk_conflict_predicate_lower";

        /**
         * If {@link Options#TRUE TRUE} then return the internal record id
         * along for each inserted record.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RETURN_RECORD_IDS = "return_record_ids";

        /**
         * If set to {@link Options#TRUE TRUE}, any strings which are too long
         * for their target charN string columns will be truncated to fit.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String TRUNCATE_STRINGS = "truncate_strings";

        /**
         * If set to {@link Options#TRUE TRUE}, success will always be
         * returned, and any errors found will be included in the info map.
         * The "bad_record_indices" entry is a comma-separated list of bad
         * records (0-based).  And if so, there will also be an "error_N" entry
         * for each record with an error, where N is the index (0-based).
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RETURN_INDIVIDUAL_ERRORS = "return_individual_errors";

        /**
         * If set to {@link Options#TRUE TRUE}, all correct records will be
         * inserted and incorrect records will be rejected and reported.
         * Otherwise, the entire batch will be rejected if any records are
         * incorrect.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String ALLOW_PARTIAL_BATCH = "allow_partial_batch";

        /**
         * If set to {@link Options#TRUE TRUE}, no data will be saved and any
         * errors will be returned.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        private Options() {  }
    }

    private String tableName;
    private List<ByteBuffer> list;
    private List<String> listStr;
    private String listEncoding;
    private Map<String, String> options;

    /**
     * Constructs a RawInsertRecordsRequest object with default parameters.
     */
    public RawInsertRecordsRequest() {
        tableName = "";
        list = new ArrayList<>();
        listStr = new ArrayList<>();
        listEncoding = ListEncoding.BINARY;
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a RawInsertRecordsRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of table to which the records are to be added, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.  Must be an
     *                   existing table.
     * @param list  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@link
     *              ListEncoding#JSON JSON}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK}: Specifies the record
     *                         collision policy for inserting into a table with
     *                         a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>. If set to {@link
     *                         Options#TRUE TRUE}, any existing table record
     *                         with primary key values that match those of a
     *                         record being inserted will be replaced by that
     *                         new record (the new data will be "upserted"). If
     *                         set to {@link Options#FALSE FALSE}, any existing
     *                         table record with primary key values that match
     *                         those of a record being inserted will remain
     *                         unchanged, while the new record will be rejected
     *                         and the error handled as determined by {@link
     *                         Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK},
     *                         {@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH}, & {@link
     *                         Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}.  If the specified
     *                         table does not have a primary key, then this
     *                         option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Upsert new
     *                                 records when primary keys match existing
     *                                 records
     *                             <li>{@link Options#FALSE FALSE}: Reject new
     *                                 records when primary keys match existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}: Specifies the record
     *                         collision error-suppression policy for inserting
     *                         into a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>, only used when
     *                         not in upsert mode (upsert mode is disabled when
     *                         {@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE
     *                         FALSE}).  If set to {@link Options#TRUE TRUE},
     *                         any record being inserted that is rejected for
     *                         having primary key values that match those of an
     *                         existing table record will be ignored with no
     *                         error generated.  If {@link Options#FALSE
     *                         FALSE}, the rejection of any record for having
     *                         primary key values matching an existing record
     *                         will result in an error being reported, as
     *                         determined by {@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH} & {@link
     *                         Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}.  If the specified
     *                         table does not have a primary key or if upsert
     *                         mode is in effect ({@link
     *                         Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE
     *                         TRUE}), then this option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Ignore new
     *                                 records whose primary key values collide
     *                                 with those of existing records
     *                             <li>{@link Options#FALSE FALSE}: Treat as
     *                                 errors any new records whose primary key
     *                                 values collide with those of existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PK_CONFLICT_PREDICATE_HIGHER
     *                         PK_CONFLICT_PREDICATE_HIGHER}: The record with
     *                         higher value for the column resolves the
     *                         primary-key insert conflict. The default value
     *                         is ''.
     *                     <li>{@link Options#PK_CONFLICT_PREDICATE_LOWER
     *                         PK_CONFLICT_PREDICATE_LOWER}: The record with
     *                         lower value for the column resolves the
     *                         primary-key insert conflict. The default value
     *                         is ''.
     *                     <li>{@link Options#RETURN_RECORD_IDS
     *                         RETURN_RECORD_IDS}: If {@link Options#TRUE TRUE}
     *                         then return the internal record id along for
     *                         each inserted record.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#TRUNCATE_STRINGS
     *                         TRUNCATE_STRINGS}: If set to {@link Options#TRUE
     *                         TRUE}, any strings which are too long for their
     *                         target charN string columns will be truncated to
     *                         fit.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}: If set to {@link
     *                         Options#TRUE TRUE}, success will always be
     *                         returned, and any errors found will be included
     *                         in the info map.  The "bad_record_indices" entry
     *                         is a comma-separated list of bad records
     *                         (0-based).  And if so, there will also be an
     *                         "error_N" entry for each record with an error,
     *                         where N is the index (0-based).
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH}: If set to {@link
     *                         Options#TRUE TRUE}, all correct records will be
     *                         inserted and incorrect records will be rejected
     *                         and reported.  Otherwise, the entire batch will
     *                         be rejected if any records are incorrect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: If set to
     *                         {@link Options#TRUE TRUE}, no data will be saved
     *                         and any errors will be returned.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public RawInsertRecordsRequest(String tableName, List<ByteBuffer> list, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.list = (list == null) ? new ArrayList<ByteBuffer>() : list;
        this.listStr = new ArrayList<String>();
        this.listEncoding = ListEncoding.BINARY;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Constructs a RawInsertRecordsRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of table to which the records are to be added, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.  Must be an
     *                   existing table.
     * @param list  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@link
     *              ListEncoding#JSON JSON}.
     * @param listStr  An array of JSON encoded data for the records to be
     *                 added. All records must be of the same type as that of
     *                 the table. Empty array if {@code listEncoding} is {@link
     *                 ListEncoding#BINARY BINARY}.
     * @param listEncoding  The encoding of the records to be inserted.
     *                      Supported values:
     *                      <ul>
     *                          <li>{@link ListEncoding#BINARY BINARY}
     *                          <li>{@link ListEncoding#JSON JSON}
     *                      </ul>
     *                      The default value is {@link ListEncoding#BINARY
     *                      BINARY}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK}: Specifies the record
     *                         collision policy for inserting into a table with
     *                         a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>. If set to {@link
     *                         Options#TRUE TRUE}, any existing table record
     *                         with primary key values that match those of a
     *                         record being inserted will be replaced by that
     *                         new record (the new data will be "upserted"). If
     *                         set to {@link Options#FALSE FALSE}, any existing
     *                         table record with primary key values that match
     *                         those of a record being inserted will remain
     *                         unchanged, while the new record will be rejected
     *                         and the error handled as determined by {@link
     *                         Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK},
     *                         {@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH}, & {@link
     *                         Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}.  If the specified
     *                         table does not have a primary key, then this
     *                         option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Upsert new
     *                                 records when primary keys match existing
     *                                 records
     *                             <li>{@link Options#FALSE FALSE}: Reject new
     *                                 records when primary keys match existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}: Specifies the record
     *                         collision error-suppression policy for inserting
     *                         into a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>, only used when
     *                         not in upsert mode (upsert mode is disabled when
     *                         {@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE
     *                         FALSE}).  If set to {@link Options#TRUE TRUE},
     *                         any record being inserted that is rejected for
     *                         having primary key values that match those of an
     *                         existing table record will be ignored with no
     *                         error generated.  If {@link Options#FALSE
     *                         FALSE}, the rejection of any record for having
     *                         primary key values matching an existing record
     *                         will result in an error being reported, as
     *                         determined by {@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH} & {@link
     *                         Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}.  If the specified
     *                         table does not have a primary key or if upsert
     *                         mode is in effect ({@link
     *                         Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE
     *                         TRUE}), then this option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Ignore new
     *                                 records whose primary key values collide
     *                                 with those of existing records
     *                             <li>{@link Options#FALSE FALSE}: Treat as
     *                                 errors any new records whose primary key
     *                                 values collide with those of existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PK_CONFLICT_PREDICATE_HIGHER
     *                         PK_CONFLICT_PREDICATE_HIGHER}: The record with
     *                         higher value for the column resolves the
     *                         primary-key insert conflict. The default value
     *                         is ''.
     *                     <li>{@link Options#PK_CONFLICT_PREDICATE_LOWER
     *                         PK_CONFLICT_PREDICATE_LOWER}: The record with
     *                         lower value for the column resolves the
     *                         primary-key insert conflict. The default value
     *                         is ''.
     *                     <li>{@link Options#RETURN_RECORD_IDS
     *                         RETURN_RECORD_IDS}: If {@link Options#TRUE TRUE}
     *                         then return the internal record id along for
     *                         each inserted record.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#TRUNCATE_STRINGS
     *                         TRUNCATE_STRINGS}: If set to {@link Options#TRUE
     *                         TRUE}, any strings which are too long for their
     *                         target charN string columns will be truncated to
     *                         fit.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#RETURN_INDIVIDUAL_ERRORS
     *                         RETURN_INDIVIDUAL_ERRORS}: If set to {@link
     *                         Options#TRUE TRUE}, success will always be
     *                         returned, and any errors found will be included
     *                         in the info map.  The "bad_record_indices" entry
     *                         is a comma-separated list of bad records
     *                         (0-based).  And if so, there will also be an
     *                         "error_N" entry for each record with an error,
     *                         where N is the index (0-based).
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#ALLOW_PARTIAL_BATCH
     *                         ALLOW_PARTIAL_BATCH}: If set to {@link
     *                         Options#TRUE TRUE}, all correct records will be
     *                         inserted and incorrect records will be rejected
     *                         and reported.  Otherwise, the entire batch will
     *                         be rejected if any records are incorrect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: If set to
     *                         {@link Options#TRUE TRUE}, no data will be saved
     *                         and any errors will be returned.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public RawInsertRecordsRequest(String tableName, List<ByteBuffer> list, List<String> listStr, String listEncoding, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.list = (list == null) ? new ArrayList<ByteBuffer>() : list;
        this.listStr = (listStr == null) ? new ArrayList<String>() : listStr;
        this.listEncoding = (listEncoding == null) ? ListEncoding.BINARY : listEncoding;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of table to which the records are to be added, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of table to which the records are to be added, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawInsertRecordsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * An array of binary-encoded data for the records to be added. All records
     * must be of the same type as that of the table. Empty array if {@link
     * #getListEncoding() listEncoding} is {@link ListEncoding#JSON JSON}.
     *
     * @return The current value of {@code list}.
     */
    public List<ByteBuffer> getList() {
        return list;
    }

    /**
     * An array of binary-encoded data for the records to be added. All records
     * must be of the same type as that of the table. Empty array if {@link
     * #getListEncoding() listEncoding} is {@link ListEncoding#JSON JSON}.
     *
     * @param list  The new value for {@code list}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawInsertRecordsRequest setList(List<ByteBuffer> list) {
        this.list = (list == null) ? new ArrayList<ByteBuffer>() : list;
        return this;
    }

    /**
     * An array of JSON encoded data for the records to be added. All records
     * must be of the same type as that of the table. Empty array if {@link
     * #getListEncoding() listEncoding} is {@link ListEncoding#BINARY BINARY}.
     *
     * @return The current value of {@code listStr}.
     */
    public List<String> getListStr() {
        return listStr;
    }

    /**
     * An array of JSON encoded data for the records to be added. All records
     * must be of the same type as that of the table. Empty array if {@link
     * #getListEncoding() listEncoding} is {@link ListEncoding#BINARY BINARY}.
     *
     * @param listStr  The new value for {@code listStr}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawInsertRecordsRequest setListStr(List<String> listStr) {
        this.listStr = (listStr == null) ? new ArrayList<String>() : listStr;
        return this;
    }

    /**
     * The encoding of the records to be inserted.
     * Supported values:
     * <ul>
     *     <li>{@link ListEncoding#BINARY BINARY}
     *     <li>{@link ListEncoding#JSON JSON}
     * </ul>
     * The default value is {@link ListEncoding#BINARY BINARY}.
     *
     * @return The current value of {@code listEncoding}.
     */
    public String getListEncoding() {
        return listEncoding;
    }

    /**
     * The encoding of the records to be inserted.
     * Supported values:
     * <ul>
     *     <li>{@link ListEncoding#BINARY BINARY}
     *     <li>{@link ListEncoding#JSON JSON}
     * </ul>
     * The default value is {@link ListEncoding#BINARY BINARY}.
     *
     * @param listEncoding  The new value for {@code listEncoding}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawInsertRecordsRequest setListEncoding(String listEncoding) {
        this.listEncoding = (listEncoding == null) ? ListEncoding.BINARY : listEncoding;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK}:
     *         Specifies the record collision policy for inserting into a table
     *         with a <a href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>. If set to {@link Options#TRUE
     *         TRUE}, any existing table record with primary key values that
     *         match those of a record being inserted will be replaced by that
     *         new record (the new data will be "upserted"). If set to {@link
     *         Options#FALSE FALSE}, any existing table record with primary key
     *         values that match those of a record being inserted will remain
     *         unchanged, while the new record will be rejected and the error
     *         handled as determined by {@link Options#IGNORE_EXISTING_PK
     *         IGNORE_EXISTING_PK}, {@link Options#ALLOW_PARTIAL_BATCH
     *         ALLOW_PARTIAL_BATCH}, & {@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}.  If the specified table does not have
     *         a primary key, then this option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Upsert new records when
     *                 primary keys match existing records
     *             <li>{@link Options#FALSE FALSE}: Reject new records when
     *                 primary keys match existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}: Specifies
     *         the record collision error-suppression policy for inserting into
     *         a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>, only used when not in upsert mode
     *         (upsert mode is disabled when {@link
     *         Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} is {@link
     *         Options#FALSE FALSE}).  If set to {@link Options#TRUE TRUE}, any
     *         record being inserted that is rejected for having primary key
     *         values that match those of an existing table record will be
     *         ignored with no error generated.  If {@link Options#FALSE
     *         FALSE}, the rejection of any record for having primary key
     *         values matching an existing record will result in an error being
     *         reported, as determined by {@link Options#ALLOW_PARTIAL_BATCH
     *         ALLOW_PARTIAL_BATCH} & {@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}.  If the specified table does not have
     *         a primary key or if upsert mode is in effect ({@link
     *         Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} is {@link
     *         Options#TRUE TRUE}), then this option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Ignore new records whose
     *                 primary key values collide with those of existing
     *                 records
     *             <li>{@link Options#FALSE FALSE}: Treat as errors any new
     *                 records whose primary key values collide with those of
     *                 existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PK_CONFLICT_PREDICATE_HIGHER
     *         PK_CONFLICT_PREDICATE_HIGHER}: The record with higher value for
     *         the column resolves the primary-key insert conflict. The default
     *         value is ''.
     *     <li>{@link Options#PK_CONFLICT_PREDICATE_LOWER
     *         PK_CONFLICT_PREDICATE_LOWER}: The record with lower value for
     *         the column resolves the primary-key insert conflict. The default
     *         value is ''.
     *     <li>{@link Options#RETURN_RECORD_IDS RETURN_RECORD_IDS}: If {@link
     *         Options#TRUE TRUE} then return the internal record id along for
     *         each inserted record.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TRUNCATE_STRINGS TRUNCATE_STRINGS}: If set to
     *         {@link Options#TRUE TRUE}, any strings which are too long for
     *         their target charN string columns will be truncated to fit.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}: If set to {@link Options#TRUE TRUE},
     *         success will always be returned, and any errors found will be
     *         included in the info map.  The "bad_record_indices" entry is a
     *         comma-separated list of bad records (0-based).  And if so, there
     *         will also be an "error_N" entry for each record with an error,
     *         where N is the index (0-based).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#ALLOW_PARTIAL_BATCH ALLOW_PARTIAL_BATCH}: If set
     *         to {@link Options#TRUE TRUE}, all correct records will be
     *         inserted and incorrect records will be rejected and reported.
     *         Otherwise, the entire batch will be rejected if any records are
     *         incorrect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, no data will be saved and any errors will be returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK}:
     *         Specifies the record collision policy for inserting into a table
     *         with a <a href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>. If set to {@link Options#TRUE
     *         TRUE}, any existing table record with primary key values that
     *         match those of a record being inserted will be replaced by that
     *         new record (the new data will be "upserted"). If set to {@link
     *         Options#FALSE FALSE}, any existing table record with primary key
     *         values that match those of a record being inserted will remain
     *         unchanged, while the new record will be rejected and the error
     *         handled as determined by {@link Options#IGNORE_EXISTING_PK
     *         IGNORE_EXISTING_PK}, {@link Options#ALLOW_PARTIAL_BATCH
     *         ALLOW_PARTIAL_BATCH}, & {@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}.  If the specified table does not have
     *         a primary key, then this option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Upsert new records when
     *                 primary keys match existing records
     *             <li>{@link Options#FALSE FALSE}: Reject new records when
     *                 primary keys match existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}: Specifies
     *         the record collision error-suppression policy for inserting into
     *         a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>, only used when not in upsert mode
     *         (upsert mode is disabled when {@link
     *         Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} is {@link
     *         Options#FALSE FALSE}).  If set to {@link Options#TRUE TRUE}, any
     *         record being inserted that is rejected for having primary key
     *         values that match those of an existing table record will be
     *         ignored with no error generated.  If {@link Options#FALSE
     *         FALSE}, the rejection of any record for having primary key
     *         values matching an existing record will result in an error being
     *         reported, as determined by {@link Options#ALLOW_PARTIAL_BATCH
     *         ALLOW_PARTIAL_BATCH} & {@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}.  If the specified table does not have
     *         a primary key or if upsert mode is in effect ({@link
     *         Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} is {@link
     *         Options#TRUE TRUE}), then this option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Ignore new records whose
     *                 primary key values collide with those of existing
     *                 records
     *             <li>{@link Options#FALSE FALSE}: Treat as errors any new
     *                 records whose primary key values collide with those of
     *                 existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PK_CONFLICT_PREDICATE_HIGHER
     *         PK_CONFLICT_PREDICATE_HIGHER}: The record with higher value for
     *         the column resolves the primary-key insert conflict. The default
     *         value is ''.
     *     <li>{@link Options#PK_CONFLICT_PREDICATE_LOWER
     *         PK_CONFLICT_PREDICATE_LOWER}: The record with lower value for
     *         the column resolves the primary-key insert conflict. The default
     *         value is ''.
     *     <li>{@link Options#RETURN_RECORD_IDS RETURN_RECORD_IDS}: If {@link
     *         Options#TRUE TRUE} then return the internal record id along for
     *         each inserted record.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TRUNCATE_STRINGS TRUNCATE_STRINGS}: If set to
     *         {@link Options#TRUE TRUE}, any strings which are too long for
     *         their target charN string columns will be truncated to fit.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RETURN_INDIVIDUAL_ERRORS
     *         RETURN_INDIVIDUAL_ERRORS}: If set to {@link Options#TRUE TRUE},
     *         success will always be returned, and any errors found will be
     *         included in the info map.  The "bad_record_indices" entry is a
     *         comma-separated list of bad records (0-based).  And if so, there
     *         will also be an "error_N" entry for each record with an error,
     *         where N is the index (0-based).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#ALLOW_PARTIAL_BATCH ALLOW_PARTIAL_BATCH}: If set
     *         to {@link Options#TRUE TRUE}, all correct records will be
     *         inserted and incorrect records will be rejected and reported.
     *         Otherwise, the entire batch will be rejected if any records are
     *         incorrect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, no data will be saved and any errors will be returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawInsertRecordsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.list;

            case 2:
                return this.listStr;

            case 3:
                return this.listEncoding;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.list = (List<ByteBuffer>)value;
                break;

            case 2:
                this.listStr = (List<String>)value;
                break;

            case 3:
                this.listEncoding = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        RawInsertRecordsRequest that = (RawInsertRecordsRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.list.equals( that.list )
                 && this.listStr.equals( that.listStr )
                 && this.listEncoding.equals( that.listEncoding )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "list" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.list ) );
        builder.append( ", " );
        builder.append( gd.toString( "listStr" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.listStr ) );
        builder.append( ", " );
        builder.append( gd.toString( "listEncoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.listEncoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.list.hashCode();
        hashCode = (31 * hashCode) + this.listStr.hashCode();
        hashCode = (31 * hashCode) + this.listEncoding.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
