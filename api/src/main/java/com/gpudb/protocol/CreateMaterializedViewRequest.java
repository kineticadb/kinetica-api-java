/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createMaterializedView(CreateMaterializedViewRequest)
 * GPUdb.createMaterializedView}.
 * <p>
 * Initiates the process of creating a materialized view, reserving the view's
 * name to prevent other views or tables from being created with that name.
 * <p>
 * For materialized view details and examples, see <a
 * href="../../../../../../concepts/materialized_views/"
 * target="_top">Materialized Views</a>.
 * <p>
 * The response contains {@link
 * com.gpudb.protocol.CreateMaterializedViewResponse#getViewId() viewId}, which
 * is used to tag each subsequent operation (projection, union, aggregation,
 * filter, or join) that will compose the view.
 */
public class CreateMaterializedViewRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateMaterializedViewRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateMaterializedViewRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * [DEPRECATED--please specify the containing schema for the
         * materialized view as part of {@link #getTableName() tableName} and
         * use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of a
         * schema which is to contain the newly created view. If the schema
         * provided is non-existent, it will be automatically created.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * User name to use to run the refresh job
         */
        public static final String EXECUTE_AS = "execute_as";

        /**
         * Sets startup materialized view rebuild scheme.
         * Supported values:
         * <ul>
         *     <li>{@link Options#ALWAYS ALWAYS}: Rebuild as many materialized
         *         views as possible before accepting requests.
         *     <li>{@link Options#LAZY LAZY}: Rebuild the necessary
         *         materialized views at start, and load the remainder lazily.
         *     <li>{@link Options#ON_DEMAND ON_DEMAND}: Rebuild materialized
         *         views as requests use them.
         *     <li>{@link Options#SYSTEM SYSTEM}: Rebuild materialized views
         *         using the system-configured default.
         * </ul>
         * The default value is {@link Options#SYSTEM SYSTEM}.
         */
        public static final String BUILD_MATERIALIZED_VIEW_POLICY = "build_materialized_view_policy";

        /**
         * Rebuild as many materialized views as possible before accepting
         * requests.
         */
        public static final String ALWAYS = "always";

        /**
         * Rebuild the necessary materialized views at start, and load the
         * remainder lazily.
         */
        public static final String LAZY = "lazy";

        /**
         * Rebuild materialized views as requests use them.
         */
        public static final String ON_DEMAND = "on_demand";

        /**
         * Rebuild materialized views using the system-configured default.
         */
        public static final String SYSTEM = "system";

        /**
         * If {@link Options#TRUE TRUE}, then the materialized view specified
         * in {@link #getTableName() tableName} will be persisted and will not
         * expire unless a {@link Options#TTL TTL} is specified.   If {@link
         * Options#FALSE FALSE}, then the materialized view will be an
         * in-memory table and will expire unless a {@link Options#TTL TTL} is
         * specified otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String PERSIST = "persist";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Sets the future time-offset(in seconds) at which periodic refresh
         * stops
         */
        public static final String REFRESH_SPAN = "refresh_span";

        /**
         * When {@link Options#REFRESH_METHOD REFRESH_METHOD} is {@link
         * Options#PERIODIC PERIODIC}, specifies the time at which a periodic
         * refresh is stopped.  Value is a datetime string with format
         * 'YYYY-MM-DD HH:MM:SS'.
         */
        public static final String REFRESH_STOP_TIME = "refresh_stop_time";

        /**
         * Method by which the join can be refreshed when the data in
         * underlying member tables have changed.
         * Supported values:
         * <ul>
         *     <li>{@link Options#MANUAL MANUAL}: Refresh only occurs when
         *         manually requested by calling {@link
         *         com.gpudb.GPUdb#alterTable(AlterTableRequest)
         *         GPUdb.alterTable} with an 'action' of 'refresh'
         *     <li>{@link Options#ON_QUERY ON_QUERY}: Refresh any time the view
         *         is queried.
         *     <li>{@link Options#ON_CHANGE ON_CHANGE}: If possible,
         *         incrementally refresh (refresh just those records added)
         *         whenever an insert, update, delete or refresh of input table
         *         is done.  A full refresh is done if an incremental refresh
         *         is not possible.
         *     <li>{@link Options#PERIODIC PERIODIC}: Refresh table
         *         periodically at rate specified by {@link
         *         Options#REFRESH_PERIOD REFRESH_PERIOD}
         * </ul>
         * The default value is {@link Options#MANUAL MANUAL}.
         */
        public static final String REFRESH_METHOD = "refresh_method";

        /**
         * Refresh only occurs when manually requested by calling {@link
         * com.gpudb.GPUdb#alterTable(AlterTableRequest) GPUdb.alterTable} with
         * an 'action' of 'refresh'
         */
        public static final String MANUAL = "manual";

        /**
         * Refresh any time the view is queried.
         */
        public static final String ON_QUERY = "on_query";

        /**
         * If possible, incrementally refresh (refresh just those records
         * added) whenever an insert, update, delete or refresh of input table
         * is done.  A full refresh is done if an incremental refresh is not
         * possible.
         */
        public static final String ON_CHANGE = "on_change";

        /**
         * Refresh table periodically at rate specified by {@link
         * Options#REFRESH_PERIOD REFRESH_PERIOD}
         */
        public static final String PERIODIC = "periodic";

        /**
         * When {@link Options#REFRESH_METHOD REFRESH_METHOD} is {@link
         * Options#PERIODIC PERIODIC}, specifies the period in seconds at which
         * refresh occurs
         */
        public static final String REFRESH_PERIOD = "refresh_period";

        /**
         * When {@link Options#REFRESH_METHOD REFRESH_METHOD} is {@link
         * Options#PERIODIC PERIODIC}, specifies the first time at which a
         * refresh is to be done.  Value is a datetime string with format
         * 'YYYY-MM-DD HH:MM:SS'.
         */
        public static final String REFRESH_START_TIME = "refresh_start_time";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the table specified in {@link
         * #getTableName() tableName}.
         */
        public static final String TTL = "ttl";

        private Options() {  }
    }

    private String tableName;
    private Map<String, String> options;

    /**
     * Constructs a CreateMaterializedViewRequest object with default
     * parameters.
     */
    public CreateMaterializedViewRequest() {
        tableName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateMaterializedViewRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the table to be created that is the top-level
     *                   table of the materialized view, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a> and meeting <a
     *                   href="../../../../../../concepts/tables/#table-naming-criteria"
     *                   target="_top">table naming criteria</a>.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema for the materialized view as part of
     *                         {@code tableName} and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema which is to
     *                         contain the newly created view. If the schema
     *                         provided is non-existent, it will be
     *                         automatically created.
     *                     <li>{@link Options#EXECUTE_AS EXECUTE_AS}: User name
     *                         to use to run the refresh job
     *                     <li>{@link Options#BUILD_MATERIALIZED_VIEW_POLICY
     *                         BUILD_MATERIALIZED_VIEW_POLICY}: Sets startup
     *                         materialized view rebuild scheme.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#ALWAYS ALWAYS}: Rebuild
     *                                 as many materialized views as possible
     *                                 before accepting requests.
     *                             <li>{@link Options#LAZY LAZY}: Rebuild the
     *                                 necessary materialized views at start,
     *                                 and load the remainder lazily.
     *                             <li>{@link Options#ON_DEMAND ON_DEMAND}:
     *                                 Rebuild materialized views as requests
     *                                 use them.
     *                             <li>{@link Options#SYSTEM SYSTEM}: Rebuild
     *                                 materialized views using the
     *                                 system-configured default.
     *                         </ul>
     *                         The default value is {@link Options#SYSTEM
     *                         SYSTEM}.
     *                     <li>{@link Options#PERSIST PERSIST}: If {@link
     *                         Options#TRUE TRUE}, then the materialized view
     *                         specified in {@code tableName} will be persisted
     *                         and will not expire unless a {@link Options#TTL
     *                         TTL} is specified.   If {@link Options#FALSE
     *                         FALSE}, then the materialized view will be an
     *                         in-memory table and will expire unless a {@link
     *                         Options#TTL TTL} is specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#REFRESH_SPAN REFRESH_SPAN}: Sets
     *                         the future time-offset(in seconds) at which
     *                         periodic refresh stops
     *                     <li>{@link Options#REFRESH_STOP_TIME
     *                         REFRESH_STOP_TIME}: When {@link
     *                         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *                         Options#PERIODIC PERIODIC}, specifies the time
     *                         at which a periodic refresh is stopped.  Value
     *                         is a datetime string with format 'YYYY-MM-DD
     *                         HH:MM:SS'.
     *                     <li>{@link Options#REFRESH_METHOD REFRESH_METHOD}:
     *                         Method by which the join can be refreshed when
     *                         the data in underlying member tables have
     *                         changed.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#MANUAL MANUAL}: Refresh
     *                                 only occurs when manually requested by
     *                                 calling {@link
     *                                 com.gpudb.GPUdb#alterTable(AlterTableRequest)
     *                                 GPUdb.alterTable} with an 'action' of
     *                                 'refresh'
     *                             <li>{@link Options#ON_QUERY ON_QUERY}:
     *                                 Refresh any time the view is queried.
     *                             <li>{@link Options#ON_CHANGE ON_CHANGE}: If
     *                                 possible, incrementally refresh (refresh
     *                                 just those records added) whenever an
     *                                 insert, update, delete or refresh of
     *                                 input table is done.  A full refresh is
     *                                 done if an incremental refresh is not
     *                                 possible.
     *                             <li>{@link Options#PERIODIC PERIODIC}:
     *                                 Refresh table periodically at rate
     *                                 specified by {@link
     *                                 Options#REFRESH_PERIOD REFRESH_PERIOD}
     *                         </ul>
     *                         The default value is {@link Options#MANUAL
     *                         MANUAL}.
     *                     <li>{@link Options#REFRESH_PERIOD REFRESH_PERIOD}:
     *                         When {@link Options#REFRESH_METHOD
     *                         REFRESH_METHOD} is {@link Options#PERIODIC
     *                         PERIODIC}, specifies the period in seconds at
     *                         which refresh occurs
     *                     <li>{@link Options#REFRESH_START_TIME
     *                         REFRESH_START_TIME}: When {@link
     *                         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *                         Options#PERIODIC PERIODIC}, specifies the first
     *                         time at which a refresh is to be done.  Value is
     *                         a datetime string with format 'YYYY-MM-DD
     *                         HH:MM:SS'.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the table specified in
     *                         {@code tableName}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateMaterializedViewRequest(String tableName, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table to be created that is the top-level table of the
     * materialized view, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table to be created that is the top-level table of the
     * materialized view, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateMaterializedViewRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the
     *         materialized view as part of {@link #getTableName() tableName}
     *         and use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the newly created view. If the
     *         schema provided is non-existent, it will be automatically
     *         created.
     *     <li>{@link Options#EXECUTE_AS EXECUTE_AS}: User name to use to run
     *         the refresh job
     *     <li>{@link Options#BUILD_MATERIALIZED_VIEW_POLICY
     *         BUILD_MATERIALIZED_VIEW_POLICY}: Sets startup materialized view
     *         rebuild scheme.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Rebuild as many
     *                 materialized views as possible before accepting
     *                 requests.
     *             <li>{@link Options#LAZY LAZY}: Rebuild the necessary
     *                 materialized views at start, and load the remainder
     *                 lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Rebuild
     *                 materialized views as requests use them.
     *             <li>{@link Options#SYSTEM SYSTEM}: Rebuild materialized
     *                 views using the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the materialized view specified in {@link #getTableName()
     *         tableName} will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the materialized view will be an in-memory table and will
     *         expire unless a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#REFRESH_SPAN REFRESH_SPAN}: Sets the future
     *         time-offset(in seconds) at which periodic refresh stops
     *     <li>{@link Options#REFRESH_STOP_TIME REFRESH_STOP_TIME}: When {@link
     *         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the time at which a
     *         periodic refresh is stopped.  Value is a datetime string with
     *         format 'YYYY-MM-DD HH:MM:SS'.
     *     <li>{@link Options#REFRESH_METHOD REFRESH_METHOD}: Method by which
     *         the join can be refreshed when the data in underlying member
     *         tables have changed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#MANUAL MANUAL}: Refresh only occurs when
     *                 manually requested by calling {@link
     *                 com.gpudb.GPUdb#alterTable(AlterTableRequest)
     *                 GPUdb.alterTable} with an 'action' of 'refresh'
     *             <li>{@link Options#ON_QUERY ON_QUERY}: Refresh any time the
     *                 view is queried.
     *             <li>{@link Options#ON_CHANGE ON_CHANGE}: If possible,
     *                 incrementally refresh (refresh just those records added)
     *                 whenever an insert, update, delete or refresh of input
     *                 table is done.  A full refresh is done if an incremental
     *                 refresh is not possible.
     *             <li>{@link Options#PERIODIC PERIODIC}: Refresh table
     *                 periodically at rate specified by {@link
     *                 Options#REFRESH_PERIOD REFRESH_PERIOD}
     *         </ul>
     *         The default value is {@link Options#MANUAL MANUAL}.
     *     <li>{@link Options#REFRESH_PERIOD REFRESH_PERIOD}: When {@link
     *         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the period in seconds at
     *         which refresh occurs
     *     <li>{@link Options#REFRESH_START_TIME REFRESH_START_TIME}: When
     *         {@link Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the first time at which a
     *         refresh is to be done.  Value is a datetime string with format
     *         'YYYY-MM-DD HH:MM:SS'.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link #getTableName() tableName}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the
     *         materialized view as part of {@link #getTableName() tableName}
     *         and use {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema which is to contain the newly created view. If the
     *         schema provided is non-existent, it will be automatically
     *         created.
     *     <li>{@link Options#EXECUTE_AS EXECUTE_AS}: User name to use to run
     *         the refresh job
     *     <li>{@link Options#BUILD_MATERIALIZED_VIEW_POLICY
     *         BUILD_MATERIALIZED_VIEW_POLICY}: Sets startup materialized view
     *         rebuild scheme.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#ALWAYS ALWAYS}: Rebuild as many
     *                 materialized views as possible before accepting
     *                 requests.
     *             <li>{@link Options#LAZY LAZY}: Rebuild the necessary
     *                 materialized views at start, and load the remainder
     *                 lazily.
     *             <li>{@link Options#ON_DEMAND ON_DEMAND}: Rebuild
     *                 materialized views as requests use them.
     *             <li>{@link Options#SYSTEM SYSTEM}: Rebuild materialized
     *                 views using the system-configured default.
     *         </ul>
     *         The default value is {@link Options#SYSTEM SYSTEM}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the materialized view specified in {@link #getTableName()
     *         tableName} will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the materialized view will be an in-memory table and will
     *         expire unless a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#REFRESH_SPAN REFRESH_SPAN}: Sets the future
     *         time-offset(in seconds) at which periodic refresh stops
     *     <li>{@link Options#REFRESH_STOP_TIME REFRESH_STOP_TIME}: When {@link
     *         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the time at which a
     *         periodic refresh is stopped.  Value is a datetime string with
     *         format 'YYYY-MM-DD HH:MM:SS'.
     *     <li>{@link Options#REFRESH_METHOD REFRESH_METHOD}: Method by which
     *         the join can be refreshed when the data in underlying member
     *         tables have changed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#MANUAL MANUAL}: Refresh only occurs when
     *                 manually requested by calling {@link
     *                 com.gpudb.GPUdb#alterTable(AlterTableRequest)
     *                 GPUdb.alterTable} with an 'action' of 'refresh'
     *             <li>{@link Options#ON_QUERY ON_QUERY}: Refresh any time the
     *                 view is queried.
     *             <li>{@link Options#ON_CHANGE ON_CHANGE}: If possible,
     *                 incrementally refresh (refresh just those records added)
     *                 whenever an insert, update, delete or refresh of input
     *                 table is done.  A full refresh is done if an incremental
     *                 refresh is not possible.
     *             <li>{@link Options#PERIODIC PERIODIC}: Refresh table
     *                 periodically at rate specified by {@link
     *                 Options#REFRESH_PERIOD REFRESH_PERIOD}
     *         </ul>
     *         The default value is {@link Options#MANUAL MANUAL}.
     *     <li>{@link Options#REFRESH_PERIOD REFRESH_PERIOD}: When {@link
     *         Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the period in seconds at
     *         which refresh occurs
     *     <li>{@link Options#REFRESH_START_TIME REFRESH_START_TIME}: When
     *         {@link Options#REFRESH_METHOD REFRESH_METHOD} is {@link
     *         Options#PERIODIC PERIODIC}, specifies the first time at which a
     *         refresh is to be done.  Value is a datetime string with format
     *         'YYYY-MM-DD HH:MM:SS'.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link #getTableName() tableName}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateMaterializedViewRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateMaterializedViewRequest that = (CreateMaterializedViewRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
