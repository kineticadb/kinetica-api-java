/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb;

import com.gpudb.protocol.*;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;

/**
 * Object that provides access to a specific GPUdb server. {@code GPUdb}
 * instances are thread safe and may be used from any number of threads
 * simultaneously.
 */
public class GPUdb extends GPUdbBase {

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using default options.  Note that these options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.  Can be a comma-separated
     *             string containing multiple full URLs, or a single URL.
     *             For example 'http://172.42.40.1:9191,,http://172.42.40.2:9191'.
     *             If a single URL is given, the given URL will be used as
     *             the primary URL.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(String url) throws GPUdbException {
        super(url, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using default options.  Note that these options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.  The given URL will be used as
     *             the primary URL.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(URL url) throws GPUdbException {
        super(url, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server with the
     * specified URLs using default options.  At any given time, one
     * URL (initially selected at random from the list) will be active
     * and used for all GPUdb calls, but in the event of failure, the
     * other URLs will be tried in order, and if a working one is found
     * it will become the new active URL.  Note that the default options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     *
     * @param urls  The URLs of the GPUdb server.  If a single URL is given,
     *              it will be used as the primary URL.
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(List<URL> urls) throws GPUdbException {
        super(urls, new Options());
    }

    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using the specified options.  Note that these
     * options cannot be changed subsequently; to use different options,
     * a new {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.  Can be a comma-separated
     *             string containing multiple full URLs, or a single URL.
     *             For example 'http://172.42.40.1:9191,,http://172.42.40.2:9191'.
     *             If a single URL is given, and no primary URL is specified via
     *             the options, the given URL will be used as the primary URL.
     * 
     * @param options  The options, e.g. primary cluster URL, to use.
     * 
     * @see GPUdbBase.Options
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(String url, Options options) throws GPUdbException {
        super(url, options);
    }
    /**
     * Creates a {@link GPUdb} instance for the GPUdb server at the
     * specified URL using the specified options.  Note that these
     * options cannot be changed subsequently; to use different options,
     * a new {@link GPUdb} instance must be created.
     * 
     * @param url  The URL of the GPUdb server.  If no primary URL is specified via
     *             the options, the given URL will be used as the primary URL.
     * 
     * @param options  The options, e.g. primary cluster URL, to use.
     * 
     * @see GPUdbBase.Options
     * 
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(URL url, Options options) throws GPUdbException {
        super(url, options);
    }
    /**
     * Creates a {@link GPUdb} instance for the GPUdb server with the
     * specified URLs using the specified options.  At any given time,
     * one URL (initially selected at random from the list) will be active
     * and used for all GPUdb calls, but in the event of failure, the
     * other URLs will be tried in order, and if a working one is found
     * it will become the new active URL.  Note that the specified options
     * cannot be changed subsequently; to use different options, a new
     * {@link GPUdb} instance must be created.
     *
     * @param urls  The URLs of the GPUdb server.  If a single URL is given, 
     *              and no primary URL is specified via the options, the given
     *              URL will be used as the primary URL.
     *
     * @param options  The options, e.g. primary cluster URL, to use.
     *
     * @see GPUdbBase.Options
     *
     * @throws GPUdbException if an error occurs during creation.
     */
    public GPUdb(List<URL> urls, Options options) throws GPUdbException {
        super(urls, options);
    }


    /**
     * Add one or more new ranks to the Kinetica cluster. The new ranks will
     * not contain any data initially, other than replicated tables, and not be
     * assigned any shards. To rebalance data across the cluster, which
     * includes shifting some shard key assignments to newly added ranks, see
     * {@link GPUdb#adminRebalance(AdminRebalanceRequest)}.
     * <p>
     * For example, if attempting to add three new ranks (two ranks on host
     * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster
     * with additional configuration parameters:
     * <p>
     * * {@code hosts} would be an array including 172.123.45.67 in the first
     * two indices (signifying two ranks being added to host 172.123.45.67) and
     * 172.123.45.68 in the last index (signifying one rank being added to host
     * 172.123.45.67)
     * <p>
     * * {@code configParams} would be an array of maps, with each map
     * corresponding to the ranks being added in {@code hosts}. The key of each
     * map would be the configuration parameter name and the value would be the
     * parameter's value, e.g. 'rank.gpu':'1'
     * <p>
     * This endpoint's processing includes copying all replicated table data to
     * the new rank(s) and therefore could take a long time. The API call may
     * time out if run directly.  It is recommended to run this endpoint
     * asynchronously via {@link GPUdb#createJob(CreateJobRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAddRanksResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAddRanksResponse adminAddRanks(AdminAddRanksRequest request) throws GPUdbException {
        AdminAddRanksResponse actualResponse_ = new AdminAddRanksResponse();
        submitRequest("/admin/add/ranks", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Add one or more new ranks to the Kinetica cluster. The new ranks will
     * not contain any data initially, other than replicated tables, and not be
     * assigned any shards. To rebalance data across the cluster, which
     * includes shifting some shard key assignments to newly added ranks, see
     * {@link GPUdb#adminRebalance(Map)}.
     * <p>
     * For example, if attempting to add three new ranks (two ranks on host
     * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster
     * with additional configuration parameters:
     * <p>
     * * {@code hosts} would be an array including 172.123.45.67 in the first
     * two indices (signifying two ranks being added to host 172.123.45.67) and
     * 172.123.45.68 in the last index (signifying one rank being added to host
     * 172.123.45.67)
     * <p>
     * * {@code configParams} would be an array of maps, with each map
     * corresponding to the ranks being added in {@code hosts}. The key of each
     * map would be the configuration parameter name and the value would be the
     * parameter's value, e.g. 'rank.gpu':'1'
     * <p>
     * This endpoint's processing includes copying all replicated table data to
     * the new rank(s) and therefore could take a long time. The API call may
     * time out if run directly.  It is recommended to run this endpoint
     * asynchronously via {@link GPUdb#createJob(String, String, ByteBuffer,
     * String, Map)}.
     * 
     * @param hosts  The IP address of each rank being added to the cluster.
     *               Insert one entry per rank, even if they are on the same
     *               host. The order of the hosts in the array only matters as
     *               it relates to the {@code configParams}.
     * @param configParams  Configuration parameters to apply to the new ranks,
     *                      e.g., which GPU to use. Configuration parameters
     *                      that start with 'rankN.', where N is the rank
     *                      number, should omit the N, as the new rank
     *                      number(s) are not allocated until the ranks are
     *                      created. Each entry in this array corresponds to
     *                      the entry at the same array index in the {@code
     *                      hosts}. This array must either be completely empty
     *                      or have the same number of elements as the hosts
     *                      array.  An empty array will result in the new ranks
     *                      being set only with default parameters.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddRanksRequest.Options#DRY_RUN
     *                 DRY_RUN}: If {@code true}, only validation checks will
     *                 be performed. No ranks are added.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddRanksRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminAddRanksRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminAddRanksRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAddRanksResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAddRanksResponse adminAddRanks(List<String> hosts, List<Map<String, String>> configParams, Map<String, String> options) throws GPUdbException {
        AdminAddRanksRequest actualRequest_ = new AdminAddRanksRequest(hosts, configParams, options);
        AdminAddRanksResponse actualResponse_ = new AdminAddRanksResponse();
        submitRequest("/admin/add/ranks", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Perform the requested action on a list of one or more job(s). Based on
     * the type of job and the current state of execution, the action may not
     * be successfully executed. The final result of the attempted actions for
     * each specified job is returned in the status array of the response. See
     * <a href="../../../../gpudbAdmin/job_manager.html" target="_top">Job
     * Manager</a> for more information.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterJobsResponse adminAlterJobs(AdminAlterJobsRequest request) throws GPUdbException {
        AdminAlterJobsResponse actualResponse_ = new AdminAlterJobsResponse();
        submitRequest("/admin/alter/jobs", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Perform the requested action on a list of one or more job(s). Based on
     * the type of job and the current state of execution, the action may not
     * be successfully executed. The final result of the attempted actions for
     * each specified job is returned in the status array of the response. See
     * <a href="../../../../gpudbAdmin/job_manager.html" target="_top">Job
     * Manager</a> for more information.
     * 
     * @param jobIds  Jobs to be modified.
     * @param action  Action to be performed on the jobs specified by job_ids.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AdminAlterJobsRequest.Action#CANCEL
     *                CANCEL}
     *                </ul>
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminAlterJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminAlterJobsResponse adminAlterJobs(List<Long> jobIds, String action, Map<String, String> options) throws GPUdbException {
        AdminAlterJobsRequest actualRequest_ = new AdminAlterJobsRequest(jobIds, action, options);
        AdminAlterJobsResponse actualResponse_ = new AdminAlterJobsResponse();
        submitRequest("/admin/alter/jobs", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Take the system offline. When the system is offline, no user operations
     * can be performed with the exception of a system shutdown.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminOfflineResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminOfflineResponse adminOffline(AdminOfflineRequest request) throws GPUdbException {
        AdminOfflineResponse actualResponse_ = new AdminOfflineResponse();
        submitRequest("/admin/offline", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Take the system offline. When the system is offline, no user operations
     * can be performed with the exception of a system shutdown.
     * 
     * @param offline  Set to true if desired state is offline.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Offline#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Offline#FALSE
     *                 FALSE}
     *                 </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#FLUSH_TO_DISK
     *                 FLUSH_TO_DISK}: Flush to disk when going offline
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminOfflineRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminOfflineResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminOfflineResponse adminOffline(boolean offline, Map<String, String> options) throws GPUdbException {
        AdminOfflineRequest actualRequest_ = new AdminOfflineRequest(offline, options);
        AdminOfflineResponse actualResponse_ = new AdminOfflineResponse();
        submitRequest("/admin/offline", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rebalance the cluster so that all the nodes contain approximately an
     * equal number of records.  The rebalance will also cause the shards to be
     * equally distributed (as much as possible) across all the ranks.
     * <p>
     * This endpoint may take a long time to run, depending on the amount of
     * data in the system. The API call may time out if run directly.  It is
     * recommended to run this endpoint asynchronously via {@link
     * GPUdb#createJob(CreateJobRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRebalanceResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRebalanceResponse adminRebalance(AdminRebalanceRequest request) throws GPUdbException {
        AdminRebalanceResponse actualResponse_ = new AdminRebalanceResponse();
        submitRequest("/admin/rebalance", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rebalance the cluster so that all the nodes contain approximately an
     * equal number of records.  The rebalance will also cause the shards to be
     * equally distributed (as much as possible) across all the ranks.
     * <p>
     * This endpoint may take a long time to run, depending on the amount of
     * data in the system. The API call may time out if run directly.  It is
     * recommended to run this endpoint asynchronously via {@link
     * GPUdb#createJob(String, String, ByteBuffer, String, Map)}.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_SHARDED_DATA
     *                 REBALANCE_SHARDED_DATA}: If {@code true}, sharded data
     *                 will be rebalanced approximately equally across the
     *                 cluster. Note that for big clusters, this data transfer
     *                 could be time consuming and result in delayed query
     *                 responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_UNSHARDED_DATA
     *                 REBALANCE_UNSHARDED_DATA}: If {@code true}, unsharded
     *                 data (data without primary keys and without shard keys)
     *                 will be rebalanced approximately equally across the
     *                 cluster. Note that for big clusters, this data transfer
     *                 could be time consuming and result in delayed query
     *                 responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_WHITELIST
     *                 TABLE_WHITELIST}: Comma-separated list of unsharded
     *                 table names to rebalance. Not applicable to sharded
     *                 tables because they are always balanced in accordance
     *                 with their primary key or shard key. Cannot be used
     *                 simultaneously with {@code table_blacklist}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_BLACKLIST
     *                 TABLE_BLACKLIST}: Comma-separated list of unsharded
     *                 table names to not rebalance. Not applicable to sharded
     *                 tables because they are always balanced in accordance
     *                 with their primary key or shard key. Cannot be used
     *                 simultaneously with {@code table_whitelist}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#AGGRESSIVENESS
     *                 AGGRESSIVENESS}: Influences how much data to send per
     *                 rebalance round.  A higher aggressiveness setting will
     *                 complete the rebalance faster.  A lower aggressiveness
     *                 setting will take longer, but allow for better
     *                 interleaving between the rebalance and other queries.
     *                 Allowed values are 1 through 10.  The default value is
     *                 '1'.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_AFTER_REBALANCE
     *                 COMPACT_AFTER_REBALANCE}: Perform compaction of deleted
     *                 records once the rebalance completes, to reclaim memory
     *                 and disk space. Default is true, unless {@code
     *                 repair_incorrectly_sharded_data} is set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_ONLY
     *                 COMPACT_ONLY}: Only perform compaction, do not
     *                 rebalance. Default is false.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REPAIR_INCORRECTLY_SHARDED_DATA
     *                 REPAIR_INCORRECTLY_SHARDED_DATA}: Scans for any data
     *                 sharded incorrectly and re-routes the correct location.
     *                 This can be done as part of a typical rebalance after
     *                 expanding the cluster, or in a standalone fashion when
     *                 it is believed that data is sharded incorrectly
     *                 somewhere in the cluster. Compaction will not be
     *                 performed by default when this is enabled. This option
     *                 may also lengthen rebalance time, and increase the
     *                 memory used by the rebalance.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRebalanceResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRebalanceResponse adminRebalance(Map<String, String> options) throws GPUdbException {
        AdminRebalanceRequest actualRequest_ = new AdminRebalanceRequest(options);
        AdminRebalanceResponse actualResponse_ = new AdminRebalanceResponse();
        submitRequest("/admin/rebalance", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Remove one or more ranks from the cluster. All data in the ranks to be
     * removed is rebalanced to other ranks before the node is removed unless
     * the {@code rebalance_sharded_data} or {@code rebalance_unsharded_data}
     * parameters are set to {@code false} in the {@code options}.
     * <p>
     * Due to the rebalancing, this endpoint may take a long time to run,
     * depending on the amount of data in the system. The API call may time out
     * if run directly.  It is recommended to run this endpoint asynchronously
     * via {@link GPUdb#createJob(CreateJobRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRemoveRanksResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRemoveRanksResponse adminRemoveRanks(AdminRemoveRanksRequest request) throws GPUdbException {
        AdminRemoveRanksResponse actualResponse_ = new AdminRemoveRanksResponse();
        submitRequest("/admin/remove/ranks", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Remove one or more ranks from the cluster. All data in the ranks to be
     * removed is rebalanced to other ranks before the node is removed unless
     * the {@code rebalance_sharded_data} or {@code rebalance_unsharded_data}
     * parameters are set to {@code false} in the {@code options}.
     * <p>
     * Due to the rebalancing, this endpoint may take a long time to run,
     * depending on the amount of data in the system. The API call may time out
     * if run directly.  It is recommended to run this endpoint asynchronously
     * via {@link GPUdb#createJob(String, String, ByteBuffer, String, Map)}.
     * 
     * @param ranks  Rank numbers of the ranks to be removed from the cluster.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#REBALANCE_SHARDED_DATA
     *                 REBALANCE_SHARDED_DATA}: When {@code true}, data with
     *                 primary keys or shard keys will be rebalanced to other
     *                 ranks prior to rank removal. Note that for big clusters,
     *                 this data transfer could be time consuming and result in
     *                 delayed query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#REBALANCE_UNSHARDED_DATA
     *                 REBALANCE_UNSHARDED_DATA}: When {@code true}, unsharded
     *                 data (data without primary keys and without shard keys)
     *                 will be rebalanced to other ranks prior to rank removal.
     *                 Note that for big clusters, this data transfer could be
     *                 time consuming and result in delayed query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRemoveRanksRequest.Options#AGGRESSIVENESS
     *                 AGGRESSIVENESS}: Influences how much data to send per
     *                 rebalance round, during the rebalance portion of
     *                 removing ranks.  A higher aggressiveness setting will
     *                 complete the rebalance faster.  A lower aggressiveness
     *                 setting will take longer, but allow for better
     *                 interleaving between the rebalance and other queries.
     *                 Allowed values are 1 through 10.  The default value is
     *                 '1'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminRemoveRanksResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminRemoveRanksResponse adminRemoveRanks(List<Integer> ranks, Map<String, String> options) throws GPUdbException {
        AdminRemoveRanksRequest actualRequest_ = new AdminRemoveRanksRequest(ranks, options);
        AdminRemoveRanksResponse actualResponse_ = new AdminRemoveRanksResponse();
        submitRequest("/admin/remove/ranks", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests a list of the most recent alerts.
     * Returns lists of alert data, including timestamp and type.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowAlertsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowAlertsResponse adminShowAlerts(AdminShowAlertsRequest request) throws GPUdbException {
        AdminShowAlertsResponse actualResponse_ = new AdminShowAlertsResponse();
        submitRequestToHM("/admin/show/alerts", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests a list of the most recent alerts.
     * Returns lists of alert data, including timestamp and type.
     * 
     * @param numAlerts  Number of most recent alerts to request. The response
     *                   will include up to {@code numAlerts} depending on how
     *                   many alerts there are in the system. A value of 0
     *                   returns all stored alerts.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowAlertsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowAlertsResponse adminShowAlerts(int numAlerts, Map<String, String> options) throws GPUdbException {
        AdminShowAlertsRequest actualRequest_ = new AdminShowAlertsRequest(numAlerts, options);
        AdminShowAlertsResponse actualResponse_ = new AdminShowAlertsResponse();
        submitRequestToHM("/admin/show/alerts", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests the detailed status of the current operation (by default) or a
     * prior cluster operation specified by {@code historyIndex}.
     * Returns details on the requested cluster operation.
     * <p>
     * The response will also indicate how many cluster operations are stored
     * in the history.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowClusterOperationsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowClusterOperationsResponse adminShowClusterOperations(AdminShowClusterOperationsRequest request) throws GPUdbException {
        AdminShowClusterOperationsResponse actualResponse_ = new AdminShowClusterOperationsResponse();
        submitRequest("/admin/show/cluster/operations", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests the detailed status of the current operation (by default) or a
     * prior cluster operation specified by {@code historyIndex}.
     * Returns details on the requested cluster operation.
     * <p>
     * The response will also indicate how many cluster operations are stored
     * in the history.
     * 
     * @param historyIndex  Indicates which cluster operation to retrieve.  Use
     *                      0 for the most recent.  The default value is 0.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowClusterOperationsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowClusterOperationsResponse adminShowClusterOperations(int historyIndex, Map<String, String> options) throws GPUdbException {
        AdminShowClusterOperationsRequest actualRequest_ = new AdminShowClusterOperationsRequest(historyIndex, options);
        AdminShowClusterOperationsResponse actualResponse_ = new AdminShowClusterOperationsResponse();
        submitRequest("/admin/show/cluster/operations", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get a list of the current jobs in GPUdb.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowJobsResponse adminShowJobs(AdminShowJobsRequest request) throws GPUdbException {
        AdminShowJobsResponse actualResponse_ = new AdminShowJobsResponse();
        submitRequest("/admin/show/jobs", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get a list of the current jobs in GPUdb.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#SHOW_ASYNC_JOBS
     *                 SHOW_ASYNC_JOBS}: If {@code true}, then the completed
     *                 async jobs are also included in the response. By
     *                 default, once the async jobs are completed they are no
     *                 longer included in the jobs list.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminShowJobsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowJobsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowJobsResponse adminShowJobs(Map<String, String> options) throws GPUdbException {
        AdminShowJobsRequest actualRequest_ = new AdminShowJobsRequest(options);
        AdminShowJobsResponse actualResponse_ = new AdminShowJobsResponse();
        submitRequest("/admin/show/jobs", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the mapping of shards to the corresponding rank and tom.  The
     * response message contains list of 16384 (total number of shards in the
     * system) Rank and TOM numbers corresponding to each shard.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowShardsResponse adminShowShards(AdminShowShardsRequest request) throws GPUdbException {
        AdminShowShardsResponse actualResponse_ = new AdminShowShardsResponse();
        submitRequest("/admin/show/shards", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Show the mapping of shards to the corresponding rank and tom.  The
     * response message contains list of 16384 (total number of shards in the
     * system) Rank and TOM numbers corresponding to each shard.
     * 
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShowShardsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShowShardsResponse adminShowShards(Map<String, String> options) throws GPUdbException {
        AdminShowShardsRequest actualRequest_ = new AdminShowShardsRequest(options);
        AdminShowShardsResponse actualResponse_ = new AdminShowShardsResponse();
        submitRequest("/admin/show/shards", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Exits the database server application.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShutdownResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShutdownResponse adminShutdown(AdminShutdownRequest request) throws GPUdbException {
        AdminShutdownResponse actualResponse_ = new AdminShutdownResponse();
        submitRequest("/admin/shutdown", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Exits the database server application.
     * 
     * @param exitType  Reserved for future use. User can pass an empty string.
     * @param authorization  No longer used. User can pass an empty string.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminShutdownResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminShutdownResponse adminShutdown(String exitType, String authorization, Map<String, String> options) throws GPUdbException {
        AdminShutdownRequest actualRequest_ = new AdminShutdownRequest(exitType, authorization, options);
        AdminShutdownResponse actualResponse_ = new AdminShutdownResponse();
        submitRequest("/admin/shutdown", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminVerifyDbResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminVerifyDbResponse adminVerifyDb(AdminVerifyDbRequest request) throws GPUdbException {
        AdminVerifyDbResponse actualResponse_ = new AdminVerifyDbResponse();
        submitRequest("/admin/verifydb", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Verify database is in a consistent state.  When inconsistencies or
     * errors are found, the verified_ok flag in the response is set to false
     * and the list of errors found is provided in the error_list.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#REBUILD_ON_ERROR
     *                 REBUILD_ON_ERROR}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#VERIFY_NULLS
     *                 VERIFY_NULLS}: When enabled, verifies that null values
     *                 are set to zero
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#VERIFY_PERSIST
     *                 VERIFY_PERSIST}:
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#CONCURRENT_SAFE
     *                 CONCURRENT_SAFE}: When enabled, allows this endpoint to
     *                 be run safely with other concurrent database operations.
     *                 Other operations may be slower while this is running.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#VERIFY_RANK0
     *                 VERIFY_RANK0}: When enabled, compares rank0 table
     *                 meta-data against workers meta-data
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminVerifyDbRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AdminVerifyDbResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AdminVerifyDbResponse adminVerifyDb(Map<String, String> options) throws GPUdbException {
        AdminVerifyDbRequest actualRequest_ = new AdminVerifyDbRequest(options);
        AdminVerifyDbResponse actualResponse_ = new AdminVerifyDbResponse();
        submitRequest("/admin/verifydb", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the convex hull for the values in a table
     * specified by {@code tableName}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateConvexHullResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateConvexHullResponse aggregateConvexHull(AggregateConvexHullRequest request) throws GPUdbException {
        AggregateConvexHullResponse actualResponse_ = new AggregateConvexHullResponse();
        submitRequest("/aggregate/convexhull", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the convex hull for the values in a table
     * specified by {@code tableName}.
     * 
     * @param tableName  Name of table on which the operation will be
     *                   performed. Must be an existing table.  It cannot be a
     *                   collection.
     * @param xColumnName  Name of the column containing the x coordinates of
     *                     the points for the operation being performed.
     * @param yColumnName  Name of the column containing the y coordinates of
     *                     the points for the operation being performed.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateConvexHullResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateConvexHullResponse aggregateConvexHull(String tableName, String xColumnName, String yColumnName, Map<String, String> options) throws GPUdbException {
        AggregateConvexHullRequest actualRequest_ = new AggregateConvexHullRequest(tableName, xColumnName, yColumnName, options);
        AggregateConvexHullResponse actualResponse_ = new AggregateConvexHullResponse();
        submitRequest("/aggregate/convexhull", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table or view and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * For aggregation details and examples, see <a
     * href="../../../../concepts/aggregation.html"
     * target="_top">Aggregation</a>.  For limitations, see <a
     * href="../../../../concepts/aggregation.html#limitations"
     * target="_top">Aggregation Limitations</a>.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * Available grouping functions are <a
     * href="../../../../concepts/rollup.html" target="_top">Rollup</a>, <a
     * href="../../../../concepts/cube.html" target="_top">Cube</a>, and <a
     * href="../../../../concepts/grouping_sets.html" target="_top">Grouping
     * Sets</a>
     * <p>
     * This service also provides support for <a
     * href="../../../../concepts/pivot.html" target="_top">Pivot</a>
     * operations.
     * <p>
     * Filtering on aggregates is supported via expressions using <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> supplied to {@code having}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s) and all result records are
     * selected ({@code offset} is 0 and {@code limit} is -9999), the result
     * table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of {@code
     * columnNames} is an unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateGroupByResponse aggregateGroupByRaw(AggregateGroupByRequest request) throws GPUdbException {
        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table or view and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * For aggregation details and examples, see <a
     * href="../../../../concepts/aggregation.html"
     * target="_top">Aggregation</a>.  For limitations, see <a
     * href="../../../../concepts/aggregation.html#limitations"
     * target="_top">Aggregation Limitations</a>.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * Available grouping functions are <a
     * href="../../../../concepts/rollup.html" target="_top">Rollup</a>, <a
     * href="../../../../concepts/cube.html" target="_top">Cube</a>, and <a
     * href="../../../../concepts/grouping_sets.html" target="_top">Grouping
     * Sets</a>
     * <p>
     * This service also provides support for <a
     * href="../../../../concepts/pivot.html" target="_top">Pivot</a>
     * operations.
     * <p>
     * Filtering on aggregates is supported via expressions using <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> supplied to {@code having}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s) and all result records are
     * selected ({@code offset} is 0 and {@code limit} is -9999), the result
     * table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of {@code
     * columnNames} is an unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateGroupByResponse aggregateGroupBy(AggregateGroupByRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", request, actualResponse_, false);
        AggregateGroupByResponse response_ = new AggregateGroupByResponse();
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Calculates unique combinations (groups) of values for the given columns
     * in a given table or view and computes aggregates on each unique
     * combination. This is somewhat analogous to an SQL-style SELECT...GROUP
     * BY.
     * <p>
     * For aggregation details and examples, see <a
     * href="../../../../concepts/aggregation.html"
     * target="_top">Aggregation</a>.  For limitations, see <a
     * href="../../../../concepts/aggregation.html#limitations"
     * target="_top">Aggregation Limitations</a>.
     * <p>
     * Any column(s) can be grouped on, and all column types except
     * unrestricted-length strings may be used for computing applicable
     * aggregates; columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used in grouping or
     * aggregation.
     * <p>
     * The results can be paged via the {@code offset} and {@code limit}
     * parameters. For example, to get 10 groups with the largest counts the
     * inputs would be: limit=10, options={"sort_order":"descending",
     * "sort_by":"value"}.
     * <p>
     * {@code options} can be used to customize behavior of this call e.g.
     * filtering or sorting the results.
     * <p>
     * To group by columns 'x' and 'y' and compute the number of objects within
     * each group, use:  column_names=['x','y','count(*)'].
     * <p>
     * To also compute the sum of 'z' over each group, use:
     * column_names=['x','y','count(*)','sum(z)'].
     * <p>
     * Available <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> are: count(*), sum, min, max,
     * avg, mean, stddev, stddev_pop, stddev_samp, var, var_pop, var_samp,
     * arg_min, arg_max and count_distinct.
     * <p>
     * Available grouping functions are <a
     * href="../../../../concepts/rollup.html" target="_top">Rollup</a>, <a
     * href="../../../../concepts/cube.html" target="_top">Cube</a>, and <a
     * href="../../../../concepts/grouping_sets.html" target="_top">Grouping
     * Sets</a>
     * <p>
     * This service also provides support for <a
     * href="../../../../concepts/pivot.html" target="_top">Pivot</a>
     * operations.
     * <p>
     * Filtering on aggregates is supported via expressions using <a
     * href="../../../../concepts/expressions.html#aggregate-expressions"
     * target="_top">aggregation functions</a> supplied to {@code having}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column
     * names must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; column/aggregation
     * expressions will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the grouping column(s) and all result records are
     * selected ({@code offset} is 0 and {@code limit} is -9999), the result
     * table will be sharded, in all other cases it will be replicated.
     * Sorting will properly function only if the result table is replicated or
     * if there is only one processing node and should not be relied upon in
     * other cases.  Not available when any of the values of {@code
     * columnNames} is an unrestricted-length string.
     * 
     * @param tableName  Name of an existing table or view on which the
     *                   operation will be performed.
     * @param columnNames  List of one or more column names, expressions, and
     *                     aggregate expressions.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#EXPRESSION
     *                 EXPRESSION}: Filter expression to apply to the table
     *                 prior to computing the aggregate group by.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#HAVING
     *                 HAVING}: Filter expression to apply to the aggregated
     *                 results.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#ASCENDING
     *                 ASCENDING}: Indicates that the returned values should be
     *                 sorted in ascending order.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#DESCENDING
     *                 DESCENDING}: Indicates that the returned values should
     *                 be sorted in descending order.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#SORT_BY
     *                 SORT_BY}: String determining how the results are sorted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#KEY
     *                 KEY}: Indicates that the returned values should be
     *                 sorted by key, which corresponds to the grouping
     *                 columns. If you have multiple grouping columns (and are
     *                 sorting by key), it will first sort the first grouping
     *                 column, then the second grouping column, etc.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#VALUE
     *                 VALUE}: Indicates that the returned values should be
     *                 sorted by value, which corresponds to the aggregates. If
     *                 you have multiple aggregates (and are sorting by value),
     *                 it will first sort by the first aggregate, then the
     *                 second aggregate, etc.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#VALUE
     *                 VALUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>. Column names (group-by and
     *                 aggregate fields) need to be given aliases e.g.
     *                 ["FChar256 as fchar256", "sum(FDouble) as sfd"].  If
     *                 present, no results are returned in the response.  This
     *                 option is not available if one of the grouping
     *                 attributes is an unrestricted string (i.e.; not charN)
     *                 type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_FORCE_REPLICATED
     *                 RESULT_TABLE_FORCE_REPLICATED}: Force the result table
     *                 to be replicated (ignores any sharding). Must be used in
     *                 combination with the {@code result_table} option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#RESULT_TABLE_GENERATE_PK
     *                 RESULT_TABLE_GENERATE_PK}: If {@code true} then set a
     *                 primary key for the result table. Must be used in
     *                 combination with the {@code result_table} option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for the result table. Must be used in
     *                 combination with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#CREATE_INDEXES
     *                 CREATE_INDEXES}: Comma-separated list of columns on
     *                 which to create indexes on the result table. Must be
     *                 used in combination with the {@code result_table}
     *                 option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#VIEW_ID
     *                 VIEW_ID}: ID of view of which the result table will be a
     *                 member.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: No longer used.  See <a
     *                 href="../../../../rm/concepts.html"
     *                 target="_top">Resource Management Concepts</a> for
     *                 information about how resources are managed, <a
     *                 href="../../../../rm/concepts.html" target="_top">Tier
     *                 Strategy Concepts</a> for how resources are targeted for
     *                 VRAM, and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">Tier Strategy Usage</a> for how to specify
     *                 a table's priority in VRAM.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#PIVOT
     *                 PIVOT}: pivot column
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#PIVOT_VALUES
     *                 PIVOT_VALUES}: The value list provided will become the
     *                 column headers in the output. Should be the values from
     *                 the pivot_column.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#GROUPING_SETS
     *                 GROUPING_SETS}: Customize the grouping attribute sets to
     *                 compute the aggregates. These sets can include ROLLUP or
     *                 CUBE operartors. The attribute sets should be enclosed
     *                 in paranthesis and can include composite attributes. All
     *                 attributes specified in the grouping sets must present
     *                 in the groupby attributes.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#ROLLUP
     *                 ROLLUP}: This option is used to specify the multilevel
     *                 aggregates.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateGroupByRequest.Options#CUBE
     *                 CUBE}: This option is used to specify the
     *                 multidimensional aggregates.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateGroupByResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateGroupByResponse aggregateGroupBy(String tableName, List<String> columnNames, long offset, long limit, Map<String, String> options) throws GPUdbException {
        AggregateGroupByRequest actualRequest_ = new AggregateGroupByRequest(tableName, columnNames, offset, limit, null, options);
        RawAggregateGroupByResponse actualResponse_ = new RawAggregateGroupByResponse();
        submitRequest("/aggregate/groupby", actualRequest_, actualResponse_, false);
        AggregateGroupByResponse response_ = new AggregateGroupByResponse();
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Performs a histogram calculation given a table, a column, and an
     * interval function. The {@code interval} is used to produce bins of that
     * size and the result, computed over the records falling within each bin,
     * is returned.  For each bin, the start value is inclusive, but the end
     * value is exclusive--except for the very last bin for which the end value
     * is also inclusive.  The value returned for each bin is the number of
     * records in it, except when a column name is provided as a {@code
     * value_column}.  In this latter case the sum of the values corresponding
     * to the {@code value_column} is used as the result instead.  The total
     * number of bins requested cannot exceed 10,000.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service a request that specifies a {@code
     * value_column} option.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateHistogramResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateHistogramResponse aggregateHistogram(AggregateHistogramRequest request) throws GPUdbException {
        AggregateHistogramResponse actualResponse_ = new AggregateHistogramResponse();
        submitRequest("/aggregate/histogram", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Performs a histogram calculation given a table, a column, and an
     * interval function. The {@code interval} is used to produce bins of that
     * size and the result, computed over the records falling within each bin,
     * is returned.  For each bin, the start value is inclusive, but the end
     * value is exclusive--except for the very last bin for which the end value
     * is also inclusive.  The value returned for each bin is the number of
     * records in it, except when a column name is provided as a {@code
     * value_column}.  In this latter case the sum of the values corresponding
     * to the {@code value_column} is used as the result instead.  The total
     * number of bins requested cannot exceed 10,000.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service a request that specifies a {@code
     * value_column} option.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table or collection.
     * @param columnName  Name of a column or an expression of one or more
     *                    column names over which the histogram will be
     *                    calculated.
     * @param start  Lower end value of the histogram interval, inclusive.
     * @param end  Upper end value of the histogram interval, inclusive.
     * @param interval  The size of each bin within the start and end
     *                  parameters.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateHistogramRequest.Options#VALUE_COLUMN
     *                 VALUE_COLUMN}: The name of the column to use when
     *                 calculating the bin values (values are summed).  The
     *                 column must be a numerical type (int, double, long,
     *                 float).
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateHistogramResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateHistogramResponse aggregateHistogram(String tableName, String columnName, double start, double end, double interval, Map<String, String> options) throws GPUdbException {
        AggregateHistogramRequest actualRequest_ = new AggregateHistogramRequest(tableName, columnName, start, end, interval, options);
        AggregateHistogramResponse actualResponse_ = new AggregateHistogramResponse();
        submitRequest("/aggregate/histogram", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * This endpoint runs the k-means algorithm - a heuristic algorithm that
     * attempts to do k-means clustering.  An ideal k-means clustering
     * algorithm selects k points such that the sum of the mean squared
     * distances of each member of the set to the nearest of the k points is
     * minimized.  The k-means algorithm however does not necessarily produce
     * such an ideal cluster.   It begins with a randomly selected set of k
     * points and then refines the location of the points iteratively and
     * settles to a local minimum.  Various parameters and options are provided
     * to control the heuristic search.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service this request.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateKMeansResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateKMeansResponse aggregateKMeans(AggregateKMeansRequest request) throws GPUdbException {
        AggregateKMeansResponse actualResponse_ = new AggregateKMeansResponse();
        submitRequest("/aggregate/kmeans", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * This endpoint runs the k-means algorithm - a heuristic algorithm that
     * attempts to do k-means clustering.  An ideal k-means clustering
     * algorithm selects k points such that the sum of the mean squared
     * distances of each member of the set to the nearest of the k points is
     * minimized.  The k-means algorithm however does not necessarily produce
     * such an ideal cluster.   It begins with a randomly selected set of k
     * points and then refines the location of the points iteratively and
     * settles to a local minimum.  Various parameters and options are provided
     * to control the heuristic search.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service this request.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table or collection.
     * @param columnNames  List of column names on which the operation would be
     *                     performed. If n columns are provided then each of
     *                     the k result points will have n dimensions
     *                     corresponding to the n columns.
     * @param k  The number of mean points to be determined by the algorithm.
     * @param tolerance  Stop iterating when the distances between successive
     *                   points is less than the given tolerance.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#WHITEN
     *                 WHITEN}: When set to 1 each of the columns is first
     *                 normalized by its stdv - default is not to whiten.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#MAX_ITERS
     *                 MAX_ITERS}: Number of times to try to hit the tolerance
     *                 limit before giving up - default is 10.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateKMeansRequest.Options#NUM_TRIES
     *                 NUM_TRIES}: Number of times to run the k-means algorithm
     *                 with a different randomly selected starting points -
     *                 helps avoid local minimum. Default is 1.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateKMeansResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateKMeansResponse aggregateKMeans(String tableName, List<String> columnNames, int k, double tolerance, Map<String, String> options) throws GPUdbException {
        AggregateKMeansRequest actualRequest_ = new AggregateKMeansRequest(tableName, columnNames, k, tolerance, options);
        AggregateKMeansResponse actualResponse_ = new AggregateKMeansResponse();
        submitRequest("/aggregate/kmeans", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxResponse aggregateMinMax(AggregateMinMaxRequest request) throws GPUdbException {
        AggregateMinMaxResponse actualResponse_ = new AggregateMinMaxResponse();
        submitRequest("/aggregate/minmax", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum values of a particular
     * column in a table.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table.
     * @param columnName  Name of a column or an expression of one or more
     *                    column on which the min-max will be calculated.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxResponse aggregateMinMax(String tableName, String columnName, Map<String, String> options) throws GPUdbException {
        AggregateMinMaxRequest actualRequest_ = new AggregateMinMaxRequest(tableName, columnName, options);
        AggregateMinMaxResponse actualResponse_ = new AggregateMinMaxResponse();
        submitRequest("/aggregate/minmax", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum x- and y-coordinates of a
     * particular geospatial geometry column in a table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry(AggregateMinMaxGeometryRequest request) throws GPUdbException {
        AggregateMinMaxGeometryResponse actualResponse_ = new AggregateMinMaxGeometryResponse();
        submitRequest("/aggregate/minmax/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates and returns the minimum and maximum x- and y-coordinates of a
     * particular geospatial geometry column in a table.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table.
     * @param columnName  Name of a geospatial geometry column on which the
     *                    min-max will be calculated.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateMinMaxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateMinMaxGeometryResponse aggregateMinMaxGeometry(String tableName, String columnName, Map<String, String> options) throws GPUdbException {
        AggregateMinMaxGeometryRequest actualRequest_ = new AggregateMinMaxGeometryRequest(tableName, columnName, options);
        AggregateMinMaxGeometryResponse actualResponse_ = new AggregateMinMaxGeometryResponse();
        submitRequest("/aggregate/minmax/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are {@code count} (number of total objects),
     * {@code mean}, {@code stdv} (standard deviation), {@code variance},
     * {@code skew}, {@code kurtosis}, {@code sum}, {@code min}, {@code max},
     * {@code weighted_average}, {@code cardinality} (unique count), {@code
     * estimated_cardinality}, {@code percentile} and {@code percentile_rank}.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired {@code
     * percentile}/{@code percentile_rank}. To compute multiple percentiles
     * each value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * A second, comma-separated value can be added to the {@code percentile}
     * statistic to calculate percentile resolution, e.g., a 50th percentile
     * with 200 resolution would be 'percentile(50,200)'.
     * <p>
     * The weighted average statistic requires a {@code weight_column_name} to
     * be specified in {@code options}. The weighted average is then defined as
     * the sum of the products of {@code columnName} times the {@code
     * weight_column_name} values divided by the sum of the {@code
     * weight_column_name} values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * {@code additional_column_names} option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the {@code count} & {@code mean} of {@code columnName} x and {@code
     * additional_column_names} y & z, where x holds the numbers 1-10, y holds
     * 11-20, and z holds 21-30, would return the total number of x, y, & z
     * values (30), and the single average value across all x, y, & z values
     * (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsResponse aggregateStatistics(AggregateStatisticsRequest request) throws GPUdbException {
        AggregateStatisticsResponse actualResponse_ = new AggregateStatisticsResponse();
        submitRequest("/aggregate/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates the requested statistics of the given column(s) in a given
     * table.
     * <p>
     * The available statistics are {@code count} (number of total objects),
     * {@code mean}, {@code stdv} (standard deviation), {@code variance},
     * {@code skew}, {@code kurtosis}, {@code sum}, {@code min}, {@code max},
     * {@code weighted_average}, {@code cardinality} (unique count), {@code
     * estimated_cardinality}, {@code percentile} and {@code percentile_rank}.
     * <p>
     * Estimated cardinality is calculated by using the hyperloglog
     * approximation technique.
     * <p>
     * Percentiles and percentile ranks are approximate and are calculated
     * using the t-digest algorithm. They must include the desired {@code
     * percentile}/{@code percentile_rank}. To compute multiple percentiles
     * each value must be specified separately (i.e.
     * 'percentile(75.0),percentile(99.0),percentile_rank(1234.56),percentile_rank(-5)').
     * <p>
     * A second, comma-separated value can be added to the {@code percentile}
     * statistic to calculate percentile resolution, e.g., a 50th percentile
     * with 200 resolution would be 'percentile(50,200)'.
     * <p>
     * The weighted average statistic requires a {@code weight_column_name} to
     * be specified in {@code options}. The weighted average is then defined as
     * the sum of the products of {@code columnName} times the {@code
     * weight_column_name} values divided by the sum of the {@code
     * weight_column_name} values.
     * <p>
     * Additional columns can be used in the calculation of statistics via the
     * {@code additional_column_names} option.  Values in these columns will be
     * included in the overall aggregate calculation--individual aggregates
     * will not be calculated per additional column.  For instance, requesting
     * the {@code count} & {@code mean} of {@code columnName} x and {@code
     * additional_column_names} y & z, where x holds the numbers 1-10, y holds
     * 11-20, and z holds 21-30, would return the total number of x, y, & z
     * values (30), and the single average value across all x, y, & z values
     * (15.5).
     * <p>
     * The response includes a list of key/value pairs of each statistic
     * requested and its corresponding value.
     * 
     * @param tableName  Name of the table on which the statistics operation
     *                   will be performed.
     * @param columnName  Name of the primary column for which the statistics
     *                    are to be calculated.
     * @param stats  Comma separated list of the statistics to calculate, e.g.
     *               "sum,mean".
     *               Supported values:
     *               <ul>
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#COUNT
     *               COUNT}: Number of objects (independent of the given
     *               column(s)).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MEAN
     *               MEAN}: Arithmetic mean (average), equivalent to sum/count.
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#STDV
     *               STDV}: Sample standard deviation (denominator is count-1).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#VARIANCE
     *               VARIANCE}: Unbiased sample variance (denominator is
     *               count-1).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#SKEW
     *               SKEW}: Skewness (third standardized moment).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#KURTOSIS
     *               KURTOSIS}: Kurtosis (fourth standardized moment).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#SUM
     *               SUM}: Sum of all values in the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MIN
     *               MIN}: Minimum value of the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#MAX
     *               MAX}: Maximum value of the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#WEIGHTED_AVERAGE
     *               WEIGHTED_AVERAGE}: Weighted arithmetic mean (using the
     *               option {@code weight_column_name} as the weighting
     *               column).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#CARDINALITY
     *               CARDINALITY}: Number of unique values in the column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#ESTIMATED_CARDINALITY
     *               ESTIMATED_CARDINALITY}: Estimate (via hyperloglog
     *               technique) of the number of unique values in the
     *               column(s).
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#PERCENTILE
     *               PERCENTILE}: Estimate (via t-digest) of the given
     *               percentile of the column(s) (percentile(50.0) will be an
     *               approximation of the median). Add a second,
     *               comma-separated value to calculate percentile resolution,
     *               e.g., 'percentile(75,150)'
     *                       <li> {@link
     *               com.gpudb.protocol.AggregateStatisticsRequest.Stats#PERCENTILE_RANK
     *               PERCENTILE_RANK}: Estimate (via t-digest) of the
     *               percentile rank of the given value in the column(s) (if
     *               the given value is the median of the column(s),
     *               percentile_rank(<median>) will return approximately 50.0).
     *               </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsRequest.Options#ADDITIONAL_COLUMN_NAMES
     *                 ADDITIONAL_COLUMN_NAMES}: A list of comma separated
     *                 column names over which statistics can be accumulated
     *                 along with the primary column.  All columns listed and
     *                 {@code columnName} must be of the same type.  Must not
     *                 include the column specified in {@code columnName} and
     *                 no column can be listed twice.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsRequest.Options#WEIGHT_COLUMN_NAME
     *                 WEIGHT_COLUMN_NAME}: Name of column used as weighting
     *                 attribute for the weighted average statistic.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsResponse aggregateStatistics(String tableName, String columnName, String stats, Map<String, String> options) throws GPUdbException {
        AggregateStatisticsRequest actualRequest_ = new AggregateStatisticsRequest(tableName, columnName, stats, options);
        AggregateStatisticsResponse actualResponse_ = new AggregateStatisticsResponse();
        submitRequest("/aggregate/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Divides the given set into bins and calculates statistics of the values
     * of a value-column in each bin.  The bins are based on the values of a
     * given binning-column.  The statistics that may be requested are mean,
     * stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
     * first, last and weighted average. In addition to the requested
     * statistics the count of total samples in each bin is returned. This
     * counts vector is just the histogram of the column used to divide the set
     * members into bins. The weighted average statistic requires a
     * weight_column to be specified in {@code options}. The weighted average
     * is then defined as the sum of the products of the value column times the
     * weight column divided by the sum of the weight column.
     * <p>
     * There are two methods for binning the set members. In the first, which
     * can be used for numeric valued binning-columns, a min, max and interval
     * are specified. The number of bins, nbins, is the integer upper bound of
     * (max-min)/interval. Values that fall in the range
     * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n
     * ranges from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In
     * the second method, {@code options} bin_values specifies a list of
     * binning column values. Binning-columns whose value matches the nth
     * member of the bin_values list are placed in the nth bin. When a list is
     * provided the binning-column must be of type string or int.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service this request.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsByRangeResponse aggregateStatisticsByRange(AggregateStatisticsByRangeRequest request) throws GPUdbException {
        AggregateStatisticsByRangeResponse actualResponse_ = new AggregateStatisticsByRangeResponse();
        submitRequest("/aggregate/statistics/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Divides the given set into bins and calculates statistics of the values
     * of a value-column in each bin.  The bins are based on the values of a
     * given binning-column.  The statistics that may be requested are mean,
     * stdv (standard deviation), variance, skew, kurtosis, sum, min, max,
     * first, last and weighted average. In addition to the requested
     * statistics the count of total samples in each bin is returned. This
     * counts vector is just the histogram of the column used to divide the set
     * members into bins. The weighted average statistic requires a
     * weight_column to be specified in {@code options}. The weighted average
     * is then defined as the sum of the products of the value column times the
     * weight column divided by the sum of the weight column.
     * <p>
     * There are two methods for binning the set members. In the first, which
     * can be used for numeric valued binning-columns, a min, max and interval
     * are specified. The number of bins, nbins, is the integer upper bound of
     * (max-min)/interval. Values that fall in the range
     * [min+n*interval,min+(n+1)*interval) are placed in the nth bin where n
     * ranges from 0..nbin-2. The final bin is [min+(nbin-1)*interval,max]. In
     * the second method, {@code options} bin_values specifies a list of
     * binning column values. Binning-columns whose value matches the nth
     * member of the bin_values list are placed in the nth bin. When a list is
     * provided the binning-column must be of type string or int.
     * <p>
     * NOTE:  The Kinetica instance being accessed must be running a CUDA
     * (GPU-based) build to service this request.
     * 
     * @param tableName  Name of the table on which the ranged-statistics
     *                   operation will be performed.
     * @param selectExpression  For a non-empty expression statistics are
     *                          calculated for those records for which the
     *                          expression is true.  The default value is ''.
     * @param columnName  Name of the binning-column used to divide the set
     *                    samples into bins.
     * @param valueColumnName  Name of the value-column for which statistics
     *                         are to be computed.
     * @param stats  A string of comma separated list of the statistics to
     *               calculate, e.g. 'sum,mean'. Available statistics: mean,
     *               stdv (standard deviation), variance, skew, kurtosis, sum.
     * @param start  The lower bound of the binning-column.
     * @param end  The upper bound of the binning-column.
     * @param interval  The interval of a bin. Set members fall into bin i if
     *                  the binning-column falls in the range
     *                  [start+interval*i, start+interval*(i+1)).
     * @param options  Map of optional parameters:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#ADDITIONAL_COLUMN_NAMES
     *                 ADDITIONAL_COLUMN_NAMES}: A list of comma separated
     *                 value-column names over which statistics can be
     *                 accumulated along with the primary value_column.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#BIN_VALUES
     *                 BIN_VALUES}: A list of comma separated binning-column
     *                 values. Values that match the nth bin_values value are
     *                 placed in the nth bin.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#WEIGHT_COLUMN_NAME
     *                 WEIGHT_COLUMN_NAME}: Name of the column used as
     *                 weighting column for the weighted_average statistic.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateStatisticsByRangeRequest.Options#ORDER_COLUMN_NAME
     *                 ORDER_COLUMN_NAME}: Name of the column used for
     *                 candlestick charting techniques.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateStatisticsByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateStatisticsByRangeResponse aggregateStatisticsByRange(String tableName, String selectExpression, String columnName, String valueColumnName, String stats, double start, double end, double interval, Map<String, String> options) throws GPUdbException {
        AggregateStatisticsByRangeRequest actualRequest_ = new AggregateStatisticsByRangeRequest(tableName, selectExpression, columnName, valueColumnName, stats, start, end, interval, options);
        AggregateStatisticsByRangeResponse actualResponse_ = new AggregateStatisticsByRangeResponse();
        submitRequest("/aggregate/statistics/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table or view (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available if the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateUniqueResponse aggregateUniqueRaw(AggregateUniqueRequest request) throws GPUdbException {
        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table or view (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available if the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUniqueResponse aggregateUnique(AggregateUniqueRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", request, actualResponse_, false);
        AggregateUniqueResponse response_ = new AggregateUniqueResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Returns all the unique values from a particular column (specified by
     * {@code columnName}) of a particular table or view (specified by {@code
     * tableName}). If {@code columnName} is a numeric column the values will
     * be in {@code binaryEncodedResponse}. Otherwise if {@code columnName} is
     * a string column the values will be in {@code jsonEncodedResponse}.  The
     * results can be paged via the {@code offset} and {@code limit}
     * parameters.
     * <p>
     * Columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a> are unable to be used with this function.
     * <p>
     * To get the first 10 unique values sorted in descending order {@code
     * options} would be::
     * <p>
     * {"limit":"10","sort_order":"descending"}.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * <p>
     * If a {@code result_table} name is specified in the {@code options}, the
     * results are stored in a new table with that name--no results are
     * returned in the response.  Both the table name and resulting column name
     * must adhere to <a href="../../../../concepts/tables.html#table"
     * target="_top">standard naming conventions</a>; any column expression
     * will need to be aliased.  If the source table's <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> is used as the {@code columnName}, the result table will be
     * sharded, in all other cases it will be replicated.  Sorting will
     * properly function only if the result table is replicated or if there is
     * only one processing node and should not be relied upon in other cases.
     * Not available if the value of {@code columnName} is an
     * unrestricted-length string.
     * 
     * @param tableName  Name of an existing table or view on which the
     *                   operation will be performed.
     * @param columnName  Name of the column or an expression containing one or
     *                    more column names on which the unique function would
     *                    be applied.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. If present, no results are returned in the
     *                 response. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>.  Not available if {@code
     *                 columnName} is an unrestricted-length string.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_FORCE_REPLICATED
     *                 RESULT_TABLE_FORCE_REPLICATED}: Force the result table
     *                 to be replicated (ignores any sharding). Must be used in
     *                 combination with the {@code result_table} option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#RESULT_TABLE_GENERATE_PK
     *                 RESULT_TABLE_GENERATE_PK}: If {@code true} then set a
     *                 primary key for the result table. Must be used in
     *                 combination with the {@code result_table} option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for the result table. Must be used in
     *                 combination with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUniqueRequest.Options#VIEW_ID
     *                 VIEW_ID}: ID of view of which the result table will be a
     *                 member.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUniqueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUniqueResponse aggregateUnique(String tableName, String columnName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        AggregateUniqueRequest actualRequest_ = new AggregateUniqueRequest(tableName, columnName, offset, limit, null, options);
        RawAggregateUniqueResponse actualResponse_ = new RawAggregateUniqueResponse();
        submitRequest("/aggregate/unique", actualRequest_, actualResponse_, false);
        AggregateUniqueResponse response_ = new AggregateUniqueResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * For unpivot details and examples, see <a
     * href="../../../../concepts/unpivot.html" target="_top">Unpivot</a>.  For
     * limitations, see <a href="../../../../concepts/unpivot.html#limitations"
     * target="_top">Unpivot Limitations</a>.
     * <p>
     * Unpivot is used to normalize tables that are built for cross tabular
     * reporting purposes. The unpivot operator rotates the column values for
     * all the pivoted columns. A variable column, value column and all columns
     * from the source table except the unpivot columns are projected into the
     * result table. The variable column and value columns in the result table
     * indicate the pivoted column name and values respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawAggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawAggregateUnpivotResponse aggregateUnpivotRaw(AggregateUnpivotRequest request) throws GPUdbException {
        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * For unpivot details and examples, see <a
     * href="../../../../concepts/unpivot.html" target="_top">Unpivot</a>.  For
     * limitations, see <a href="../../../../concepts/unpivot.html#limitations"
     * target="_top">Unpivot Limitations</a>.
     * <p>
     * Unpivot is used to normalize tables that are built for cross tabular
     * reporting purposes. The unpivot operator rotates the column values for
     * all the pivoted columns. A variable column, value column and all columns
     * from the source table except the unpivot columns are projected into the
     * result table. The variable column and value columns in the result table
     * indicate the pivoted column name and values respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUnpivotResponse aggregateUnpivot(AggregateUnpivotRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", request, actualResponse_, false);
        AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Rotate the column values into rows values.
     * <p>
     * For unpivot details and examples, see <a
     * href="../../../../concepts/unpivot.html" target="_top">Unpivot</a>.  For
     * limitations, see <a href="../../../../concepts/unpivot.html#limitations"
     * target="_top">Unpivot Limitations</a>.
     * <p>
     * Unpivot is used to normalize tables that are built for cross tabular
     * reporting purposes. The unpivot operator rotates the column values for
     * all the pivoted columns. A variable column, value column and all columns
     * from the source table except the unpivot columns are projected into the
     * result table. The variable column and value columns in the result table
     * indicate the pivoted column name and values respectively.
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table/view.
     * @param columnNames  List of column names or expressions. A wildcard '*'
     *                     can be used to include all the non-pivoted columns
     *                     from the source table.
     * @param variableColumnName  Specifies the variable/parameter column name.
     *                            The default value is ''.
     * @param valueColumnName  Specifies the value column name.  The default
     *                         value is ''.
     * @param pivotedColumns  List of one or more values typically the column
     *                        names of the input table. All the columns in the
     *                        source table must have the same data type.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the table specified in {@code result_table}. If
     *                 the collection provided is non-existent, the collection
     *                 will be automatically created. If empty, then the table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#RESULT_TABLE
     *                 RESULT_TABLE}: The name of the table used to store the
     *                 results. Has the same naming restrictions as <a
     *                 href="../../../../concepts/tables.html"
     *                 target="_top">tables</a>. If present, no results are
     *                 returned in the response.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#RESULT_TABLE_PERSIST
     *                 RESULT_TABLE_PERSIST}: If {@code true}, then the result
     *                 table specified in {@code result_table} will be
     *                 persisted and will not expire unless a {@code ttl} is
     *                 specified.   If {@code false}, then the result table
     *                 will be an in-memory table and will expire unless a
     *                 {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#EXPRESSION
     *                 EXPRESSION}: Filter expression to apply to the table
     *                 prior to unpivot processing.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by; e.g. 'timestamp asc, x desc'.  The columns
     *                 specified must be present in input table.  If any alias
     *                 is given for any column name, the alias must be used,
     *                 rather than the original column name.  The default value
     *                 is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for the result table. Must be used in
     *                 combination with the {@code result_table} option.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#LIMIT
     *                 LIMIT}: The number of records to keep.  The default
     *                 value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 result_table}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#VIEW_ID
     *                 VIEW_ID}: view this result table is part of.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: No longer used.  See <a
     *                 href="../../../../rm/concepts.html"
     *                 target="_top">Resource Management Concepts</a> for
     *                 information about how resources are managed, <a
     *                 href="../../../../rm/concepts.html" target="_top">Tier
     *                 Strategy Concepts</a> for how resources are targeted for
     *                 VRAM, and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">Tier Strategy Usage</a> for how to specify
     *                 a table's priority in VRAM.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#CREATE_INDEXES
     *                 CREATE_INDEXES}: Comma-separated list of columns on
     *                 which to create indexes on the table specified in {@code
     *                 result_table}. The columns specified must be present in
     *                 output column names.  If any alias is given for any
     *                 column name, the alias must be used, rather than the
     *                 original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#RESULT_TABLE_FORCE_REPLICATED
     *                 RESULT_TABLE_FORCE_REPLICATED}: Force the result table
     *                 to be replicated (ignores any sharding). Must be used in
     *                 combination with the {@code result_table} option.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AggregateUnpivotRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AggregateUnpivotResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AggregateUnpivotResponse aggregateUnpivot(String tableName, List<String> columnNames, String variableColumnName, String valueColumnName, List<String> pivotedColumns, Map<String, String> options) throws GPUdbException {
        AggregateUnpivotRequest actualRequest_ = new AggregateUnpivotRequest(tableName, columnNames, variableColumnName, valueColumnName, pivotedColumns, null, options);
        RawAggregateUnpivotResponse actualResponse_ = new RawAggregateUnpivotResponse();
        submitRequest("/aggregate/unpivot", actualRequest_, actualResponse_, false);
        AggregateUnpivotResponse response_ = new AggregateUnpivotResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Alters the properties of an exisiting resource group to facilitate
     * resource management.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterResourceGroupResponse alterResourceGroup(AlterResourceGroupRequest request) throws GPUdbException {
        AlterResourceGroupResponse actualResponse_ = new AlterResourceGroupResponse();
        submitRequest("/alter/resourcegroup", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters the properties of an exisiting resource group to facilitate
     * resource management.
     * 
     * @param name  Name of the group to be altered. Must be an existing
     *              resource group name.
     * @param tierAttributes  Optional map containing tier names and their
     *                        respective attribute group limits.  The only
     *                        valid attribute limit that can be set is
     *                        max_memory (in bytes) for the VRAM & RAM tiers.
     *                        For instance, to set max VRAM capacity to 1GB and
     *                        max RAM capacity to 10GB, use:
     *                        {'VRAM':{'max_memory':'1000000000'},
     *                        'RAM':{'max_memory':'10000000000'}}
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.AlterResourceGroupRequest.TierAttributes#MAX_MEMORY
     *                        MAX_MEMORY}: Maximum amount of memory usable in
     *                        the given tier at one time for this group.
     *                        </ul>
     *                        The default value is an empty {@link Map}.
     * @param ranking  If the resource group ranking is to be updated, this
     *                 indicates the relative ranking among existing resource
     *                 groups where this resource group will be moved; leave
     *                 blank if not changing the ranking.  When using {@code
     *                 before} or {@code after}, specify which resource group
     *                 this one will be inserted before or after in {@code
     *                 adjoiningResourceGroup}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#EMPTY_STRING
     *                 EMPTY_STRING}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#FIRST
     *                 FIRST}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#LAST
     *                 LAST}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#BEFORE
     *                 BEFORE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#AFTER
     *                 AFTER}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Ranking#EMPTY_STRING
     *                 EMPTY_STRING}.
     * @param adjoiningResourceGroup  If {@code ranking} is {@code before} or
     *                                {@code after}, this field indicates the
     *                                resource group before or after which the
     *                                current group will be placed; otherwise,
     *                                leave blank.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#MAX_CPU_CONCURRENCY
     *                 MAX_CPU_CONCURRENCY}: Maximum number of simultaneous
     *                 threads that will be used to execute a request for this
     *                 group.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#MAX_SCHEDULING_PRIORITY
     *                 MAX_SCHEDULING_PRIORITY}: Maximum priority of a
     *                 scheduled task for this group.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#MAX_TIER_PRIORITY
     *                 MAX_TIER_PRIORITY}: Maximum priority of a tiered object
     *                 for this group.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#IS_DEFAULT_GROUP
     *                 IS_DEFAULT_GROUP}: If {@code true}, this request applies
     *                 to the global default resource group. It is an error for
     *                 this field to be {@code true} when the {@code name}
     *                 field is also populated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterResourceGroupRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterResourceGroupResponse alterResourceGroup(String name, Map<String, Map<String, String>> tierAttributes, String ranking, String adjoiningResourceGroup, Map<String, String> options) throws GPUdbException {
        AlterResourceGroupRequest actualRequest_ = new AlterResourceGroupRequest(name, tierAttributes, ranking, adjoiningResourceGroup, options);
        AlterResourceGroupResponse actualResponse_ = new AlterResourceGroupResponse();
        submitRequest("/alter/resourcegroup", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a Role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterRoleResponse alterRole(AlterRoleRequest request) throws GPUdbException {
        AlterRoleResponse actualResponse_ = new AlterRoleResponse();
        submitRequest("/alter/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a Role.
     * 
     * @param name  Name of the role to be altered. Must be an existing role.
     * @param action  Modification operation to be applied to the role.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterRoleRequest.Action#SET_RESOURCE_GROUP
     *                SET_RESOURCE_GROUP}: Sets the resource group for an
     *                internal role. The resource group must exist, otherwise,
     *                an empty string assigns the role to the default resource
     *                group.
     *                </ul>
     * @param value  The value of the modification, depending on {@code
     *               action}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterRoleResponse alterRole(String name, String action, String value, Map<String, String> options) throws GPUdbException {
        AlterRoleRequest actualRequest_ = new AlterRoleRequest(name, action, value, options);
        AlterRoleResponse actualResponse_ = new AlterRoleResponse();
        submitRequest("/alter/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * The {@link GPUdb#alterSystemProperties(AlterSystemPropertiesRequest)}
     * endpoint is primarily used to simplify the testing of the system and is
     * not expected to be used during normal execution.  Commands are given
     * through the {@code propertyUpdatesMap} whose keys are commands and
     * values are strings representing integer values (for example '8000') or
     * boolean values ('true' or 'false').
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterSystemPropertiesResponse alterSystemProperties(AlterSystemPropertiesRequest request) throws GPUdbException {
        AlterSystemPropertiesResponse actualResponse_ = new AlterSystemPropertiesResponse();
        submitRequest("/alter/system/properties", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * The {@link GPUdb#alterSystemProperties(Map, Map)} endpoint is primarily
     * used to simplify the testing of the system and is not expected to be
     * used during normal execution.  Commands are given through the {@code
     * propertyUpdatesMap} whose keys are commands and values are strings
     * representing integer values (for example '8000') or boolean values
     * ('true' or 'false').
     * 
     * @param propertyUpdatesMap  Map containing the properties of the system
     *                            to be updated. Error if empty.
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SM_OMP_THREADS
     *                            SM_OMP_THREADS}: Set the number of OpenMP
     *                            threads that will be used to service filter &
     *                            aggregation requests against collections to
     *                            the specified integer value.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#KERNEL_OMP_THREADS
     *                            KERNEL_OMP_THREADS}: Set the number of kernel
     *                            OpenMP threads to the specified integer
     *                            value.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CONCURRENT_KERNEL_EXECUTION
     *                            CONCURRENT_KERNEL_EXECUTION}: Enables
     *                            concurrent kernel execution if the value is
     *                            {@code true} and disables it if the value is
     *                            {@code false}.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FALSE
     *                            FALSE}
     *                            </ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SUBTASK_CONCURRENCY_LIMIT
     *                            SUBTASK_CONCURRENCY_LIMIT}: Sets the maximum
     *                            number of simultaneous threads allocated to a
     *                            given request, on each rank. Note that thread
     *                            allocation may also be limted by resource
     *                            group limits and/or system load.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CHUNK_SIZE
     *                            CHUNK_SIZE}: Sets the number of records per
     *                            chunk to be used for all new tables.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#EVICT_COLUMNS
     *                            EVICT_COLUMNS}: Attempts to evict columns
     *                            from memory to the persistent store.  Value
     *                            string is a semicolon separated list of
     *                            entries, each entry being a table name
     *                            optionally followed by a comma and a comma
     *                            separated list of column names to attempt to
     *                            evict.  An empty value string will attempt to
     *                            evict all tables and columns.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#EXECUTION_MODE
     *                            EXECUTION_MODE}: Sets the execution_mode for
     *                            kernel executions to the specified string
     *                            value. Possible values are host, device,
     *                            default (engine decides) or an integer value
     *                            that indicates max chunk size to exec on host
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#EXTERNAL_FILES_DIRECTORY
     *                            EXTERNAL_FILES_DIRECTORY}: Sets the root
     *                            directory path where external table data
     *                            files are accessed from.  Path must exist on
     *                            the head node
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FLUSH_TO_DISK
     *                            FLUSH_TO_DISK}: Flushes any changes to any
     *                            tables to the persistent store.  These
     *                            changes include updates to the vector store,
     *                            object store, and text search store, Value
     *                            string is ignored
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#CLEAR_CACHE
     *                            CLEAR_CACHE}: Clears cached results.  Useful
     *                            to allow repeated timing of endpoints.  Value
     *                            string is the name of the table for which to
     *                            clear the cached results, or an empty string
     *                            to clear the cached results for all tables.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#COMMUNICATOR_TEST
     *                            COMMUNICATOR_TEST}: Invoke the communicator
     *                            test and report timing results. Value string
     *                            is is a semicolon separated list of
     *                            [key]=[value] expressions.  Expressions are:
     *                            num_transactions=[num] where num is the
     *                            number of request reply transactions to
     *                            invoke per test; message_size=[bytes] where
     *                            bytes is the size in bytes of the messages to
     *                            send; check_values=[enabled] where if enabled
     *                            is true the value of the messages received
     *                            are verified.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SET_MESSAGE_TIMERS_ENABLED
     *                            SET_MESSAGE_TIMERS_ENABLED}: Enables the
     *                            communicator test to collect additional
     *                            timing statistics when the value string is
     *                            {@code true}. Disables the collection when
     *                            the value string is {@code false}
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#FALSE
     *                            FALSE}
     *                            </ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#NETWORK_SPEED
     *                            NETWORK_SPEED}: Invoke the network speed test
     *                            and report timing results. Value string is a
     *                            semicolon-separated list of [key]=[value]
     *                            expressions.  Valid expressions are:
     *                            seconds=[time] where time is the time in
     *                            seconds to run the test; data_size=[bytes]
     *                            where bytes is the size in bytes of the block
     *                            to be transferred; threads=[number of
     *                            threads]; to_ranks=[space-separated list of
     *                            ranks] where the list of ranks is the ranks
     *                            that rank 0 will send data to and get data
     *                            from. If to_ranks is unspecified then all
     *                            worker ranks are used.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#REQUEST_TIMEOUT
     *                            REQUEST_TIMEOUT}: Number of minutes after
     *                            which filtering (e.g., {@link
     *                            GPUdb#filter(String, String, String, Map)})
     *                            and aggregating (e.g., {@link
     *                            GPUdb#aggregateGroupByRaw(AggregateGroupByRequest)})
     *                            queries will timeout.  The default value is
     *                            '20'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#MAX_GET_RECORDS_SIZE
     *                            MAX_GET_RECORDS_SIZE}: The maximum number of
     *                            records the database will serve for a given
     *                            data retrieval call.  The default value is
     *                            '20000'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#ENABLE_AUDIT
     *                            ENABLE_AUDIT}: Enable or disable auditing.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_HEADERS
     *                            AUDIT_HEADERS}: Enable or disable auditing of
     *                            request headers.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_BODY
     *                            AUDIT_BODY}: Enable or disable auditing of
     *                            request bodies.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#AUDIT_DATA
     *                            AUDIT_DATA}: Enable or disable auditing of
     *                            request data.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SHADOW_AGG_SIZE
     *                            SHADOW_AGG_SIZE}: Size of the shadow
     *                            aggregate chunk cache in bytes.  The default
     *                            value is '10000000'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SHADOW_FILTER_SIZE
     *                            SHADOW_FILTER_SIZE}: Size of the shdow filter
     *                            chunk cache in bytes.  The default value is
     *                            '10000000'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#SYNCHRONOUS_COMPRESSION
     *                            SYNCHRONOUS_COMPRESSION}: compress vector on
     *                            set_compression (instead of waiting for
     *                            background thread).  The default value is
     *                            'false'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#ENABLE_OVERLAPPED_EQUI_JOIN
     *                            ENABLE_OVERLAPPED_EQUI_JOIN}: Enable
     *                            overlapped-equi-join filter.  The default
     *                            value is 'true'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.AlterSystemPropertiesRequest.PropertyUpdatesMap#ENABLE_COMPOUND_EQUI_JOIN
     *                            ENABLE_COMPOUND_EQUI_JOIN}: Enable
     *                            compound-equi-join filter plan type.  The
     *                            default value is 'false'.
     *                            </ul>
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterSystemPropertiesResponse alterSystemProperties(Map<String, String> propertyUpdatesMap, Map<String, String> options) throws GPUdbException {
        AlterSystemPropertiesRequest actualRequest_ = new AlterSystemPropertiesRequest(propertyUpdatesMap, options);
        AlterSystemPropertiesResponse actualResponse_ = new AlterSystemPropertiesResponse();
        submitRequest("/alter/system/properties", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to a table, view, or collection.  The
     * available modifications include the following:
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified, including
     * whether it is <a href="../../../../concepts/compression.html"
     * target="_top">compressed</a> or not.
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Create or delete a <a
     * href="../../../../concepts/tables.html#foreign-key"
     * target="_top">foreign key</a>
     * on a particular column.
     * <p>
     * Manage a
     * <a href="../../../../concepts/tables.html#partitioning-by-range"
     * target="_top">range-partitioned</a> or a
     * <a href="../../../../concepts/tables.html#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a>
     * table's partitions.
     * <p>
     * Set (or reset) the <a
     * href="../../../../rm/concepts.html#tier-strategies" target="_top">tier
     * strategy</a>
     * of a table or view.
     * <p>
     * Refresh and manage the refresh mode of a
     * <a href="../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a>.
     * <p>
     * Set the <a href="../../../../concepts/ttl.html"
     * target="_top">time-to-live (TTL)</a>. This can be applied
     * to tables, views, or collections.  When applied to collections, every
     * contained
     * table & view that is not protected will have its TTL set to the given
     * value.
     * <p>
     * Set the global access mode (i.e. locking) for a table. This setting
     * trumps any
     * role-based access controls that may be in place; e.g., a user with write
     * access
     * to a table marked read-only will not be able to insert records into it.
     * The mode
     * can be set to read-only, write-only, read/write, and no access.
     * <p>
     * Change the <a href="../../../../concepts/protection.html"
     * target="_top">protection</a> mode to prevent or
     * allow automatic expiration. This can be applied to tables, views, and
     * collections.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableResponse alterTable(AlterTableRequest request) throws GPUdbException {
        AlterTableResponse actualResponse_ = new AlterTableResponse();
        submitRequest("/alter/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to a table, view, or collection.  The
     * available modifications include the following:
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified, including
     * whether it is <a href="../../../../concepts/compression.html"
     * target="_top">compressed</a> or not.
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Create or delete a <a
     * href="../../../../concepts/tables.html#foreign-key"
     * target="_top">foreign key</a>
     * on a particular column.
     * <p>
     * Manage a
     * <a href="../../../../concepts/tables.html#partitioning-by-range"
     * target="_top">range-partitioned</a> or a
     * <a href="../../../../concepts/tables.html#partitioning-by-list-manual"
     * target="_top">manual list-partitioned</a>
     * table's partitions.
     * <p>
     * Set (or reset) the <a
     * href="../../../../rm/concepts.html#tier-strategies" target="_top">tier
     * strategy</a>
     * of a table or view.
     * <p>
     * Refresh and manage the refresh mode of a
     * <a href="../../../../concepts/materialized_views.html"
     * target="_top">materialized view</a>.
     * <p>
     * Set the <a href="../../../../concepts/ttl.html"
     * target="_top">time-to-live (TTL)</a>. This can be applied
     * to tables, views, or collections.  When applied to collections, every
     * contained
     * table & view that is not protected will have its TTL set to the given
     * value.
     * <p>
     * Set the global access mode (i.e. locking) for a table. This setting
     * trumps any
     * role-based access controls that may be in place; e.g., a user with write
     * access
     * to a table marked read-only will not be able to insert records into it.
     * The mode
     * can be set to read-only, write-only, read/write, and no access.
     * <p>
     * Change the <a href="../../../../concepts/protection.html"
     * target="_top">protection</a> mode to prevent or
     * allow automatic expiration. This can be applied to tables, views, and
     * collections.
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table, view, or collection.
     * @param action  Modification operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ALLOW_HOMOGENEOUS_TABLES
     *                ALLOW_HOMOGENEOUS_TABLES}: No longer supported; action
     *                will be ignored.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_INDEX
     *                CREATE_INDEX}: Creates either a <a
     *                href="../../../../concepts/indexes.html#column-index"
     *                target="_top">column (attribute) index</a> or <a
     *                href="../../../../concepts/indexes.html#chunk-skip-index"
     *                target="_top">chunk skip index</a>, depending on the
     *                specified {@code index_type}, on the column name
     *                specified in {@code value}. If this column already has
     *                the specified index, an error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_INDEX
     *                DELETE_INDEX}: Deletes either a <a
     *                href="../../../../concepts/indexes.html#column-index"
     *                target="_top">column (attribute) index</a> or <a
     *                href="../../../../concepts/indexes.html#chunk-skip-index"
     *                target="_top">chunk skip index</a>, depending on the
     *                specified {@code index_type}, on the column name
     *                specified in {@code value}. If this column does not have
     *                the specified index, an error will be returned.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#MOVE_TO_COLLECTION
     *                MOVE_TO_COLLECTION}: Moves a table or view into a
     *                collection named {@code value}.  If the collection
     *                provided is non-existent, the collection will be
     *                automatically created. If {@code value} is empty, then
     *                the table or view will be top-level.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#PROTECTED
     *                PROTECTED}: Sets whether the given {@code tableName}
     *                should be <a href="../../../../concepts/protection.html"
     *                target="_top">protected</a> or not. The {@code value}
     *                must be either 'true' or 'false'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#RENAME_TABLE
     *                RENAME_TABLE}: Renames a table, view or collection to
     *                {@code value}. Has the same naming restrictions as <a
     *                href="../../../../concepts/tables.html"
     *                target="_top">tables</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#TTL TTL}:
     *                Sets the <a href="../../../../concepts/ttl.html"
     *                target="_top">time-to-live</a> in minutes of the table,
     *                view, or collection specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_COLUMN
     *                ADD_COLUMN}: Adds the column specified in {@code value}
     *                to the table specified in {@code tableName}.  Use {@code
     *                column_type} and {@code column_properties} in {@code
     *                options} to set the column's type and properties,
     *                respectively.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CHANGE_COLUMN
     *                CHANGE_COLUMN}: Changes type and properties of the column
     *                specified in {@code value}.  Use {@code column_type} and
     *                {@code column_properties} in {@code options} to set the
     *                column's type and properties, respectively. Note that
     *                primary key and/or shard key columns cannot be changed.
     *                All unchanging column properties must be listed for the
     *                change to take place, e.g., to add dictionary encoding to
     *                an existing 'char4' column, both 'char4' and 'dict' must
     *                be specified in the {@code options} map.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_COLUMN_COMPRESSION
     *                SET_COLUMN_COMPRESSION}: Modifies the <a
     *                href="../../../../concepts/compression.html"
     *                target="_top">compression</a> setting on the column
     *                specified in {@code value} to the compression type
     *                specified in {@code compression_type}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_COLUMN
     *                DELETE_COLUMN}: Deletes the column specified in {@code
     *                value} from the table specified in {@code tableName}.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#CREATE_FOREIGN_KEY
     *                CREATE_FOREIGN_KEY}: Creates a <a
     *                href="../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a> specified in {@code value}
     *                using the format '(source_column_name [, ...]) references
     *                target_table_name(primary_key_column_name [, ...]) [as
     *                foreign_key_name]'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_FOREIGN_KEY
     *                DELETE_FOREIGN_KEY}: Deletes a <a
     *                href="../../../../concepts/tables.html#foreign-key"
     *                target="_top">foreign key</a>.  The {@code value} should
     *                be the foreign_key_name specified when creating the key
     *                or the complete string used to define it.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#ADD_PARTITION
     *                ADD_PARTITION}: Adds the partition specified in {@code
     *                value}, to either a <a
     *                href="../../../../concepts/tables.html#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../concepts/tables.html#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_PARTITION
     *                REMOVE_PARTITION}: Removes the partition specified in
     *                {@code value} (and relocates all of its data to the
     *                default partition) from either a <a
     *                href="../../../../concepts/tables.html#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../concepts/tables.html#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#DELETE_PARTITION
     *                DELETE_PARTITION}: Deletes the partition specified in
     *                {@code value} (and all of its data) from either a <a
     *                href="../../../../concepts/tables.html#partitioning-by-range"
     *                target="_top">range-partitioned</a> or <a
     *                href="../../../../concepts/tables.html#partitioning-by-list-manual"
     *                target="_top">manual list-partitioned</a> table.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_GLOBAL_ACCESS_MODE
     *                SET_GLOBAL_ACCESS_MODE}: Sets the global access mode
     *                (i.e. locking) for the table specified in {@code
     *                tableName}. Specify the access mode in {@code value}.
     *                Valid modes are 'no_access', 'read_only', 'write_only'
     *                and 'read_write'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REFRESH
     *                REFRESH}: Replays all the table creation commands
     *                required to create this <a
     *                href="../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a>.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_METHOD
     *                SET_REFRESH_METHOD}: Sets the method by which this <a
     *                href="../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> is refreshed to the
     *                method specified in {@code value} - one of 'manual',
     *                'periodic', 'on_change'.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_START_TIME
     *                SET_REFRESH_START_TIME}: Sets the time to start periodic
     *                refreshes of this <a
     *                href="../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> to the datetime
     *                string specified in {@code value} with format 'YYYY-MM-DD
     *                HH:MM:SS'.  Subsequent refreshes occur at the specified
     *                time + N * the refresh period.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_REFRESH_PERIOD
     *                SET_REFRESH_PERIOD}: Sets the time interval in seconds at
     *                which to refresh this <a
     *                href="../../../../concepts/materialized_views.html"
     *                target="_top">materialized view</a> to the value
     *                specified in {@code value}.  Also, sets the refresh
     *                method to periodic if not already set.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#REMOVE_TEXT_SEARCH_ATTRIBUTES
     *                REMOVE_TEXT_SEARCH_ATTRIBUTES}: Removes <a
     *                href="../../../../concepts/full_text_search.html"
     *                target="_top">text search</a> attribute from all columns.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterTableRequest.Action#SET_STRATEGY_DEFINITION
     *                SET_STRATEGY_DEFINITION}: Sets the <a
     *                href="../../../../rm/concepts.html#tier-strategies"
     *                target="_top">tier strategy</a> for the table and its
     *                columns to the one specified in {@code value}, replacing
     *                the existing tier strategy in its entirety. See <a
     *                href="../../../../rm/concepts.html#tier-strategies"
     *                target="_top">tier strategy usage</a> for format and <a
     *                href="../../../../rm/usage.html#tier-strategies"
     *                target="_top">tier strategy examples</a> for examples.
     *                </ul>
     * @param value  The value of the modification, depending on {@code
     *               action}.  For example, if {@code action} is {@code
     *               add_column}, this would be the column name; while the
     *               column's definition would be covered by the {@code
     *               column_type}, {@code column_properties}, {@code
     *               column_default_value}, and {@code add_column_expression}
     *               in {@code options}.  If {@code action} is {@code ttl}, it
     *               would be the number of minutes for the new TTL. If {@code
     *               action} is {@code refresh}, this field would be blank.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ACTION
     *                 ACTION}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_NAME
     *                 COLUMN_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TABLE_NAME
     *                 TABLE_NAME}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_DEFAULT_VALUE
     *                 COLUMN_DEFAULT_VALUE}: When adding a column, set a
     *                 default value for existing records.  For nullable
     *                 columns, the default value will be null, regardless of
     *                 data type.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_PROPERTIES
     *                 COLUMN_PROPERTIES}: When adding or changing a column,
     *                 set the column properties (strings, separated by a
     *                 comma: data, store_only, text_search, char8, int8 etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN_TYPE
     *                 COLUMN_TYPE}: When adding or changing a column, set the
     *                 column type (strings, separated by a comma: int, double,
     *                 string, null etc).
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COMPRESSION_TYPE
     *                 COMPRESSION_TYPE}: When setting column compression
     *                 ({@code set_column_compression} for {@code action}),
     *                 compression type to use: {@code none} (to use no
     *                 compression) or a valid compression type.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#NONE NONE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4 LZ4}
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#LZ4HC
     *                 LZ4HC}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#SNAPPY
     *                 SNAPPY}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COPY_VALUES_FROM_COLUMN
     *                 COPY_VALUES_FROM_COLUMN}: Deprecated.  Please use {@code
     *                 add_column_expression} instead.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#RENAME_COLUMN
     *                 RENAME_COLUMN}: When changing a column, specify new
     *                 column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column,
     *                 validate the change before applying it. If {@code true},
     *                 then validate all values. A value too large (or too
     *                 long) for the new type will prevent any change. If
     *                 {@code false}, then when a value is too large or long,
     *                 it will be truncated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 true
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: false
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#UPDATE_LAST_ACCESS_TIME
     *                 UPDATE_LAST_ACCESS_TIME}: Indicates whether the <a
     *                 href="../../../../concepts/ttl.html"
     *                 target="_top">time-to-live</a> (TTL) expiration
     *                 countdown timer should be reset to the table's TTL.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}:
     *                 Reset the expiration countdown timer to the table's
     *                 configured TTL.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#FALSE
     *                 FALSE}: Don't reset the timer; expiration countdown will
     *                 continue from where it is, as if the table had not been
     *                 accessed.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#ADD_COLUMN_EXPRESSION
     *                 ADD_COLUMN_EXPRESSION}: When adding a column, an
     *                 optional expression to use for the new column's values.
     *                 Any valid expression may be used, including one
     *                 containing references to existing columns in the same
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#STRATEGY_DEFINITION
     *                 STRATEGY_DEFINITION}: Optional parameter for specifying
     *                 the <a
     *                 href="../../../../rm/concepts.html#tier-strategies"
     *                 target="_top">tier strategy</a> for the table and its
     *                 columns when {@code action} is {@code
     *                 set_strategy_definition}, replacing the existing tier
     *                 strategy in its entirety. See <a
     *                 href="../../../../rm/concepts.html#tier-strategies"
     *                 target="_top">tier strategy usage</a> for format and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">tier strategy examples</a> for examples.
     *                 This option will be ignored if {@code value} is also
     *                 specified.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#INDEX_TYPE
     *                 INDEX_TYPE}: Type of index to create, when {@code
     *                 action} is {@code create_index}, or to delete, when
     *                 {@code action} is {@code delete_index}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}: Create or delete a <a
     *                 href="../../../../concepts/indexes.html#column-index"
     *                 target="_top">column (attribute) index</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#CHUNK_SKIP
     *                 CHUNK_SKIP}: Create or delete a <a
     *                 href="../../../../concepts/indexes.html#chunk-skip-index"
     *                 target="_top">chunk skip index</a>.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AlterTableRequest.Options#COLUMN
     *                 COLUMN}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableResponse alterTable(String tableName, String action, String value, Map<String, String> options) throws GPUdbException {
        AlterTableRequest actualRequest_ = new AlterTableRequest(tableName, action, value, options);
        AlterTableResponse actualResponse_ = new AlterTableResponse();
        submitRequest("/alter/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to columns in a table, view.  The available
     * modifications include the following:
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified.
     * <p>
     * Set or unset <a href="../../../../concepts/compression.html"
     * target="_top">compression</a> for a column.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableColumnsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableColumnsResponse alterTableColumns(AlterTableColumnsRequest request) throws GPUdbException {
        AlterTableColumnsResponse actualResponse_ = new AlterTableColumnsResponse();
        submitRequest("/alter/table/columns", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Apply various modifications to columns in a table, view.  The available
     * modifications include the following:
     * <p>
     * Create or delete an <a
     * href="../../../../concepts/indexes.html#column-index"
     * target="_top">index</a> on a
     * particular column. This can speed up certain operations when using
     * expressions
     * containing equality or relational operators on indexed columns. This
     * only
     * applies to tables.
     * <p>
     * Manage a table's columns--a column can be added, removed, or have its
     * <a href="../../../../concepts/types.html" target="_top">type and
     * properties</a> modified.
     * <p>
     * Set or unset <a href="../../../../concepts/compression.html"
     * target="_top">compression</a> for a column.
     * 
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table or view.
     * @param columnAlterations  list of alter table add/delete/change column
     *                           requests - all for the same table.
     *                                           each request is a map that
     *                           includes 'column_name', 'action' and the
     *                           options specific for the action,
     *                                           note that the same options as
     *                           in alter table requests but in the same map as
     *                           the column name and the action. For example:
     *                           [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},
     *                           {'column_name':'col_1','action':'add_column',
     *                           'type':'int','default_value':'1'}
     *                                           ]
     * @param options  Optional parameters.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableColumnsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableColumnsResponse alterTableColumns(String tableName, List<Map<String, String>> columnAlterations, Map<String, String> options) throws GPUdbException {
        AlterTableColumnsRequest actualRequest_ = new AlterTableColumnsRequest(tableName, columnAlterations, options);
        AlterTableColumnsResponse actualResponse_ = new AlterTableColumnsResponse();
        submitRequest("/alter/table/columns", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates (adds or changes) metadata for tables. The metadata key and
     * values must both be strings. This is an easy way to annotate whole
     * tables rather than single records within tables.  Some examples of
     * metadata are owner of the table, table creation timestamp etc.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableMetadataResponse alterTableMetadata(AlterTableMetadataRequest request) throws GPUdbException {
        AlterTableMetadataResponse actualResponse_ = new AlterTableMetadataResponse();
        submitRequest("/alter/table/metadata", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates (adds or changes) metadata for tables. The metadata key and
     * values must both be strings. This is an easy way to annotate whole
     * tables rather than single records within tables.  Some examples of
     * metadata are owner of the table, table creation timestamp etc.
     * 
     * @param tableNames  Names of the tables whose metadata will be updated.
     *                    All specified tables must exist, or an error will be
     *                    returned.
     * @param metadataMap  A map which contains the metadata of the tables that
     *                     are to be updated. Note that only one map is
     *                     provided for all the tables; so the change will be
     *                     applied to every table. If the provided map is
     *                     empty, then all existing metadata for the table(s)
     *                     will be cleared.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTableMetadataResponse alterTableMetadata(List<String> tableNames, Map<String, String> metadataMap, Map<String, String> options) throws GPUdbException {
        AlterTableMetadataRequest actualRequest_ = new AlterTableMetadataRequest(tableNames, metadataMap, options);
        AlterTableMetadataResponse actualResponse_ = new AlterTableMetadataResponse();
        submitRequest("/alter/table/metadata", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters properties of an exisiting <a
     * href="../../../../rm/concepts.html#storage-tiers" target="_top">tier</a>
     * to facilitate <a href="../../../../rm/concepts.html"
     * target="_top">resource management</a>.
     * <p>
     * To disable <a
     * href="../../../../rm/concepts.html#watermark-based-eviction"
     * target="_top">watermark-based eviction</a>, set both {@code
     * high_watermark} and {@code low_watermark} to 100.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTierResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTierResponse alterTier(AlterTierRequest request) throws GPUdbException {
        AlterTierResponse actualResponse_ = new AlterTierResponse();
        submitRequest("/alter/tier", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters properties of an exisiting <a
     * href="../../../../rm/concepts.html#storage-tiers" target="_top">tier</a>
     * to facilitate <a href="../../../../rm/concepts.html"
     * target="_top">resource management</a>.
     * <p>
     * To disable <a
     * href="../../../../rm/concepts.html#watermark-based-eviction"
     * target="_top">watermark-based eviction</a>, set both {@code
     * high_watermark} and {@code low_watermark} to 100.
     * 
     * @param name  Name of the tier to be altered. Must be an existing tier
     *              group name.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTierRequest.Options#CAPACITY
     *                 CAPACITY}: Maximum size in bytes this tier may hold at
     *                 once.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTierRequest.Options#HIGH_WATERMARK
     *                 HIGH_WATERMARK}: Threshold of usage of this tier's
     *                 resource that, once exceeded, will trigger
     *                 watermark-based eviction from this tier.
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterTierRequest.Options#LOW_WATERMARK
     *                 LOW_WATERMARK}: Threshold of resource usage that, once
     *                 fallen below after crossing the {@code high_watermark},
     *                 will cease watermark-based eviction from this tier.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterTierResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterTierResponse alterTier(String name, Map<String, String> options) throws GPUdbException {
        AlterTierRequest actualRequest_ = new AlterTierRequest(name, options);
        AlterTierResponse actualResponse_ = new AlterTierResponse();
        submitRequest("/alter/tier", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterUserResponse alterUser(AlterUserRequest request) throws GPUdbException {
        AlterUserResponse actualResponse_ = new AlterUserResponse();
        submitRequest("/alter/user", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Alters a user.
     * 
     * @param name  Name of the user to be altered. Must be an existing user.
     * @param action  Modification operation to be applied to the user.
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterUserRequest.Action#SET_PASSWORD
     *                SET_PASSWORD}: Sets the password of the user. The user
     *                must be an internal user.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterUserRequest.Action#SET_RESOURCE_GROUP
     *                SET_RESOURCE_GROUP}: Sets the resource group for an
     *                internal user. The resource group must exist, otherwise,
     *                an empty string assigns the user to the default resource
     *                group.
     *                </ul>
     * @param value  The value of the modification, depending on {@code
     *               action}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AlterUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AlterUserResponse alterUser(String name, String action, String value, Map<String, String> options) throws GPUdbException {
        AlterUserRequest actualRequest_ = new AlterUserRequest(name, action, value, options);
        AlterUserResponse actualResponse_ = new AlterUserResponse();
        submitRequest("/alter/user", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Append (or insert) all records from a source table (specified by {@code
     * sourceTableName}) to a particular target table (specified by {@code
     * tableName}). The field map (specified by {@code fieldMap}) holds the
     * user specified map of target table column names with their mapped source
     * column names.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AppendRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AppendRecordsResponse appendRecords(AppendRecordsRequest request) throws GPUdbException {
        AppendRecordsResponse actualResponse_ = new AppendRecordsResponse();
        submitRequest("/append/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Append (or insert) all records from a source table (specified by {@code
     * sourceTableName}) to a particular target table (specified by {@code
     * tableName}). The field map (specified by {@code fieldMap}) holds the
     * user specified map of target table column names with their mapped source
     * column names.
     * 
     * @param tableName  The table name for the records to be appended. Must be
     *                   an existing table.
     * @param sourceTableName  The source table name to get records from. Must
     *                         be an existing table name.
     * @param fieldMap  Contains the mapping of column names from the target
     *                  table (specified by {@code tableName}) as the keys, and
     *                  corresponding column names or expressions (e.g.,
     *                  'col_name+1') from the source table (specified by
     *                  {@code sourceTableName}). Must be existing column names
     *                  in source table and target table, and their types must
     *                  be matched. For details on using expressions, see <a
     *                  href="../../../../concepts/expressions.html"
     *                  target="_top">Expressions</a>.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#OFFSET
     *                 OFFSET}: A positive integer indicating the number of
     *                 initial results to skip from {@code sourceTableName}.
     *                 Default is 0. The minimum allowed value is 0. The
     *                 maximum allowed value is MAX_INT.  The default value is
     *                 '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#LIMIT
     *                 LIMIT}: A positive integer indicating the maximum number
     *                 of results to be returned from {@code sourceTableName}.
     *                 Or END_OF_SET (-9999) to indicate that the max number of
     *                 results should be returned.  The default value is
     *                 '-9999'.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 {@code sourceTableName}.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by from source table (specified by {@code
     *                 sourceTableName}), e.g., 'timestamp asc, x desc'. The
     *                 {@code order_by} columns do not have to be present in
     *                 {@code fieldMap}.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting the source table records (specified
     *                 by {@code sourceTableName}) into the target table
     *                 (specified by {@code tableName}) table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing target table record with primary key values
     *                 that match those of a source table record being inserted
     *                 will be replaced by that new record.  If set to {@code
     *                 false}, any existing target table record with primary
     *                 key values that match those of a source table record
     *                 being inserted will remain unchanged and the new record
     *                 discarded.  If the specified table does not have a
     *                 primary key, then this option is ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#TRUNCATE_STRINGS
     *                 TRUNCATE_STRINGS}: If set to {@code true}, it allows
     *                 inserting longer strings into smaller charN string
     *                 columns by truncating the longer strings to fit.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AppendRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  AppendRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public AppendRecordsResponse appendRecords(String tableName, String sourceTableName, Map<String, String> fieldMap, Map<String, String> options) throws GPUdbException {
        AppendRecordsRequest actualRequest_ = new AppendRecordsRequest(tableName, sourceTableName, fieldMap, options);
        AppendRecordsResponse actualResponse_ = new AppendRecordsResponse();
        submitRequest("/append/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears statistics (cardinality, mean value, etc.) for a column in a
     * specified table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearStatisticsResponse clearStatistics(ClearStatisticsRequest request) throws GPUdbException {
        ClearStatisticsResponse actualResponse_ = new ClearStatisticsResponse();
        submitRequest("/clear/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears statistics (cardinality, mean value, etc.) for a column in a
     * specified table.
     * 
     * @param tableName  Name of a table. Must be an existing table.  The
     *                   default value is ''.
     * @param columnName  Name of the column in {@code tableName} for which to
     *                    clear statistics. The column must be from an existing
     *                    table. An empty string clears statistics for all
     *                    columns in the table.  The default value is ''.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearStatisticsResponse clearStatistics(String tableName, String columnName, Map<String, String> options) throws GPUdbException {
        ClearStatisticsRequest actualRequest_ = new ClearStatisticsRequest(tableName, columnName, options);
        ClearStatisticsResponse actualResponse_ = new ClearStatisticsResponse();
        submitRequest("/clear/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears (drops) one or all tables in the database cluster. The operation
     * is synchronous meaning that the table will be cleared before the
     * function returns. The response payload returns the status of the
     * operation along with the name of the table that was cleared.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableResponse clearTable(ClearTableRequest request) throws GPUdbException {
        ClearTableResponse actualResponse_ = new ClearTableResponse();
        submitRequest("/clear/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears (drops) one or all tables in the database cluster. The operation
     * is synchronous meaning that the table will be cleared before the
     * function returns. The response payload returns the status of the
     * operation along with the name of the table that was cleared.
     * 
     * @param tableName  Name of the table to be cleared. Must be an existing
     *                   table. Empty string clears all available tables,
     *                   though this behavior is be prevented by default via
     *                   gpudb.conf parameter 'disable_clear_all'.  The default
     *                   value is ''.
     * @param authorization  No longer used. User can pass an empty string.
     *                       The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code true} and if the
     *                 table specified in {@code tableName} does not exist no
     *                 error is returned. If {@code false} and if the table
     *                 specified in {@code tableName} does not exist then an
     *                 error is returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ClearTableRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableResponse clearTable(String tableName, String authorization, Map<String, String> options) throws GPUdbException {
        ClearTableRequest actualRequest_ = new ClearTableRequest(tableName, authorization, options);
        ClearTableResponse actualResponse_ = new ClearTableResponse();
        submitRequest("/clear/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deactivates a table monitor previously created with {@link
     * GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableMonitorResponse clearTableMonitor(ClearTableMonitorRequest request) throws GPUdbException {
        ClearTableMonitorResponse actualResponse_ = new ClearTableMonitorResponse();
        submitRequest("/clear/tablemonitor", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deactivates a table monitor previously created with {@link
     * GPUdb#createTableMonitor(String, Map)}.
     * 
     * @param topicId  The topic ID returned by {@link
     *                 GPUdb#createTableMonitor(String, Map)}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTableMonitorResponse clearTableMonitor(String topicId, Map<String, String> options) throws GPUdbException {
        ClearTableMonitorRequest actualRequest_ = new ClearTableMonitorRequest(topicId, options);
        ClearTableMonitorResponse actualResponse_ = new ClearTableMonitorResponse();
        submitRequest("/clear/tablemonitor", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears or cancels the trigger identified by the specified handle. The
     * output returns the handle of the trigger cleared as well as indicating
     * success or failure of the trigger deactivation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTriggerResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTriggerResponse clearTrigger(ClearTriggerRequest request) throws GPUdbException {
        ClearTriggerResponse actualResponse_ = new ClearTriggerResponse();
        submitRequest("/clear/trigger", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Clears or cancels the trigger identified by the specified handle. The
     * output returns the handle of the trigger cleared as well as indicating
     * success or failure of the trigger deactivation.
     * 
     * @param triggerId  ID for the trigger to be deactivated.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ClearTriggerResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ClearTriggerResponse clearTrigger(String triggerId, Map<String, String> options) throws GPUdbException {
        ClearTriggerRequest actualRequest_ = new ClearTriggerRequest(triggerId, options);
        ClearTriggerResponse actualResponse_ = new ClearTriggerResponse();
        submitRequest("/clear/trigger", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Collect statistics for a column(s) in a specified table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CollectStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CollectStatisticsResponse collectStatistics(CollectStatisticsRequest request) throws GPUdbException {
        CollectStatisticsResponse actualResponse_ = new CollectStatisticsResponse();
        submitRequest("/collect/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Collect statistics for a column(s) in a specified table.
     * 
     * @param tableName  Name of a table. Must be an existing table.
     * @param columnNames  List of one or more column names in {@code
     *                     tableName} for which to collect statistics
     *                     (cardinality, mean value, etc.).
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CollectStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CollectStatisticsResponse collectStatistics(String tableName, List<String> columnNames, Map<String, String> options) throws GPUdbException {
        CollectStatisticsRequest actualRequest_ = new CollectStatisticsRequest(tableName, columnNames, options);
        CollectStatisticsResponse actualResponse_ = new CollectStatisticsResponse();
        submitRequest("/collect/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public CreateExternalTableResponse createExternalTable(CreateExternalTableRequest request) throws GPUdbException {
        CreateExternalTableResponse actualResponse_ = new CreateExternalTableResponse();
        submitRequest("/create/externaltable", request, actualResponse_, false);
        return actualResponse_;
    }



    public CreateExternalTableResponse createExternalTable(String tableName, List<String> filepaths, Map<String, String> createTableOptions, Map<String, String> options) throws GPUdbException {
        CreateExternalTableRequest actualRequest_ = new CreateExternalTableRequest(tableName, filepaths, createTableOptions, options);
        CreateExternalTableResponse actualResponse_ = new CreateExternalTableResponse();
        submitRequest("/create/externaltable", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new graph network using given nodes, edges, weights, and
     * restrictions.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some <a href="../../../../graph_solver/examples.html"
     * target="_top">graph examples</a> before
     * using this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateGraphResponse createGraph(CreateGraphRequest request) throws GPUdbException {
        CreateGraphResponse actualResponse_ = new CreateGraphResponse();
        submitRequest("/create/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new graph network using given nodes, edges, weights, and
     * restrictions.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some <a href="../../../../graph_solver/examples.html"
     * target="_top">graph examples</a> before
     * using this endpoint.
     * 
     * @param graphName  Name of the graph resource to generate.
     * @param directedGraph  If set to {@code true}, the graph will be
     *                       directed. If set to {@code false}, the graph will
     *                       not be directed. Consult <a
     *                       href="../../../../graph_solver/network_graph_solver.html#directed-graphs"
     *                       target="_top">Directed Graphs</a> for more
     *                       details.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#FALSE
     *                       FALSE}
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.CreateGraphRequest.DirectedGraph#TRUE
     *                       TRUE}.
     * @param nodes  Nodes represent fundamental topological units of a graph.
     *               Nodes must be specified using
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS NODE_ID', expressions, e.g.,
     *               'ST_MAKEPOINT(column1, column2) AS NODE_WKTPOINT', or
     *               constant values, e.g.,
     *               '{9, 10, 11} AS NODE_ID'.
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * @param edges  Edges represent the required fundamental topological unit
     *               of
     *               a graph that typically connect nodes. Edges must be
     *               specified using
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *               target="_top">identifiers</a>;
     *               identifiers are grouped as
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *               target="_top">combinations</a>.
     *               Identifiers can be used with existing column names, e.g.,
     *               'table.column AS EDGE_ID', expressions, e.g.,
     *               'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or constant
     *               values, e.g.,
     *               "{'family', 'coworker'} AS EDGE_LABEL".
     *               If using constant values in an identifier combination, the
     *               number of values
     *               specified must match across the combination.
     * @param weights  Weights represent a method of informing the graph solver
     *                 of
     *                 the cost of including a given edge in a solution.
     *                 Weights must be specified
     *                 using
     *                 <a
     *                 href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                 target="_top">identifiers</a>;
     *                 identifiers are grouped as
     *                 <a
     *                 href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                 target="_top">combinations</a>.
     *                 Identifiers can be used with existing column names,
     *                 e.g.,
     *                 'table.column AS WEIGHTS_EDGE_ID', expressions, e.g.,
     *                 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or constant
     *                 values, e.g.,
     *                 '{4, 15} AS WEIGHTS_VALUESPECIFIED'.
     *                 If using constant values in an identifier combination,
     *                 the number of values specified
     *                 must match across the combination.
     * @param restrictions  Restrictions represent a method of informing the
     *                      graph
     *                      solver which edges and/or nodes should be ignored
     *                      for the solution. Restrictions
     *                      must be specified using
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with existing column names,
     *                      e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g.,
     *                      'column/2 AS RESTRICTIONS_VALUECOMPARED', or
     *                      constant values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'.
     *                      If using constant values in an identifier
     *                      combination, the number of values
     *                      specified must match across the combination.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#RESTRICTION_THRESHOLD_VALUE
     *                 RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *                 comparison. Any node or edge with a
     *                 RESTRICTIONS_VALUECOMPARED value greater than the {@code
     *                 restriction_threshold_value} will not be included in the
     *                 graph.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MERGE_TOLERANCE
     *                 MERGE_TOLERANCE}: If node geospatial positions are input
     *                 (e.g., WKTPOINT, X, Y), determines the minimum
     *                 separation allowed between unique nodes. If nodes are
     *                 within the tolerance of each other, they will be merged
     *                 as a single node.  The default value is '1.0E-4'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MIN_X
     *                 MIN_X}: Minimum x (longitude) value for spatial graph
     *                 associations.  The default value is '-180.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MAX_X
     *                 MAX_X}: Maximum x (longitude) value for spatial graph
     *                 associations.  The default value is '180.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MIN_Y
     *                 MIN_Y}: Minimum y (latitude) value for spatial graph
     *                 associations.  The default value is '-90.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MAX_Y
     *                 MAX_Y}: Maximum y (latitude) value for spatial graph
     *                 associations.  The default value is '90.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#RECREATE
     *                 RECREATE}: If set to {@code true} and the graph (using
     *                 {@code graphName}) already exists, the graph is deleted
     *                 and recreated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#MODIFY
     *                 MODIFY}: If set to {@code true}, {@code recreate} is set
     *                 to {@code true}, and the graph (specified using {@code
     *                 graphName}) already exists, the graph is updated with
     *                 the given components.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#EXPORT_CREATE_RESULTS
     *                 EXPORT_CREATE_RESULTS}: If set to {@code true}, returns
     *                 the graph topology in the response as arrays.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ENABLE_GRAPH_DRAW
     *                 ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a
     *                 'EDGE_WKTLINE' column identifier to the specified {@code
     *                 graph_table} so the graph can be viewed via WMS; for
     *                 social and non-geospatial graphs, the 'EDGE_WKTLINE'
     *                 column identifier will be populated with spatial
     *                 coordinates derived from a flattening layout algorithm
     *                 so the graph can still be viewed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SAVE_PERSIST
     *                 SAVE_PERSIST}: If set to {@code true}, the graph will be
     *                 saved in the persist directory (see the <a
     *                 href="../../../../config/index.html"
     *                 target="_top">config reference</a> for more
     *                 information). If set to {@code false}, the graph will be
     *                 removed when the graph server is shutdown.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#SYNC_DB
     *                 SYNC_DB}: If set to {@code true} and {@code
     *                 save_persist} is set to {@code true}, the graph will be
     *                 fully reconstructed upon a database restart and be
     *                 updated to align with any source table(s) updates made
     *                 since the creation of the graph. If dynamic graph
     *                 updates upon table inserts are desired, use {@code
     *                 add_table_monitor} instead.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TABLE_MONITOR
     *                 ADD_TABLE_MONITOR}: Adds a table monitor to every table
     *                 used in the creation of the graph; this table monitor
     *                 will trigger the graph to update dynamically upon
     *                 inserts to the source table(s). Note that upon database
     *                 restart, if {@code save_persist} is also set to {@code
     *                 true}, the graph will be fully reconstructed and the
     *                 table monitors will be reattached. For more details on
     *                 table monitors, see {@link
     *                 GPUdb#createTableMonitor(String, Map)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#GRAPH_TABLE
     *                 GRAPH_TABLE}: If specified, the created graph is also
     *                 created as a table with the given name and following
     *                 identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
     *                 'EDGE_NODE2_ID'. If left blank, no table is created.
     *                 The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#REMOVE_LABEL_ONLY
     *                 REMOVE_LABEL_ONLY}: When RESTRICTIONS on labeled
     *                 entities requested, if set to true this will NOT delete
     *                 the entity but only the label associated with the
     *                 entity. Otherwise (default), it'll delete the label AND
     *                 the entity.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#ADD_TURNS
     *                 ADD_TURNS}: Adds dummy 'pillowed' edges around
     *                 intersection nodes where there are more than three edges
     *                 so that additional weight penalties can be imposed by
     *                 the solve endpoints. (increases the total number of
     *                 edges).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateGraphRequest.Options#TURN_ANGLE
     *                 TURN_ANGLE}: Value in degrees modifies the thresholds
     *                 for attributing right, left, sharp turns, and
     *                 intersections. It is the vertical deviation angle from
     *                 the incoming edge to the intersection node. The larger
     *                 the value, the larger the threshold for sharp turns and
     *                 intersections; the smaller the value, the larger the
     *                 threshold for right and left turns; 0 < turn_angle < 90.
     *                 The default value is '60'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateGraphResponse createGraph(String graphName, boolean directedGraph, List<String> nodes, List<String> edges, List<String> weights, List<String> restrictions, Map<String, String> options) throws GPUdbException {
        CreateGraphRequest actualRequest_ = new CreateGraphRequest(graphName, directedGraph, nodes, edges, weights, restrictions, options);
        CreateGraphResponse actualResponse_ = new CreateGraphResponse();
        submitRequest("/create/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a job which will run asynchronously. The response returns a job
     * ID, which can be used to query the status and result of the job. The
     * status and the result of the job upon completion can be requested by
     * {@link GPUdb#getJob(GetJobRequest)}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJobResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJobResponse createJob(CreateJobRequest request) throws GPUdbException {
        CreateJobResponse actualResponse_ = new CreateJobResponse();
        submitRequest("/create/job", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a job which will run asynchronously. The response returns a job
     * ID, which can be used to query the status and result of the job. The
     * status and the result of the job upon completion can be requested by
     * {@link GPUdb#getJob(long, Map)}.
     * 
     * @param endpoint  Indicates which endpoint to execute, e.g.
     *                  '/alter/table'.
     * @param requestEncoding  The encoding of the request payload for the job.
     *                         Supported values:
     *                         <ul>
     *                                 <li> {@link
     *                         com.gpudb.protocol.CreateJobRequest.RequestEncoding#BINARY
     *                         BINARY}
     *                                 <li> {@link
     *                         com.gpudb.protocol.CreateJobRequest.RequestEncoding#JSON
     *                         JSON}
     *                                 <li> {@link
     *                         com.gpudb.protocol.CreateJobRequest.RequestEncoding#SNAPPY
     *                         SNAPPY}
     *                         </ul>
     *                         The default value is {@link
     *                         com.gpudb.protocol.CreateJobRequest.RequestEncoding#BINARY
     *                         BINARY}.
     * @param data  Binary-encoded payload for the job to be run
     *              asynchronously.  The payload must contain the relevant
     *              input parameters for the endpoint indicated in {@code
     *              endpoint}.  Please see the documentation for the
     *              appropriate endpoint to see what values must (or can) be
     *              specified.  If this parameter is used, then {@code
     *              requestEncoding} must be {@code binary} or {@code snappy}.
     * @param dataStr  JSON-encoded payload for the job to be run
     *                 asynchronously.  The payload must contain the relevant
     *                 input parameters for the endpoint indicated in {@code
     *                 endpoint}.  Please see the documentation for the
     *                 appropriate endpoint to see what values must (or can) be
     *                 specified.  If this parameter is used, then {@code
     *                 requestEncoding} must be {@code json}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJobResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJobResponse createJob(String endpoint, String requestEncoding, ByteBuffer data, String dataStr, Map<String, String> options) throws GPUdbException {
        CreateJobRequest actualRequest_ = new CreateJobRequest(endpoint, requestEncoding, data, dataStr, options);
        CreateJobResponse actualResponse_ = new CreateJobResponse();
        submitRequest("/create/job", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a table that is the result of a SQL JOIN.
     * <p>
     * For join details and examples see: <a
     * href="../../../../concepts/joins.html" target="_top">Joins</a>.  For
     * limitations, see <a
     * href="../../../../concepts/joins.html#limitations-cautions"
     * target="_top">Join Limitations and Cautions</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJoinTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJoinTableResponse createJoinTable(CreateJoinTableRequest request) throws GPUdbException {
        CreateJoinTableResponse actualResponse_ = new CreateJoinTableResponse();
        submitRequest("/create/jointable", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a table that is the result of a SQL JOIN.
     * <p>
     * For join details and examples see: <a
     * href="../../../../concepts/joins.html" target="_top">Joins</a>.  For
     * limitations, see <a
     * href="../../../../concepts/joins.html#limitations-cautions"
     * target="_top">Join Limitations and Cautions</a>.
     * 
     * @param joinTableName  Name of the join table to be created.  Has the
     *                       same naming restrictions as <a
     *                       href="../../../../concepts/tables.html"
     *                       target="_top">tables</a>.
     * @param tableNames  The list of table names composing the join.
     *                    Corresponds to a SQL statement FROM clause.
     * @param columnNames  List of member table columns or column expressions
     *                     to be included in the join. Columns can be prefixed
     *                     with 'table_id.column_name', where 'table_id' is the
     *                     table name or alias.  Columns can be aliased via the
     *                     syntax 'column_name as alias'. Wild cards '*' can be
     *                     used to include all columns across member tables or
     *                     'table_id.*' for all of a single table's columns.
     *                     Columns and column expressions composing the join
     *                     must be uniquely named or aliased--therefore, the
     *                     '*' wild card cannot be used if column names aren't
     *                     unique across all tables.
     * @param expressions  An optional list of expressions to combine and
     *                     filter the joined tables.  Corresponds to a SQL
     *                     statement WHERE clause. For details see: <a
     *                     href="../../../../concepts/expressions.html"
     *                     target="_top">expressions</a>.  The default value is
     *                     an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the join. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the join will be at the top
     *                 level.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#MAX_QUERY_DIMENSIONS
     *                 MAX_QUERY_DIMENSIONS}: Obsolete in GPUdb v7.0
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#OPTIMIZE_LOOKUPS
     *                 OPTIMIZE_LOOKUPS}: Use more memory to speed up the
     *                 joining of tables.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the join table specified in
     *                 {@code joinTableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#VIEW_ID
     *                 VIEW_ID}: view this projection is part of.  The default
     *                 value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#NO_COUNT
     *                 NO_COUNT}: return a count of 0 for the join table for
     *                 logging and for show_table. optimization needed for
     *                 large overlapped equi-join stencils.  The default value
     *                 is 'false'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateJoinTableRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Maximum number of records per joined-chunk
     *                 for this table. Defaults to the gpudb.conf file chunk
     *                 size
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateJoinTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateJoinTableResponse createJoinTable(String joinTableName, List<String> tableNames, List<String> columnNames, List<String> expressions, Map<String, String> options) throws GPUdbException {
        CreateJoinTableRequest actualRequest_ = new CreateJoinTableRequest(joinTableName, tableNames, columnNames, expressions, options);
        CreateJoinTableResponse actualResponse_ = new CreateJoinTableResponse();
        submitRequest("/create/jointable", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Initiates the process of creating a materialized view, reserving the
     * view's name to prevent other views or tables from being created with
     * that name.
     * <p>
     * For materialized view details and examples, see <a
     * href="../../../../concepts/materialized_views.html"
     * target="_top">Materialized Views</a>.
     * <p>
     * The response contains {@code viewId}, which is used to tag each
     * subsequent operation (projection, union, aggregation, filter, or join)
     * that will compose the view.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateMaterializedViewResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateMaterializedViewResponse createMaterializedView(CreateMaterializedViewRequest request) throws GPUdbException {
        CreateMaterializedViewResponse actualResponse_ = new CreateMaterializedViewResponse();
        submitRequest("/create/materializedview", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Initiates the process of creating a materialized view, reserving the
     * view's name to prevent other views or tables from being created with
     * that name.
     * <p>
     * For materialized view details and examples, see <a
     * href="../../../../concepts/materialized_views.html"
     * target="_top">Materialized Views</a>.
     * <p>
     * The response contains {@code viewId}, which is used to tag each
     * subsequent operation (projection, union, aggregation, filter, or join)
     * that will compose the view.
     * 
     * @param tableName  Name of the table to be created that is the top-level
     *                   table of the materialized view.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 table will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the materialized view
     *                 specified in {@code tableName} will be persisted and
     *                 will not expire unless a {@code ttl} is specified.   If
     *                 {@code false}, then the materialized view will be an
     *                 in-memory table and will expire unless a {@code ttl} is
     *                 specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#REFRESH_METHOD
     *                 REFRESH_METHOD}: Method by which the join can be
     *                 refreshed when the data in underlying member tables have
     *                 changed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#MANUAL
     *                 MANUAL}: Refresh only occurs when manually requested by
     *                 calling {@link GPUdb#alterTable(String, String, String,
     *                 Map)} with an 'action' of 'refresh'
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#ON_QUERY
     *                 ON_QUERY}: For future use.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#ON_CHANGE
     *                 ON_CHANGE}: If possible, incrementally refresh (refresh
     *                 just those records added) whenever an insert, update,
     *                 delete or refresh of input table is done.  A full
     *                 refresh is done if an incremental refresh is not
     *                 possible.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#PERIODIC
     *                 PERIODIC}: Refresh table periodically at rate specified
     *                 by {@code refresh_period}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#MANUAL
     *                 MANUAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#REFRESH_PERIOD
     *                 REFRESH_PERIOD}: When {@code refresh_method} is {@code
     *                 periodic}, specifies the period in seconds at which
     *                 refresh occurs
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateMaterializedViewRequest.Options#REFRESH_START_TIME
     *                 REFRESH_START_TIME}: When {@code refresh_method} is
     *                 {@code periodic}, specifies the first time at which a
     *                 refresh is to be done.  Value is a datetime string with
     *                 format 'YYYY-MM-DD HH:MM:SS'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateMaterializedViewResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateMaterializedViewResponse createMaterializedView(String tableName, Map<String, String> options) throws GPUdbException {
        CreateMaterializedViewRequest actualRequest_ = new CreateMaterializedViewRequest(tableName, options);
        CreateMaterializedViewResponse actualResponse_ = new CreateMaterializedViewResponse();
        submitRequest("/create/materializedview", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates an instance (proc) of the user-defined function (UDF) specified
     * by the given command, options, and files, and makes it available for
     * execution.  For details on UDFs, see: <a
     * href="../../../../concepts/udf.html" target="_top">User-Defined
     * Functions</a>
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProcResponse createProc(CreateProcRequest request) throws GPUdbException {
        CreateProcResponse actualResponse_ = new CreateProcResponse();
        submitRequest("/create/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates an instance (proc) of the user-defined function (UDF) specified
     * by the given command, options, and files, and makes it available for
     * execution.  For details on UDFs, see: <a
     * href="../../../../concepts/udf.html" target="_top">User-Defined
     * Functions</a>
     * 
     * @param procName  Name of the proc to be created. Must not be the name of
     *                  a currently existing proc.
     * @param executionMode  The execution mode of the proc.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#DISTRIBUTED
     *                       DISTRIBUTED}: Input table data will be divided
     *                       into data segments that are distributed across all
     *                       nodes in the cluster, and the proc command will be
     *                       invoked once per data segment in parallel. Output
     *                       table data from each invocation will be saved to
     *                       the same node as the corresponding input data.
     *                               <li> {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#NONDISTRIBUTED
     *                       NONDISTRIBUTED}: The proc command will be invoked
     *                       only once per execution, and will not have access
     *                       to any input or output table data.
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.CreateProcRequest.ExecutionMode#DISTRIBUTED
     *                       DISTRIBUTED}.
     * @param files  A map of the files that make up the proc. The keys of the
     *               map are file names, and the values are the binary contents
     *               of the files. The file names may include subdirectory
     *               names (e.g. 'subdir/file') but must not resolve to a
     *               directory above the root for the proc.  The default value
     *               is an empty {@link Map}.
     * @param command  The command (excluding arguments) that will be invoked
     *                 when the proc is executed. It will be invoked from the
     *                 directory containing the proc {@code files} and may be
     *                 any command that can be resolved from that directory. It
     *                 need not refer to a file actually in that directory; for
     *                 example, it could be 'java' if the proc is a Java
     *                 application; however, any necessary external programs
     *                 must be preinstalled on every database node. If the
     *                 command refers to a file in that directory, it must be
     *                 preceded with './' as per Linux convention. If not
     *                 specified, and exactly one file is provided in {@code
     *                 files}, that file will be invoked.  The default value is
     *                 ''.
     * @param args  An array of command-line arguments that will be passed to
     *              {@code command} when the proc is executed.  The default
     *              value is an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProcRequest.Options#MAX_CONCURRENCY_PER_NODE
     *                 MAX_CONCURRENCY_PER_NODE}: The maximum number of
     *                 concurrent instances of the proc that will be executed
     *                 per node. 0 allows unlimited concurrency.  The default
     *                 value is '0'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProcResponse createProc(String procName, String executionMode, Map<String, ByteBuffer> files, String command, List<String> args, Map<String, String> options) throws GPUdbException {
        CreateProcRequest actualRequest_ = new CreateProcRequest(procName, executionMode, files, command, args, options);
        CreateProcResponse actualResponse_ = new CreateProcResponse();
        submitRequest("/create/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new <a href="../../../../concepts/projections.html"
     * target="_top">projection</a> of an existing table. A projection
     * represents a subset of the columns (potentially including derived
     * columns) of a table.
     * <p>
     * For projection details and examples, see <a
     * href="../../../../concepts/projections.html"
     * target="_top">Projections</a>.  For limitations, see <a
     * href="../../../../concepts/projections.html#limitations-and-cautions"
     * target="_top">Projection Limitations and Cautions</a>.
     * <p>
     * <a href="../../../../concepts/window.html" target="_top">Window
     * functions</a>, which can perform operations like moving averages, are
     * available through this endpoint as well as {@link
     * GPUdb#getRecordsByColumnRaw(GetRecordsByColumnRequest)}.
     * <p>
     * A projection can be created with a different <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> than the source table.  By specifying {@code shard_key}, the
     * projection will be sharded according to the specified columns,
     * regardless of how the source table is sharded.  The source table can
     * even be unsharded or replicated.
     * <p>
     * If {@code tableName} is empty, selection is performed against a
     * single-row virtual table.  This can be useful in executing temporal (<a
     * href="../../../../concepts/expressions.html#date-time-functions"
     * target="_top">NOW()</a>), identity (<a
     * href="../../../../concepts/expressions.html#user-security-functions"
     * target="_top">USER()</a>), or constant-based functions (<a
     * href="../../../../concepts/expressions.html#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProjectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProjectionResponse createProjection(CreateProjectionRequest request) throws GPUdbException {
        CreateProjectionResponse actualResponse_ = new CreateProjectionResponse();
        submitRequest("/create/projection", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new <a href="../../../../concepts/projections.html"
     * target="_top">projection</a> of an existing table. A projection
     * represents a subset of the columns (potentially including derived
     * columns) of a table.
     * <p>
     * For projection details and examples, see <a
     * href="../../../../concepts/projections.html"
     * target="_top">Projections</a>.  For limitations, see <a
     * href="../../../../concepts/projections.html#limitations-and-cautions"
     * target="_top">Projection Limitations and Cautions</a>.
     * <p>
     * <a href="../../../../concepts/window.html" target="_top">Window
     * functions</a>, which can perform operations like moving averages, are
     * available through this endpoint as well as {@link
     * GPUdb#getRecordsByColumnRaw(GetRecordsByColumnRequest)}.
     * <p>
     * A projection can be created with a different <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> than the source table.  By specifying {@code shard_key}, the
     * projection will be sharded according to the specified columns,
     * regardless of how the source table is sharded.  The source table can
     * even be unsharded or replicated.
     * <p>
     * If {@code tableName} is empty, selection is performed against a
     * single-row virtual table.  This can be useful in executing temporal (<a
     * href="../../../../concepts/expressions.html#date-time-functions"
     * target="_top">NOW()</a>), identity (<a
     * href="../../../../concepts/expressions.html#user-security-functions"
     * target="_top">USER()</a>), or constant-based functions (<a
     * href="../../../../concepts/expressions.html#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     * 
     * @param tableName  Name of the existing table on which the projection is
     *                   to be applied.  An empty table name creates a
     *                   projection from a single-row virtual table, where
     *                   columns specified should be constants or constant
     *                   expressions.
     * @param projectionName  Name of the projection to be created. Has the
     *                        same naming restrictions as <a
     *                        href="../../../../concepts/tables.html"
     *                        target="_top">tables</a>.
     * @param columnNames  List of columns from {@code tableName} to be
     *                     included in the projection. Can include derived
     *                     columns. Can be specified as aliased via the syntax
     *                     'column_name as alias'.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a <a
     *                 href="../../../../concepts/collections.html"
     *                 target="_top">collection</a> to which the projection is
     *                 to be assigned as a child. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the projection will be at the
     *                 top level.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#EXPRESSION
     *                 EXPRESSION}: An optional filter <a
     *                 href="../../../../concepts/expressions.html"
     *                 target="_top">expression</a> to be applied to the source
     *                 table prior to the projection.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: If {@code true} then the projection will
     *                 be replicated even if the source table is not.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#LIMIT
     *                 LIMIT}: The number of records to keep.  The default
     *                 value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by; e.g. 'timestamp asc, x desc'.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: No longer used.  See <a
     *                 href="../../../../rm/concepts.html"
     *                 target="_top">Resource Management Concepts</a> for
     *                 information about how resources are managed, <a
     *                 href="../../../../rm/concepts.html" target="_top">Tier
     *                 Strategy Concepts</a> for how resources are targeted for
     *                 VRAM, and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">Tier Strategy Usage</a> for how to specify
     *                 a table's priority in VRAM.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for this projection.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#CREATE_INDEXES
     *                 CREATE_INDEXES}: Comma-separated list of columns on
     *                 which to create indexes on the projection.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TTL
     *                 TTL}: Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the projection specified in
     *                 {@code projectionName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#SHARD_KEY
     *                 SHARD_KEY}: Comma-separated list of the columns to be
     *                 sharded on; e.g. 'column1, column2'.  The columns
     *                 specified must be present in {@code columnNames}.  If
     *                 any alias is given for any column name, the alias must
     *                 be used, rather than the original column name.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the projection specified
     *                 in {@code projectionName} will be persisted and will not
     *                 expire unless a {@code ttl} is specified.   If {@code
     *                 false}, then the projection will be an in-memory table
     *                 and will expire unless a {@code ttl} is specified
     *                 otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#PRESERVE_DICT_ENCODING
     *                 PRESERVE_DICT_ENCODING}: If {@code true}, then columns
     *                 that were dict encoded in the source table will be dict
     *                 encoded in the projection.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#RETAIN_PARTITIONS
     *                 RETAIN_PARTITIONS}: Determines whether the created
     *                 projection will retain the partitioning scheme from the
     *                 source table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateProjectionRequest.Options#VIEW_ID
     *                 VIEW_ID}: ID of view of which this projection is a
     *                 member.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateProjectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateProjectionResponse createProjection(String tableName, String projectionName, List<String> columnNames, Map<String, String> options) throws GPUdbException {
        CreateProjectionRequest actualRequest_ = new CreateProjectionRequest(tableName, projectionName, columnNames, options);
        CreateProjectionResponse actualResponse_ = new CreateProjectionResponse();
        submitRequest("/create/projection", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new resource group to facilitate resource management.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateResourceGroupResponse createResourceGroup(CreateResourceGroupRequest request) throws GPUdbException {
        CreateResourceGroupResponse actualResponse_ = new CreateResourceGroupResponse();
        submitRequest("/create/resourcegroup", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new resource group to facilitate resource management.
     * 
     * @param name  Name of the group to be created. Must contain only letters,
     *              digits, and underscores, and cannot begin with a digit.
     *              Must not match existing resource group name.
     * @param tierAttributes  Optional map containing tier names and their
     *                        respective attribute group limits.  The only
     *                        valid attribute limit that can be set is
     *                        max_memory (in bytes) for the VRAM & RAM tiers.
     *                        For instance, to set max VRAM capacity to 1GB and
     *                        max RAM capacity to 10GB, use:
     *                        {'VRAM':{'max_memory':'1000000000'},
     *                        'RAM':{'max_memory':'10000000000'}}
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.CreateResourceGroupRequest.TierAttributes#MAX_MEMORY
     *                        MAX_MEMORY}: Maximum amount of memory usable in
     *                        the given tier at one time for this group.
     *                        </ul>
     *                        The default value is an empty {@link Map}.
     * @param ranking  Indicates the relative ranking among existing resource
     *                 groups where this new resource group will be placed.
     *                 When using {@code before} or {@code after}, specify
     *                 which resource group this one will be inserted before or
     *                 after in {@code adjoiningResourceGroup}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Ranking#FIRST
     *                 FIRST}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Ranking#LAST
     *                 LAST}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Ranking#BEFORE
     *                 BEFORE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Ranking#AFTER
     *                 AFTER}
     *                 </ul>
     * @param adjoiningResourceGroup  If {@code ranking} is {@code before} or
     *                                {@code after}, this field indicates the
     *                                resource group before or after which the
     *                                current group will be placed; otherwise,
     *                                leave blank.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Options#MAX_CPU_CONCURRENCY
     *                 MAX_CPU_CONCURRENCY}: Maximum number of simultaneous
     *                 threads that will be used to execute a request for this
     *                 group.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Options#MAX_SCHEDULING_PRIORITY
     *                 MAX_SCHEDULING_PRIORITY}: Maximum priority of a
     *                 scheduled task for this group.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateResourceGroupRequest.Options#MAX_TIER_PRIORITY
     *                 MAX_TIER_PRIORITY}: Maximum priority of a tiered object
     *                 for this group.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateResourceGroupResponse createResourceGroup(String name, Map<String, Map<String, String>> tierAttributes, String ranking, String adjoiningResourceGroup, Map<String, String> options) throws GPUdbException {
        CreateResourceGroupRequest actualRequest_ = new CreateResourceGroupRequest(name, tierAttributes, ranking, adjoiningResourceGroup, options);
        CreateResourceGroupResponse actualResponse_ = new CreateResourceGroupResponse();
        submitRequest("/create/resourcegroup", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateRoleResponse createRole(CreateRoleRequest request) throws GPUdbException {
        CreateRoleResponse actualResponse_ = new CreateRoleResponse();
        submitRequest("/create/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new role.
     * 
     * @param name  Name of the role to be created. Must contain only lowercase
     *              letters, digits, and underscores, and cannot begin with a
     *              digit. Must not be the same name as an existing user or
     *              role.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateRoleRequest.Options#RESOURCE_GROUP
     *                 RESOURCE_GROUP}: Name of an existing resource group to
     *                 associate with this user
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateRoleResponse createRole(String name, Map<String, String> options) throws GPUdbException {
        CreateRoleRequest actualRequest_ = new CreateRoleRequest(name, options);
        CreateRoleResponse actualResponse_ = new CreateRoleResponse();
        submitRequest("/create/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new table or collection. If a new table is being created,
     * the type of the table is given by {@code typeId}, which must be the ID
     * of
     * a currently registered type (i.e. one created via {@link
     * GPUdb#createType(CreateTypeRequest)}). The
     * table will be created inside a collection if the option
     * {@code collection_name} is specified. If that collection does
     * not already exist, it will be created.
     * <p>
     * To create a new collection, specify the name of the collection in
     * {@code tableName} and set the {@code is_collection} option to
     * {@code true}; {@code typeId} will be
     * ignored.
     * <p>
     * A table may optionally be designated to use a
     * <a href="../../../../concepts/tables.html#replication"
     * target="_top">replicated</a> distribution scheme,
     * have <a href="../../../../concepts/tables.html#foreign-keys"
     * target="_top">foreign keys</a> to other
     * tables assigned, be assigned a
     * <a href="../../../../concepts/tables.html#partitioning"
     * target="_top">partitioning</a> scheme, or have a
     * <a href="../../../../rm/concepts.html#tier-strategies"
     * target="_top">tier strategy</a> assigned.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableResponse createTable(CreateTableRequest request) throws GPUdbException {
        CreateTableResponse actualResponse_ = new CreateTableResponse();
        submitRequest("/create/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new table or collection. If a new table is being created,
     * the type of the table is given by {@code typeId}, which must be the ID
     * of
     * a currently registered type (i.e. one created via {@link
     * GPUdb#createType(String, String, Map, Map)}). The
     * table will be created inside a collection if the option
     * {@code collection_name} is specified. If that collection does
     * not already exist, it will be created.
     * <p>
     * To create a new collection, specify the name of the collection in
     * {@code tableName} and set the {@code is_collection} option to
     * {@code true}; {@code typeId} will be
     * ignored.
     * <p>
     * A table may optionally be designated to use a
     * <a href="../../../../concepts/tables.html#replication"
     * target="_top">replicated</a> distribution scheme,
     * have <a href="../../../../concepts/tables.html#foreign-keys"
     * target="_top">foreign keys</a> to other
     * tables assigned, be assigned a
     * <a href="../../../../concepts/tables.html#partitioning"
     * target="_top">partitioning</a> scheme, or have a
     * <a href="../../../../rm/concepts.html#tier-strategies"
     * target="_top">tier strategy</a> assigned.
     * 
     * @param tableName  Name of the table to be created. Error for requests
     *                   with existing table of the same name and type ID may
     *                   be suppressed by using the {@code no_error_if_exists}
     *                   option.  See <a
     *                   href="../../../../concepts/tables.html"
     *                   target="_top">Tables</a> for naming restrictions.
     * @param typeId  ID of a currently registered type. All objects added to
     *                the newly created table will be of this type.  Ignored if
     *                {@code is_collection} is {@code true}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#NO_ERROR_IF_EXISTS
     *                 NO_ERROR_IF_EXISTS}: If {@code true}, prevents an error
     *                 from occurring if the table already exists and is of the
     *                 given type.  If a table with the same ID but a different
     *                 type exists, it is still an error.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created table. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 table will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_COLLECTION
     *                 IS_COLLECTION}: Indicates whether the new table to be
     *                 created will be a collection.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#DISALLOW_HOMOGENEOUS_TABLES
     *                 DISALLOW_HOMOGENEOUS_TABLES}: No longer supported; value
     *                 will be ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: For a table, affects the <a
     *                 href="../../../../concepts/tables.html#distribution"
     *                 target="_top">distribution scheme</a> for the table's
     *                 data.  If true and the given type has no explicit <a
     *                 href="../../../../concepts/tables.html#shard-key"
     *                 target="_top">shard key</a> defined, the table will be
     *                 <a href="../../../../concepts/tables.html#replication"
     *                 target="_top">replicated</a>.  If false, the table will
     *                 be <a href="../../../../concepts/tables.html#sharding"
     *                 target="_top">sharded</a> according to the shard key
     *                 specified in the given {@code typeId}, or <a
     *                 href="../../../../concepts/tables.html#random-sharding"
     *                 target="_top">randomly sharded</a>, if no shard key is
     *                 specified.  Note that a type containing a shard key
     *                 cannot be used to create a replicated table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FOREIGN_KEYS
     *                 FOREIGN_KEYS}: Semicolon-separated list of <a
     *                 href="../../../../concepts/tables.html#foreign-keys"
     *                 target="_top">foreign keys</a>, of the format
     *                 '(source_column_name [, ...]) references
     *                 target_table_name(primary_key_column_name [, ...]) [as
     *                 foreign_key_name]'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FOREIGN_SHARD_KEY
     *                 FOREIGN_SHARD_KEY}: Foreign shard key of the format
     *                 'source_column references shard_by_column from
     *                 target_table(primary_key_column)'.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#PARTITION_TYPE
     *                 PARTITION_TYPE}: <a
     *                 href="../../../../concepts/tables.html#partitioning"
     *                 target="_top">Partitioning</a> scheme to use.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#RANGE
     *                 RANGE}: Use <a
     *                 href="../../../../concepts/tables.html#partitioning-by-range"
     *                 target="_top">range partitioning</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#INTERVAL
     *                 INTERVAL}: Use <a
     *                 href="../../../../concepts/tables.html#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#LIST
     *                 LIST}: Use <a
     *                 href="../../../../concepts/tables.html#partitioning-by-list"
     *                 target="_top">list partitioning</a>.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#HASH
     *                 HASH}: Use <a
     *                 href="../../../../concepts/tables.html#partitioning-by-hash"
     *                 target="_top">hash partitioning</a>.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#PARTITION_KEYS
     *                 PARTITION_KEYS}: Comma-separated list of partition keys,
     *                 which are the columns or column expressions by which
     *                 records will be assigned to partitions defined by {@code
     *                 partition_definitions}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#PARTITION_DEFINITIONS
     *                 PARTITION_DEFINITIONS}: Comma-separated list of
     *                 partition definitions, whose format depends on the
     *                 choice of {@code partition_type}.  See <a
     *                 href="../../../../concepts/tables.html#partitioning-by-range"
     *                 target="_top">range partitioning</a>, <a
     *                 href="../../../../concepts/tables.html#partitioning-by-interval"
     *                 target="_top">interval partitioning</a>, <a
     *                 href="../../../../concepts/tables.html#partitioning-by-list"
     *                 target="_top">list partitioning</a>, or <a
     *                 href="../../../../concepts/tables.html#partitioning-by-hash"
     *                 target="_top">hash partitioning</a> for example formats.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_AUTOMATIC_PARTITION
     *                 IS_AUTOMATIC_PARTITION}: If true, a new partition will
     *                 be created for values which don't fall into an existing
     *                 partition.  Currently only supported for <a
     *                 href="../../../../concepts/tables.html#partitioning-by-list"
     *                 target="_top">list partitions</a>.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TTL TTL}:
     *                 For a table, sets the <a
     *                 href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for this table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#IS_RESULT_TABLE
     *                 IS_RESULT_TABLE}: For a table, indicates whether the
     *                 table is an in-memory table. A result table cannot
     *                 contain store_only, text_search, or string columns
     *                 (charN columns are acceptable), and it will not be
     *                 retained if the server is restarted.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableRequest.Options#STRATEGY_DEFINITION
     *                 STRATEGY_DEFINITION}: The <a
     *                 href="../../../../rm/concepts.html#tier-strategies"
     *                 target="_top">tier strategy</a> for the table and its
     *                 columns. See <a
     *                 href="../../../../rm/concepts.html#tier-strategies"
     *                 target="_top">tier strategy usage</a> for format and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">tier strategy examples</a> for examples.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableResponse createTable(String tableName, String typeId, Map<String, String> options) throws GPUdbException {
        CreateTableRequest actualRequest_ = new CreateTableRequest(tableName, typeId, options);
        CreateTableResponse actualResponse_ = new CreateTableResponse();
        submitRequest("/create/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a monitor that watches for a single table modification event
     * type (insert, update, or delete) on a particular table (identified by
     * {@code tableName}) and forwards event notifications to subscribers via
     * ZMQ.
     * After this call completes, subscribe to the returned {@code topicId} on
     * the
     * ZMQ table monitor port (default 9002). Each time an operation of the
     * given type
     * on the table completes, a multipart message is published for that topic;
     * the
     * first part contains only the topic ID, and each subsequent part contains
     * one
     * binary-encoded Avro object that corresponds to the event and can be
     * decoded
     * using {@code typeSchema}. The monitor will continue to run (regardless
     * of
     * whether or not there are any subscribers) until deactivated with
     * {@link GPUdb#clearTableMonitor(ClearTableMonitorRequest)}.
     * <p>
     * For more information on table monitors, see
     * <a href="../../../../concepts/table_monitors.html" target="_top">Table
     * Monitors</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableMonitorResponse createTableMonitor(CreateTableMonitorRequest request) throws GPUdbException {
        CreateTableMonitorResponse actualResponse_ = new CreateTableMonitorResponse();
        submitRequest("/create/tablemonitor", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a monitor that watches for a single table modification event
     * type (insert, update, or delete) on a particular table (identified by
     * {@code tableName}) and forwards event notifications to subscribers via
     * ZMQ.
     * After this call completes, subscribe to the returned {@code topicId} on
     * the
     * ZMQ table monitor port (default 9002). Each time an operation of the
     * given type
     * on the table completes, a multipart message is published for that topic;
     * the
     * first part contains only the topic ID, and each subsequent part contains
     * one
     * binary-encoded Avro object that corresponds to the event and can be
     * decoded
     * using {@code typeSchema}. The monitor will continue to run (regardless
     * of
     * whether or not there are any subscribers) until deactivated with
     * {@link GPUdb#clearTableMonitor(String, Map)}.
     * <p>
     * For more information on table monitors, see
     * <a href="../../../../concepts/table_monitors.html" target="_top">Table
     * Monitors</a>.
     * 
     * @param tableName  Name of the table to monitor. Must not refer to a
     *                   collection.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableMonitorRequest.Options#EVENT
     *                 EVENT}: Type of modification event on the target table
     *                 to be monitored by this table monitor.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableMonitorRequest.Options#INSERT
     *                 INSERT}: Get notifications of new record insertions. The
     *                 new row images are forwarded to the subscribers.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableMonitorRequest.Options#UPDATE
     *                 UPDATE}: Get notifications of update operations. The
     *                 modified row count information is forwarded to the
     *                 subscribers.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateTableMonitorRequest.Options#DELETE
     *                 DELETE}: Get notifications of delete operations. The
     *                 deleted row count information is forwarded to the
     *                 subscribers.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateTableMonitorRequest.Options#INSERT
     *                 INSERT}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTableMonitorResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTableMonitorResponse createTableMonitor(String tableName, Map<String, String> options) throws GPUdbException {
        CreateTableMonitorRequest actualRequest_ = new CreateTableMonitorRequest(tableName, options);
        CreateTableMonitorResponse actualResponse_ = new CreateTableMonitorResponse();
        submitRequest("/create/tablemonitor", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up an area trigger mechanism for two column_names for one or more
     * tables. (This function is essentially the two-dimensional version of
     * {@link GPUdb#createTriggerByRange(CreateTriggerByRangeRequest)}.) Once
     * the trigger has been activated, any record added to the listed tables(s)
     * via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)} with the
     * chosen columns' values falling within the specified region will trip the
     * trigger. All such records will be queued at the trigger port (by default
     * '9001' but able to be retrieved via {@link
     * GPUdb#showSystemStatus(ShowSystemStatusRequest)}) for any listening
     * client to collect. Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(ClearTriggerRequest)} endpoint or by clearing all
     * relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByAreaResponse createTriggerByArea(CreateTriggerByAreaRequest request) throws GPUdbException {
        CreateTriggerByAreaResponse actualResponse_ = new CreateTriggerByAreaResponse();
        submitRequest("/create/trigger/byarea", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up an area trigger mechanism for two column_names for one or more
     * tables. (This function is essentially the two-dimensional version of
     * {@link GPUdb#createTriggerByRange(String, List, String, double, double,
     * Map)}.) Once the trigger has been activated, any record added to the
     * listed tables(s) via {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest)} with the chosen
     * columns' values falling within the specified region will trip the
     * trigger. All such records will be queued at the trigger port (by default
     * '9001' but able to be retrieved via {@link GPUdb#showSystemStatus(Map)})
     * for any listening client to collect. Active triggers can be cancelled by
     * using the {@link GPUdb#clearTrigger(String, Map)} endpoint or by
     * clearing all relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param requestId  User-created ID for the trigger. The ID can be
     *                   alphanumeric, contain symbols, and must contain at
     *                   least one character.
     * @param tableNames  Names of the tables on which the trigger will be
     *                    activated and maintained.
     * @param xColumnName  Name of a numeric column on which the trigger is
     *                     activated. Usually 'x' for geospatial data points.
     * @param xVector  The respective coordinate values for the region on which
     *                 the trigger is activated. This usually translates to the
     *                 x-coordinates of a geospatial region.
     * @param yColumnName  Name of a second numeric column on which the trigger
     *                     is activated. Usually 'y' for geospatial data
     *                     points.
     * @param yVector  The respective coordinate values for the region on which
     *                 the trigger is activated. This usually translates to the
     *                 y-coordinates of a geospatial region. Must be the same
     *                 length as xvals.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByAreaResponse createTriggerByArea(String requestId, List<String> tableNames, String xColumnName, List<Double> xVector, String yColumnName, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        CreateTriggerByAreaRequest actualRequest_ = new CreateTriggerByAreaRequest(requestId, tableNames, xColumnName, xVector, yColumnName, yVector, options);
        CreateTriggerByAreaResponse actualResponse_ = new CreateTriggerByAreaResponse();
        submitRequest("/create/trigger/byarea", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)}
     * with the chosen column_name's value falling within the specified range
     * will trip the trigger. All such records will be queued at the trigger
     * port (by default '9001' but able to be retrieved via {@link
     * GPUdb#showSystemStatus(ShowSystemStatusRequest)}) for any listening
     * client to collect. Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(ClearTriggerRequest)} endpoint or by clearing all
     * relevant tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByRangeResponse createTriggerByRange(CreateTriggerByRangeRequest request) throws GPUdbException {
        CreateTriggerByRangeResponse actualResponse_ = new CreateTriggerByRangeResponse();
        submitRequest("/create/trigger/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Sets up a simple range trigger for a column_name for one or more tables.
     * Once the trigger has been activated, any record added to the listed
     * tables(s) via {@link GPUdb#insertRecordsRaw(RawInsertRecordsRequest)}
     * with the chosen column_name's value falling within the specified range
     * will trip the trigger. All such records will be queued at the trigger
     * port (by default '9001' but able to be retrieved via {@link
     * GPUdb#showSystemStatus(Map)}) for any listening client to collect.
     * Active triggers can be cancelled by using the {@link
     * GPUdb#clearTrigger(String, Map)} endpoint or by clearing all relevant
     * tables.
     * <p>
     * The output returns the trigger handle as well as indicating success or
     * failure of the trigger activation.
     * 
     * @param requestId  User-created ID for the trigger. The ID can be
     *                   alphanumeric, contain symbols, and must contain at
     *                   least one character.
     * @param tableNames  Tables on which the trigger will be active.
     * @param columnName  Name of a numeric column_name on which the trigger is
     *                    activated.
     * @param min  The lower bound (inclusive) for the trigger range.
     * @param max  The upper bound (inclusive) for the trigger range.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTriggerByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTriggerByRangeResponse createTriggerByRange(String requestId, List<String> tableNames, String columnName, double min, double max, Map<String, String> options) throws GPUdbException {
        CreateTriggerByRangeRequest actualRequest_ = new CreateTriggerByRangeRequest(requestId, tableNames, columnName, min, max, options);
        CreateTriggerByRangeResponse actualResponse_ = new CreateTriggerByRangeResponse();
        submitRequest("/create/trigger/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new type describing the layout or schema of a table. The type
     * definition is a JSON string describing the fields (i.e. columns) of the
     * type. Each field consists of a name and a data type. Supported data
     * types are: double, float, int, long, string, and bytes. In addition one
     * or more properties can be specified for each column which customize the
     * memory usage and query availability of that column.  Note that some
     * properties are mutually exclusive--i.e. they cannot be specified for any
     * given column simultaneously.  One example of mutually exclusive
     * properties are {@code data} and {@code store_only}.
     * <p>
     * A single <a href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a> and/or single <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> can be set across one or more columns. If a primary key is
     * specified, then a uniqueness constraint is enforced, in that only a
     * single object can exist with a given primary key. When {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest) inserting} data into a
     * table with a primary key, depending on the parameters in the request,
     * incoming objects with primary key values that match existing objects
     * will either overwrite (i.e. update) the existing object or will be
     * skipped and not added into the set.
     * <p>
     * Example of a type definition with some of the parameters::
     * <p>
     *         {"type":"record",
     *         "name":"point",
     *         "fields":[{"name":"msg_id","type":"string"},
     *                         {"name":"x","type":"double"},
     *                         {"name":"y","type":"double"},
     *                         {"name":"TIMESTAMP","type":"double"},
     *                         {"name":"source","type":"string"},
     *                         {"name":"group_id","type":"string"},
     *                         {"name":"OBJECT_ID","type":"string"}]
     *         }
     * <p>
     * Properties::
     * <p>
     *         {"group_id":["store_only"],
     *         "msg_id":["store_only","text_search"]
     *         }
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTypeResponse createType(CreateTypeRequest request) throws GPUdbException {
        CreateTypeResponse actualResponse_ = new CreateTypeResponse();
        submitRequest("/create/type", request, actualResponse_, false);
        setTypeDescriptorIfMissing(actualResponse_.getTypeId(), actualResponse_.getLabel(), actualResponse_.getTypeDefinition(), actualResponse_.getProperties());
        return actualResponse_;
    }



    /**
     * Creates a new type describing the layout or schema of a table. The type
     * definition is a JSON string describing the fields (i.e. columns) of the
     * type. Each field consists of a name and a data type. Supported data
     * types are: double, float, int, long, string, and bytes. In addition one
     * or more properties can be specified for each column which customize the
     * memory usage and query availability of that column.  Note that some
     * properties are mutually exclusive--i.e. they cannot be specified for any
     * given column simultaneously.  One example of mutually exclusive
     * properties are {@code data} and {@code store_only}.
     * <p>
     * A single <a href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a> and/or single <a
     * href="../../../../concepts/tables.html#shard-keys" target="_top">shard
     * key</a> can be set across one or more columns. If a primary key is
     * specified, then a uniqueness constraint is enforced, in that only a
     * single object can exist with a given primary key. When {@link
     * GPUdb#insertRecordsRaw(RawInsertRecordsRequest) inserting} data into a
     * table with a primary key, depending on the parameters in the request,
     * incoming objects with primary key values that match existing objects
     * will either overwrite (i.e. update) the existing object or will be
     * skipped and not added into the set.
     * <p>
     * Example of a type definition with some of the parameters::
     * <p>
     *         {"type":"record",
     *         "name":"point",
     *         "fields":[{"name":"msg_id","type":"string"},
     *                         {"name":"x","type":"double"},
     *                         {"name":"y","type":"double"},
     *                         {"name":"TIMESTAMP","type":"double"},
     *                         {"name":"source","type":"string"},
     *                         {"name":"group_id","type":"string"},
     *                         {"name":"OBJECT_ID","type":"string"}]
     *         }
     * <p>
     * Properties::
     * <p>
     *         {"group_id":["store_only"],
     *         "msg_id":["store_only","text_search"]
     *         }
     * 
     * @param typeDefinition  a JSON string describing the columns of the type
     *                        to be registered.
     * @param label  A user-defined description string which can be used to
     *               differentiate between tables and types with otherwise
     *               identical schemas.
     * @param properties  Each key-value pair specifies the properties to use
     *                    for a given column where the key is the column name.
     *                    All keys used must be relevant column names for the
     *                    given table.  Specifying any property overrides the
     *                    default properties for that column (which is based on
     *                    the column's data type).
     *                    Valid values are:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATA
     *                    DATA}: Default property for all numeric and string
     *                    type columns; makes the column available for GPU
     *                    queries.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TEXT_SEARCH
     *                    TEXT_SEARCH}: Valid only for 'string' columns.
     *                    Enables full text search for string columns. Can be
     *                    set independently of {@code data} and {@code
     *                    store_only}.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#STORE_ONLY
     *                    STORE_ONLY}: Persist the column value but do not make
     *                    it available to queries (e.g. {@link
     *                    GPUdb#filter(String, String, String, Map)})-i.e. it
     *                    is mutually exclusive to the {@code data} property.
     *                    Any 'bytes' type column must have a {@code
     *                    store_only} property. This property reduces system
     *                    memory usage.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DISK_OPTIMIZED
     *                    DISK_OPTIMIZED}: Works in conjunction with the {@code
     *                    data} property for string columns. This property
     *                    reduces system disk usage by disabling reverse string
     *                    lookups. Queries like {@link GPUdb#filter(String,
     *                    String, String, Map)}, {@link
     *                    GPUdb#filterByList(String, String, Map, Map)}, and
     *                    {@link GPUdb#filterByValue(String, String, boolean,
     *                    double, String, String, Map)} work as usual but
     *                    {@link
     *                    GPUdb#aggregateUniqueRaw(AggregateUniqueRequest)} and
     *                    {@link
     *                    GPUdb#aggregateGroupByRaw(AggregateGroupByRequest)}
     *                    are not allowed on columns with this property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TIMESTAMP
     *                    TIMESTAMP}: Valid only for 'long' columns. Indicates
     *                    that this field represents a timestamp and will be
     *                    provided in milliseconds since the Unix epoch:
     *                    00:00:00 Jan 1 1970.  Dates represented by a
     *                    timestamp must fall between the year 1000 and the
     *                    year 2900.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#ULONG
     *                    ULONG}: Valid only for 'string' columns.  It
     *                    represents an unsigned long integer data type. The
     *                    string can only be interpreted as an unsigned long
     *                    data type with minimum value of zero, and maximum
     *                    value of 18446744073709551615.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DECIMAL
     *                    DECIMAL}: Valid only for 'string' columns.  It
     *                    represents a SQL type NUMERIC(19, 4) data type.
     *                    There can be up to 15 digits before the decimal point
     *                    and up to four digits in the fractional part.  The
     *                    value can be positive or negative (indicated by a
     *                    minus sign at the beginning).  This property is
     *                    mutually exclusive with the {@code text_search}
     *                    property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATE
     *                    DATE}: Valid only for 'string' columns.  Indicates
     *                    that this field represents a date and will be
     *                    provided in the format 'YYYY-MM-DD'.  The allowable
     *                    range is 1000-01-01 through 2900-01-01.  This
     *                    property is mutually exclusive with the {@code
     *                    text_search} property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#TIME
     *                    TIME}: Valid only for 'string' columns.  Indicates
     *                    that this field represents a time-of-day and will be
     *                    provided in the format 'HH:MM:SS.mmm'.  The allowable
     *                    range is 00:00:00.000 through 23:59:59.999.  This
     *                    property is mutually exclusive with the {@code
     *                    text_search} property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DATETIME
     *                    DATETIME}: Valid only for 'string' columns.
     *                    Indicates that this field represents a datetime and
     *                    will be provided in the format 'YYYY-MM-DD
     *                    HH:MM:SS.mmm'.  The allowable range is 1000-01-01
     *                    00:00:00.000 through 2900-01-01 23:59:59.999.  This
     *                    property is mutually exclusive with the {@code
     *                    text_search} property.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR1
     *                    CHAR1}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 1
     *                    character.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR2
     *                    CHAR2}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 2
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR4
     *                    CHAR4}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 4
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR8
     *                    CHAR8}: This property provides optimized memory, disk
     *                    and query performance for string columns. Strings
     *                    with this property must be no longer than 8
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR16
     *                    CHAR16}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 16
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR32
     *                    CHAR32}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 32
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR64
     *                    CHAR64}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 64
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR128
     *                    CHAR128}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 128
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#CHAR256
     *                    CHAR256}: This property provides optimized memory,
     *                    disk and query performance for string columns.
     *                    Strings with this property must be no longer than 256
     *                    characters.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#INT8
     *                    INT8}: This property provides optimized memory and
     *                    query performance for int columns. Ints with this
     *                    property must be between -128 and +127 (inclusive)
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#INT16
     *                    INT16}: This property provides optimized memory and
     *                    query performance for int columns. Ints with this
     *                    property must be between -32768 and +32767
     *                    (inclusive)
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#IPV4
     *                    IPV4}: This property provides optimized memory, disk
     *                    and query performance for string columns representing
     *                    IPv4 addresses (i.e. 192.168.1.1). Strings with this
     *                    property must be of the form: A.B.C.D where A, B, C
     *                    and D are in the range of 0-255.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#WKT
     *                    WKT}: Valid only for 'string' and 'bytes' columns.
     *                    Indicates that this field contains geospatial
     *                    geometry objects in Well-Known Text (WKT) or
     *                    Well-Known Binary (WKB) format.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#PRIMARY_KEY
     *                    PRIMARY_KEY}: This property indicates that this
     *                    column will be part of (or the entire) <a
     *                    href="../../../../concepts/tables.html#primary-keys"
     *                    target="_top">primary key</a>.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#SHARD_KEY
     *                    SHARD_KEY}: This property indicates that this column
     *                    will be part of (or the entire) <a
     *                    href="../../../../concepts/tables.html#shard-keys"
     *                    target="_top">shard key</a>.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#NULLABLE
     *                    NULLABLE}: This property indicates that this column
     *                    is nullable.  However, setting this property is
     *                    insufficient for making the column nullable.  The
     *                    user must declare the type of the column as a union
     *                    between its regular type and 'null' in the avro
     *                    schema for the record type in {@code typeDefinition}.
     *                    For example, if a column is of type integer and is
     *                    nullable, then the entry for the column in the avro
     *                    schema must be: ['int', 'null'].
     *                    The C++, C#, Java, and Python APIs have built-in
     *                    convenience for bypassing setting the avro schema by
     *                    hand.  For those languages, one can use this property
     *                    as usual and not have to worry about the avro schema
     *                    for the record.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#DICT
     *                    DICT}: This property indicates that this column
     *                    should be <a
     *                    href="../../../../concepts/dictionary_encoding.html"
     *                    target="_top">dictionary encoded</a>. It can only be
     *                    used in conjunction with restricted string (charN),
     *                    int, long or date columns. Dictionary encoding is
     *                    best for columns where the cardinality (the number of
     *                    unique values) is expected to be low. This property
     *                    can save a large amount of memory.
     *                            <li> {@link
     *                    com.gpudb.protocol.CreateTypeRequest.Properties#INIT_WITH_NOW
     *                    INIT_WITH_NOW}: For 'date', 'time', 'datetime', or
     *                    'timestamp' column types, replace empty strings and
     *                    invalid timestamps with 'NOW()' upon insert.
     *                    </ul>
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateTypeResponse createType(String typeDefinition, String label, Map<String, List<String>> properties, Map<String, String> options) throws GPUdbException {
        CreateTypeRequest actualRequest_ = new CreateTypeRequest(typeDefinition, label, properties, options);
        CreateTypeResponse actualResponse_ = new CreateTypeResponse();
        submitRequest("/create/type", actualRequest_, actualResponse_, false);
        setTypeDescriptorIfMissing(actualResponse_.getTypeId(), actualResponse_.getLabel(), actualResponse_.getTypeDefinition(), actualResponse_.getProperties());
        return actualResponse_;
    }



    /**
     * Merges data from one or more tables with comparable data types into a
     * new table.
     * <p>
     * The following merges are supported:
     * <p>
     * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
     * href="../../../../concepts/unions.html" target="_top">Union</a>.  For
     * limitations, see <a
     * href="../../../../concepts/unions.html#limitations-and-cautions"
     * target="_top">Union Limitations and Cautions</a>.
     * <p>
     * INTERSECT (DISTINCT/ALL) - For data set intersection details and
     * examples, see <a href="../../../../concepts/intersect.html"
     * target="_top">Intersect</a>.  For limitations, see <a
     * href="../../../../concepts/intersect.html#limitations"
     * target="_top">Intersect Limitations</a>.
     * <p>
     * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples,
     * see <a href="../../../../concepts/except.html" target="_top">Except</a>.
     * For limitations, see <a
     * href="../../../../concepts/except.html#limitations" target="_top">Except
     * Limitations</a>.
     * <p>
     * MERGE VIEWS - For a given set of <a
     * href="../../../../concepts/filtered_views.html" target="_top">filtered
     * views</a> on a single table, creates a single filtered view containing
     * all of the unique records across all of the given filtered data sets.
     * <p>
     * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
     * columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUnionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUnionResponse createUnion(CreateUnionRequest request) throws GPUdbException {
        CreateUnionResponse actualResponse_ = new CreateUnionResponse();
        submitRequest("/create/union", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Merges data from one or more tables with comparable data types into a
     * new table.
     * <p>
     * The following merges are supported:
     * <p>
     * UNION (DISTINCT/ALL) - For data set union details and examples, see <a
     * href="../../../../concepts/unions.html" target="_top">Union</a>.  For
     * limitations, see <a
     * href="../../../../concepts/unions.html#limitations-and-cautions"
     * target="_top">Union Limitations and Cautions</a>.
     * <p>
     * INTERSECT (DISTINCT/ALL) - For data set intersection details and
     * examples, see <a href="../../../../concepts/intersect.html"
     * target="_top">Intersect</a>.  For limitations, see <a
     * href="../../../../concepts/intersect.html#limitations"
     * target="_top">Intersect Limitations</a>.
     * <p>
     * EXCEPT (DISTINCT/ALL) - For data set subtraction details and examples,
     * see <a href="../../../../concepts/except.html" target="_top">Except</a>.
     * For limitations, see <a
     * href="../../../../concepts/except.html#limitations" target="_top">Except
     * Limitations</a>.
     * <p>
     * MERGE VIEWS - For a given set of <a
     * href="../../../../concepts/filtered_views.html" target="_top">filtered
     * views</a> on a single table, creates a single filtered view containing
     * all of the unique records across all of the given filtered data sets.
     * <p>
     * Non-charN 'string' and 'bytes' column types cannot be merged, nor can
     * columns marked as <a
     * href="../../../../concepts/types.html#data-handling"
     * target="_top">store-only</a>.
     * 
     * @param tableName  Name of the table to be created. Has the same naming
     *                   restrictions as <a
     *                   href="../../../../concepts/tables.html"
     *                   target="_top">tables</a>.
     * @param tableNames  The list of table names to merge. Must contain the
     *                    names of one or more existing tables.
     * @param inputColumnNames  The list of columns from each of the
     *                          corresponding input tables.
     * @param outputColumnNames  The list of names of the columns to be stored
     *                           in the output table.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the output table. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, the output table will be a top-level
     *                 table.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MATERIALIZE_ON_GPU
     *                 MATERIALIZE_ON_GPU}: No longer used.  See <a
     *                 href="../../../../rm/concepts.html"
     *                 target="_top">Resource Management Concepts</a> for
     *                 information about how resources are managed, <a
     *                 href="../../../../rm/concepts.html" target="_top">Tier
     *                 Strategy Concepts</a> for how resources are targeted for
     *                 VRAM, and <a
     *                 href="../../../../rm/usage.html#tier-strategies"
     *                 target="_top">Tier Strategy Usage</a> for how to specify
     *                 a table's priority in VRAM.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MODE
     *                 MODE}: If {@code merge_views}, then this operation will
     *                 merge the provided views. All {@code tableNames} must be
     *                 views from the same underlying base table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}: Retains all rows from the specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION
     *                 UNION}: Retains all unique rows from the specified
     *                 tables (synonym for {@code union_distinct}).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_DISTINCT
     *                 UNION_DISTINCT}: Retains all unique rows from the
     *                 specified tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT
     *                 EXCEPT}: Retains all unique rows from the first table
     *                 that do not appear in the second table (only works on 2
     *                 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#EXCEPT_ALL
     *                 EXCEPT_ALL}: Retains all rows(including duplicates) from
     *                 the first table that do not appear in the second table
     *                 (only works on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT
     *                 INTERSECT}: Retains all unique rows that appear in both
     *                 of the specified tables (only works on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#INTERSECT_ALL
     *                 INTERSECT_ALL}: Retains all rows(including duplicates)
     *                 that appear in both of the specified tables (only works
     *                 on 2 tables).
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#MERGE_VIEWS
     *                 MERGE_VIEWS}: Merge two or more views (or views of
     *                 views) of the same base data set into a new view. If
     *                 this mode is selected {@code inputColumnNames} AND
     *                 {@code outputColumnNames} must be empty. The resulting
     *                 view would match the results of a SQL OR operation,
     *                 e.g., if filter 1 creates a view using the expression 'x
     *                 = 20' and filter 2 creates a view using the expression
     *                 'x <= 10', then the merge views operation creates a new
     *                 view using the expression 'x = 20 OR x <= 10'.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#UNION_ALL
     *                 UNION_ALL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for this output table.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#CREATE_INDEXES
     *                 CREATE_INDEXES}: Comma-separated list of columns on
     *                 which to create indexes on the output table.  The
     *                 columns specified must be present in {@code
     *                 outputColumnNames}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the output table specified in
     *                 {@code tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the output table
     *                 specified in {@code tableName} will be persisted and
     *                 will not expire unless a {@code ttl} is specified.   If
     *                 {@code false}, then the output table will be an
     *                 in-memory table and will expire unless a {@code ttl} is
     *                 specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#VIEW_ID
     *                 VIEW_ID}: ID of view of which this output table is a
     *                 member.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FORCE_REPLICATED
     *                 FORCE_REPLICATED}: If {@code true}, then the output
     *                 table specified in {@code tableName} will be replicated
     *                 even if the source tables are not.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.CreateUnionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUnionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUnionResponse createUnion(String tableName, List<String> tableNames, List<List<String>> inputColumnNames, List<String> outputColumnNames, Map<String, String> options) throws GPUdbException {
        CreateUnionRequest actualRequest_ = new CreateUnionRequest(tableName, tableNames, inputColumnNames, outputColumnNames, options);
        CreateUnionResponse actualResponse_ = new CreateUnionResponse();
        submitRequest("/create/union", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new external user (a user whose credentials are managed by an
     * external LDAP).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserExternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserExternalResponse createUserExternal(CreateUserExternalRequest request) throws GPUdbException {
        CreateUserExternalResponse actualResponse_ = new CreateUserExternalResponse();
        submitRequest("/create/user/external", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new external user (a user whose credentials are managed by an
     * external LDAP).
     * 
     * @param name  Name of the user to be created. Must exactly match the
     *              user's name in the external LDAP, prefixed with a @. Must
     *              not be the same name as an existing user.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserExternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserExternalResponse createUserExternal(String name, Map<String, String> options) throws GPUdbException {
        CreateUserExternalRequest actualRequest_ = new CreateUserExternalRequest(name, options);
        CreateUserExternalResponse actualResponse_ = new CreateUserExternalResponse();
        submitRequest("/create/user/external", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new internal user (a user whose credentials are managed by the
     * database system).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserInternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserInternalResponse createUserInternal(CreateUserInternalRequest request) throws GPUdbException {
        CreateUserInternalResponse actualResponse_ = new CreateUserInternalResponse();
        submitRequest("/create/user/internal", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Creates a new internal user (a user whose credentials are managed by the
     * database system).
     * 
     * @param name  Name of the user to be created. Must contain only lowercase
     *              letters, digits, and underscores, and cannot begin with a
     *              digit. Must not be the same name as an existing user or
     *              role.
     * @param password  Initial password of the user to be created. May be an
     *                  empty string for no password.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.CreateUserInternalRequest.Options#RESOURCE_GROUP
     *                 RESOURCE_GROUP}: Name of an existing resource group to
     *                 associate with this user
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  CreateUserInternalResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public CreateUserInternalResponse createUserInternal(String name, String password, Map<String, String> options) throws GPUdbException {
        CreateUserInternalRequest actualRequest_ = new CreateUserInternalRequest(name, password, options);
        CreateUserInternalResponse actualResponse_ = new CreateUserInternalResponse();
        submitRequest("/create/user/internal", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing graph from the graph server and/or persist.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteGraphResponse deleteGraph(DeleteGraphRequest request) throws GPUdbException {
        DeleteGraphResponse actualResponse_ = new DeleteGraphResponse();
        submitRequest("/delete/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing graph from the graph server and/or persist.
     * 
     * @param graphName  Name of the graph to be deleted.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteGraphRequest.Options#DELETE_PERSIST
     *                 DELETE_PERSIST}: If set to {@code true}, the graph is
     *                 removed from the server and persist. If set to {@code
     *                 false}, the graph is removed from the server but is left
     *                 in persist. The graph can be reloaded from persist if it
     *                 is recreated with the same 'graph_name'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.DeleteGraphRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteGraphResponse deleteGraph(String graphName, Map<String, String> options) throws GPUdbException {
        DeleteGraphRequest actualRequest_ = new DeleteGraphRequest(graphName, options);
        DeleteGraphResponse actualResponse_ = new DeleteGraphResponse();
        submitRequest("/delete/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a proc. Any currently running instances of the proc will be
     * killed.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteProcResponse deleteProc(DeleteProcRequest request) throws GPUdbException {
        DeleteProcResponse actualResponse_ = new DeleteProcResponse();
        submitRequest("/delete/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a proc. Any currently running instances of the proc will be
     * killed.
     * 
     * @param procName  Name of the proc to be deleted. Must be the name of a
     *                  currently existing proc.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteProcResponse deleteProc(String procName, Map<String, String> options) throws GPUdbException {
        DeleteProcRequest actualRequest_ = new DeleteProcRequest(procName, options);
        DeleteProcResponse actualResponse_ = new DeleteProcResponse();
        submitRequest("/delete/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes record(s) matching the provided criteria from the given table.
     * The record selection criteria can either be one or more  {@code
     * expressions} (matching multiple records), a single record identified by
     * {@code record_id} options, or all records when using {@code
     * delete_all_records}.  Note that the three selection criteria are
     * mutually exclusive.  This operation cannot be run on a collection or a
     * view.  The operation is synchronous meaning that a response will not be
     * available until the request is completely processed and all the matching
     * records are deleted.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRecordsResponse deleteRecords(DeleteRecordsRequest request) throws GPUdbException {
        DeleteRecordsResponse actualResponse_ = new DeleteRecordsResponse();
        submitRequest("/delete/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes record(s) matching the provided criteria from the given table.
     * The record selection criteria can either be one or more  {@code
     * expressions} (matching multiple records), a single record identified by
     * {@code record_id} options, or all records when using {@code
     * delete_all_records}.  Note that the three selection criteria are
     * mutually exclusive.  This operation cannot be run on a collection or a
     * view.  The operation is synchronous meaning that a response will not be
     * available until the request is completely processed and all the matching
     * records are deleted.
     * 
     * @param tableName  Name of the table from which to delete records. The
     *                   set must be a currently existing table and not a
     *                   collection or a view.
     * @param expressions  A list of the actual predicates, one for each
     *                     select; format should follow the guidelines provided
     *                     <a href="../../../../concepts/expressions.html"
     *                     target="_top">here</a>. Specifying one or more
     *                     {@code expressions} is mutually exclusive to
     *                     specifying {@code record_id} in the {@code options}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the {@code expressions}.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: A record ID identifying a single record,
     *                 obtained at the time of {@link
     *                 GPUdb#insertRecordsRaw(RawInsertRecordsRequest)
     *                 insertion of the record} or by calling {@link
     *                 GPUdb#getRecordsFromCollectionRaw(GetRecordsFromCollectionRequest)}
     *                 with the *return_record_ids* option. This option cannot
     *                 be used to delete records from <a
     *                 href="../../../../concepts/tables.html#replication"
     *                 target="_top">replicated</a> tables.
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#DELETE_ALL_RECORDS
     *                 DELETE_ALL_RECORDS}: If set to {@code true}, all records
     *                 in the table will be deleted. If set to {@code false},
     *                 then the option is effectively ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.DeleteRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRecordsResponse deleteRecords(String tableName, List<String> expressions, Map<String, String> options) throws GPUdbException {
        DeleteRecordsRequest actualRequest_ = new DeleteRecordsRequest(tableName, expressions, options);
        DeleteRecordsResponse actualResponse_ = new DeleteRecordsResponse();
        submitRequest("/delete/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a resource group.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteResourceGroupResponse deleteResourceGroup(DeleteResourceGroupRequest request) throws GPUdbException {
        DeleteResourceGroupResponse actualResponse_ = new DeleteResourceGroupResponse();
        submitRequest("/delete/resourcegroup", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes a resource group.
     * 
     * @param name  Name of the resource group to be deleted.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteResourceGroupResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteResourceGroupResponse deleteResourceGroup(String name, Map<String, String> options) throws GPUdbException {
        DeleteResourceGroupRequest actualRequest_ = new DeleteResourceGroupRequest(name, options);
        DeleteResourceGroupResponse actualResponse_ = new DeleteResourceGroupResponse();
        submitRequest("/delete/resourcegroup", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRoleResponse deleteRole(DeleteRoleRequest request) throws GPUdbException {
        DeleteRoleResponse actualResponse_ = new DeleteRoleResponse();
        submitRequest("/delete/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing role.
     * 
     * @param name  Name of the role to be deleted. Must be an existing role.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteRoleResponse deleteRole(String name, Map<String, String> options) throws GPUdbException {
        DeleteRoleRequest actualRequest_ = new DeleteRoleRequest(name, options);
        DeleteRoleResponse actualResponse_ = new DeleteRoleResponse();
        submitRequest("/delete/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteUserResponse deleteUser(DeleteUserRequest request) throws GPUdbException {
        DeleteUserResponse actualResponse_ = new DeleteUserResponse();
        submitRequest("/delete/user", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Deletes an existing user.
     * 
     * @param name  Name of the user to be deleted. Must be an existing user.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  DeleteUserResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public DeleteUserResponse deleteUser(String name, Map<String, String> options) throws GPUdbException {
        DeleteUserRequest actualRequest_ = new DeleteUserRequest(name, options);
        DeleteUserResponse actualResponse_ = new DeleteUserResponse();
        submitRequest("/delete/user", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Executes a proc. This endpoint is asynchronous and does not wait for the
     * proc to complete before returning.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteProcResponse executeProc(ExecuteProcRequest request) throws GPUdbException {
        ExecuteProcResponse actualResponse_ = new ExecuteProcResponse();
        submitRequest("/execute/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Executes a proc. This endpoint is asynchronous and does not wait for the
     * proc to complete before returning.
     * 
     * @param procName  Name of the proc to execute. Must be the name of a
     *                  currently existing proc.
     * @param params  A map containing named parameters to pass to the proc.
     *                Each key/value pair specifies the name of a parameter and
     *                its value.  The default value is an empty {@link Map}.
     * @param binParams  A map containing named binary parameters to pass to
     *                   the proc. Each key/value pair specifies the name of a
     *                   parameter and its value.  The default value is an
     *                   empty {@link Map}.
     * @param inputTableNames  Names of the tables containing data to be passed
     *                         to the proc. Each name specified must be the
     *                         name of a currently existing table. If no table
     *                         names are specified, no data will be passed to
     *                         the proc.  The default value is an empty {@link
     *                         List}.
     * @param inputColumnNames  Map of table names from {@code inputTableNames}
     *                          to lists of names of columns from those tables
     *                          that will be passed to the proc. Each column
     *                          name specified must be the name of an existing
     *                          column in the corresponding table. If a table
     *                          name from {@code inputTableNames} is not
     *                          included, all columns from that table will be
     *                          passed to the proc.  The default value is an
     *                          empty {@link Map}.
     * @param outputTableNames  Names of the tables to which output data from
     *                          the proc will be written. If a specified table
     *                          does not exist, it will automatically be
     *                          created with the same schema as the
     *                          corresponding table (by order) from {@code
     *                          inputTableNames}, excluding any primary and
     *                          shard keys. If a specified table is a
     *                          non-persistent result table, it must not have
     *                          primary or shard keys. If no table names are
     *                          specified, no output data can be returned from
     *                          the proc.  The default value is an empty {@link
     *                          List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#CACHE_INPUT
     *                 CACHE_INPUT}: A comma-delimited list of table names from
     *                 {@code inputTableNames} from which input data will be
     *                 cached for use in subsequent calls to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)} with the {@code use_cached_input} option. Cached
     *                 input data will be retained until the proc status is
     *                 cleared with the {@link GPUdb#showProcStatus(String,
     *                 Map) clear_complete} option of {@link
     *                 GPUdb#showProcStatus(String, Map)} and all proc
     *                 instances using the cached data have completed.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#USE_CACHED_INPUT
     *                 USE_CACHED_INPUT}: A comma-delimited list of run IDs (as
     *                 returned from prior calls to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)}) of running or completed proc instances from which
     *                 input data cached using the {@code cache_input} option
     *                 will be used. Cached input data will not be used for any
     *                 tables specified in {@code inputTableNames}, but data
     *                 from all other tables cached for the specified run IDs
     *                 will be passed to the proc. If the same table was cached
     *                 for multiple specified run IDs, the cached data from the
     *                 first run ID specified in the list that includes that
     *                 table will be used.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#KIFS_INPUT_DIRS
     *                 KIFS_INPUT_DIRS}: A comma-delimited list of KiFS
     *                 directories whose local files will be made directly
     *                 accessible to the proc through the API. (All KiFS files,
     *                 local or not, are also accessible through the file
     *                 system below the KiFS mount point.) Each name specified
     *                 must the name of an existing KiFS directory.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteProcRequest.Options#RUN_TAG
     *                 RUN_TAG}: A string that, if not empty, can be used in
     *                 subsequent calls to {@link GPUdb#showProcStatus(String,
     *                 Map)} or {@link GPUdb#killProc(String, Map)} to identify
     *                 the proc instance.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteProcResponse executeProc(String procName, Map<String, String> params, Map<String, ByteBuffer> binParams, List<String> inputTableNames, Map<String, List<String>> inputColumnNames, List<String> outputTableNames, Map<String, String> options) throws GPUdbException {
        ExecuteProcRequest actualRequest_ = new ExecuteProcRequest(procName, params, binParams, inputTableNames, inputColumnNames, outputTableNames, options);
        ExecuteProcResponse actualResponse_ = new ExecuteProcResponse();
        submitRequest("/execute/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * SQL Request
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawExecuteSqlResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawExecuteSqlResponse executeSqlRaw(ExecuteSqlRequest request) throws GPUdbException {
        RawExecuteSqlResponse actualResponse_ = new RawExecuteSqlResponse();
        submitRequest("/execute/sql", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * SQL Request
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteSqlResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteSqlResponse executeSql(ExecuteSqlRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawExecuteSqlResponse actualResponse_ = new RawExecuteSqlResponse();
        submitRequest("/execute/sql", request, actualResponse_, false);
        ExecuteSqlResponse response_ = new ExecuteSqlResponse();
        response_.setCountAffected(actualResponse_.getCountAffected());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setPagingTable(actualResponse_.getPagingTable());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * SQL Request
     * 
     * @param statement  SQL statement (query, DML, or DDL) to be executed
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param requestSchemaStr  Avro schema of {@code data}.  The default value
     *                          is ''.
     * @param data  An array of binary-encoded data for the records to be
     *              binded to the SQL query.  The default value is an empty
     *              {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PARALLEL_EXECUTION
     *                 PARALLEL_EXECUTION}: If {@code false}, disables the
     *                 parallel step execution of the given query.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#COST_BASED_OPTIMIZATION
     *                 COST_BASED_OPTIMIZATION}: If {@code false}, disables the
     *                 cost-based optimization of the given query.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PLAN_CACHE
     *                 PLAN_CACHE}: If {@code false}, disables plan caching for
     *                 the given query.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#RULE_BASED_OPTIMIZATION
     *                 RULE_BASED_OPTIMIZATION}: If {@code false}, disables
     *                 rule-based rewrite optimizations for the given query
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#RESULTS_CACHING
     *                 RESULTS_CACHING}: If {@code false}, disables caching of
     *                 the results of the given query
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PAGING_TABLE
     *                 PAGING_TABLE}: When empty or the specified paging table
     *                 not exists, the system will create a paging table and
     *                 return when query output has more records than the user
     *                 asked. If the paging table exists in the system, the
     *                 records from the paging table are returned without
     *                 evaluating the query.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PAGING_TABLE_TTL
     *                 PAGING_TABLE_TTL}: Sets the <a
     *                 href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the paging table.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#DISTRIBUTED_JOINS
     *                 DISTRIBUTED_JOINS}: If {@code true}, enables the use of
     *                 distributed joins in servicing the given query.  Any
     *                 query requiring a distributed join will succeed, though
     *                 hints can be used in the query to change the
     *                 distribution of the source data to allow the query to
     *                 succeed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#DISTRIBUTED_OPERATIONS
     *                 DISTRIBUTED_OPERATIONS}: If {@code true}, enables the
     *                 use of distributed operations in servicing the given
     *                 query.  Any query requiring a distributed join will
     *                 succeed, though hints can be used in the query to change
     *                 the distribution of the source data to allow the query
     *                 to succeed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#SSQ_OPTIMIZATION
     *                 SSQ_OPTIMIZATION}: If {@code false}, scalar subqueries
     *                 will be translated into joins
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#LATE_MATERIALIZATION
     *                 LATE_MATERIALIZATION}: If {@code true}, Joins/Filters
     *                 results  will always be materialized ( saved to result
     *                 tables format)
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the intermediate result tables
     *                 used in query execution.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Can be used to customize
     *                 behavior when the updated primary key value already
     *                 exists as described in {@link
     *                 GPUdb#insertRecordsRaw(RawInsertRecordsRequest)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PRESERVE_DICT_ENCODING
     *                 PRESERVE_DICT_ENCODING}: If {@code true}, then columns
     *                 that were dict encoded in the source table will be dict
     *                 encoded in the projection table.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#VALIDATE_CHANGE_COLUMN
     *                 VALIDATE_CHANGE_COLUMN}: When changing a column using
     *                 alter table, validate the change before applying it. If
     *                 {@code true}, then validate all values. A value too
     *                 large (or too long) for the new type will prevent any
     *                 change. If {@code false}, then when a value is too large
     *                 or long, it will be truncated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}:
     *                 true
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}: false
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#PREPARE_MODE
     *                 PREPARE_MODE}: If {@code true}, compiles a query into an
     *                 execution plan and saves it in query cache. Query
     *                 execution is not performed and an empty response will be
     *                 returned to user
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#VIEW_ID
     *                 VIEW_ID}: <DEVELOPER>  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExecuteSqlRequest.Options#NO_COUNT
     *                 NO_COUNT}: <DEVELOPER>  The default value is 'false'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ExecuteSqlResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ExecuteSqlResponse executeSql(String statement, long offset, long limit, String requestSchemaStr, List<ByteBuffer> data, Map<String, String> options) throws GPUdbException {
        ExecuteSqlRequest actualRequest_ = new ExecuteSqlRequest(statement, offset, limit, null, requestSchemaStr, data, options);
        RawExecuteSqlResponse actualResponse_ = new RawExecuteSqlResponse();
        submitRequest("/execute/sql", actualRequest_, actualResponse_, false);
        ExecuteSqlResponse response_ = new ExecuteSqlResponse();
        response_.setCountAffected(actualResponse_.getCountAffected());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setPagingTable(actualResponse_.getPagingTable());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Filters data based on the specified expression.  The results are stored
     * in a <a href="../../../../concepts/filtered_views.html"
     * target="_top">result set</a> with the given {@code viewName}.
     * <p>
     * For details see <a href="../../../../concepts/expressions.html"
     * target="_top">Expressions</a>.
     * <p>
     * The response message contains the number of points for which the
     * expression evaluated to be true, which is equivalent to the size of the
     * result view.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterResponse filter(FilterRequest request) throws GPUdbException {
        FilterResponse actualResponse_ = new FilterResponse();
        submitRequest("/filter", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters data based on the specified expression.  The results are stored
     * in a <a href="../../../../concepts/filtered_views.html"
     * target="_top">result set</a> with the given {@code viewName}.
     * <p>
     * For details see <a href="../../../../concepts/expressions.html"
     * target="_top">Expressions</a>.
     * <p>
     * The response message contains the number of points for which the
     * expression evaluated to be true, which is equivalent to the size of the
     * result view.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table, or a view (when chaining
     *                   queries).  If filtering a collection, all child tables
     *                   where the filter expression is valid will be filtered;
     *                   the filtered result tables will then be placed in a
     *                   collection specified by {@code viewName}.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param expression  The select expression to filter the specified table.
     *                    For details see <a
     *                    href="../../../../concepts/expressions.html"
     *                    target="_top">Expressions</a>.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterRequest.Options#VIEW_ID
     *                 VIEW_ID}: view this filtered-view is part of.  The
     *                 default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterRequest.Options#TTL TTL}: Sets
     *                 the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the view specified in {@code
     *                 viewName}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterResponse filter(String tableName, String viewName, String expression, Map<String, String> options) throws GPUdbException {
        FilterRequest actualRequest_ = new FilterRequest(tableName, viewName, expression, options);
        FilterResponse actualResponse_ = new FilterResponse();
        submitRequest("/filter", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table are within a named area of
     * interest (NAI/polygon). The operation is synchronous, meaning that a
     * response will not be returned until all the matching objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new resultant set (view) which satisfies the input NAI restriction
     * specification is created with the name {@code viewName} passed in as
     * part of the input.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaResponse filterByArea(FilterByAreaRequest request) throws GPUdbException {
        FilterByAreaResponse actualResponse_ = new FilterByAreaResponse();
        submitRequest("/filter/byarea", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table are within a named area of
     * interest (NAI/polygon). The operation is synchronous, meaning that a
     * response will not be returned until all the matching objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new resultant set (view) which satisfies the input NAI restriction
     * specification is created with the name {@code viewName} passed in as
     * part of the input.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table, or a view (when chaining
     *                   queries).  If filtering a collection, all child tables
     *                   where the filter expression is valid will be filtered;
     *                   the filtered result tables will then be placed in a
     *                   collection specified by {@code viewName}.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param xColumnName  Name of the column containing the x values to be
     *                     filtered.
     * @param xVector  List of x coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param yColumnName  Name of the column containing the y values to be
     *                     filtered.
     * @param yVector  List of y coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByAreaRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created.  If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaResponse filterByArea(String tableName, String viewName, String xColumnName, List<Double> xVector, String yColumnName, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        FilterByAreaRequest actualRequest_ = new FilterByAreaRequest(tableName, viewName, xColumnName, xVector, yColumnName, yVector, options);
        FilterByAreaResponse actualResponse_ = new FilterByAreaResponse();
        submitRequest("/filter/byarea", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * named area of interest (NAI/polygon). The operation is synchronous,
     * meaning that a response will not be returned until all the matching
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * NAI restriction specification is created with the name {@code viewName}
     * passed in as part of the input.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaGeometryResponse filterByAreaGeometry(FilterByAreaGeometryRequest request) throws GPUdbException {
        FilterByAreaGeometryResponse actualResponse_ = new FilterByAreaGeometryResponse();
        submitRequest("/filter/byarea/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * named area of interest (NAI/polygon). The operation is synchronous,
     * meaning that a response will not be returned until all the matching
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * NAI restriction specification is created with the name {@code viewName}
     * passed in as part of the input.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table, or a view (when chaining
     *                   queries).  If filtering a collection, all child tables
     *                   where the filter expression is valid will be filtered;
     *                   the filtered result tables will then be placed in a
     *                   collection specified by {@code viewName}.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Must not be an already existing
     *                  collection, table or view.  The default value is ''.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param xVector  List of x coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param yVector  List of y coordinates of the vertices of the polygon
     *                 representing the area to be filtered.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByAreaGeometryRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByAreaGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByAreaGeometryResponse filterByAreaGeometry(String tableName, String viewName, String columnName, List<Double> xVector, List<Double> yVector, Map<String, String> options) throws GPUdbException {
        FilterByAreaGeometryRequest actualRequest_ = new FilterByAreaGeometryRequest(tableName, viewName, columnName, xVector, yVector, options);
        FilterByAreaGeometryResponse actualResponse_ = new FilterByAreaGeometryResponse();
        submitRequest("/filter/byarea/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates how many objects within the given table lie in a rectangular
     * box. The operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available. The response payload
     * provides the count of the resulting set. A new resultant set which
     * satisfies the input NAI restriction specification is also created when a
     * {@code viewName} is passed in as part of the input payload.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxResponse filterByBox(FilterByBoxRequest request) throws GPUdbException {
        FilterByBoxResponse actualResponse_ = new FilterByBoxResponse();
        submitRequest("/filter/bybox", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates how many objects within the given table lie in a rectangular
     * box. The operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available. The response payload
     * provides the count of the resulting set. A new resultant set which
     * satisfies the input NAI restriction specification is also created when a
     * {@code viewName} is passed in as part of the input payload.
     * 
     * @param tableName  Name of the table on which the bounding box operation
     *                   will be performed. Must be an existing table.
     * @param viewName  Optional name of the result view that will be created
     *                  containing the results of the query. Has the same
     *                  naming restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param xColumnName  Name of the column on which to perform the bounding
     *                     box query. Must be a valid numeric column.
     * @param minX  Lower bound for the column chosen by {@code xColumnName}.
     *              Must be less than or equal to {@code maxX}.
     * @param maxX  Upper bound for {@code xColumnName}.  Must be greater than
     *              or equal to {@code minX}.
     * @param yColumnName  Name of a column on which to perform the bounding
     *                     box query. Must be a valid numeric column.
     * @param minY  Lower bound for {@code yColumnName}. Must be less than or
     *              equal to {@code maxY}.
     * @param maxY  Upper bound for {@code yColumnName}. Must be greater than
     *              or equal to {@code minY}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByBoxRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxResponse filterByBox(String tableName, String viewName, String xColumnName, double minX, double maxX, String yColumnName, double minY, double maxY, Map<String, String> options) throws GPUdbException {
        FilterByBoxRequest actualRequest_ = new FilterByBoxRequest(tableName, viewName, xColumnName, minX, maxX, yColumnName, minY, maxY, options);
        FilterByBoxResponse actualResponse_ = new FilterByBoxResponse();
        submitRequest("/filter/bybox", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * rectangular box. The operation is synchronous, meaning that a response
     * will not be returned until all the objects are fully available. The
     * response payload provides the count of the resulting set. A new
     * resultant set which satisfies the input NAI restriction specification is
     * also created when a {@code viewName} is passed in as part of the input
     * payload.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxGeometryResponse filterByBoxGeometry(FilterByBoxGeometryRequest request) throws GPUdbException {
        FilterByBoxGeometryResponse actualResponse_ = new FilterByBoxGeometryResponse();
        submitRequest("/filter/bybox/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * rectangular box. The operation is synchronous, meaning that a response
     * will not be returned until all the objects are fully available. The
     * response payload provides the count of the resulting set. A new
     * resultant set which satisfies the input NAI restriction specification is
     * also created when a {@code viewName} is passed in as part of the input
     * payload.
     * 
     * @param tableName  Name of the table on which the bounding box operation
     *                   will be performed. Must be an existing table.
     * @param viewName  Optional name of the result view that will be created
     *                  containing the results of the query. Must not be an
     *                  already existing collection, table or view.  The
     *                  default value is ''.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param minX  Lower bound for the x-coordinate of the rectangular box.
     *              Must be less than or equal to {@code maxX}.
     * @param maxX  Upper bound for the x-coordinate of the rectangular box.
     *              Must be greater than or equal to {@code minX}.
     * @param minY  Lower bound for the y-coordinate of the rectangular box.
     *              Must be less than or equal to {@code maxY}.
     * @param maxY  Upper bound for the y-coordinate of the rectangular box.
     *              Must be greater than or equal to {@code minY}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByBoxGeometryRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByBoxGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByBoxGeometryResponse filterByBoxGeometry(String tableName, String viewName, String columnName, double minX, double maxX, double minY, double maxY, Map<String, String> options) throws GPUdbException {
        FilterByBoxGeometryRequest actualRequest_ = new FilterByBoxGeometryRequest(tableName, viewName, columnName, minX, maxX, minY, maxY, options);
        FilterByBoxGeometryResponse actualResponse_ = new FilterByBoxGeometryResponse();
        submitRequest("/filter/bybox/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Applies a geometry filter against a geospatial geometry column in a
     * given table, collection or view. The filtering geometry is provided by
     * {@code inputWkt}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByGeometryResponse filterByGeometry(FilterByGeometryRequest request) throws GPUdbException {
        FilterByGeometryResponse actualResponse_ = new FilterByGeometryResponse();
        submitRequest("/filter/bygeometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Applies a geometry filter against a geospatial geometry column in a
     * given table, collection or view. The filtering geometry is provided by
     * {@code inputWkt}.
     * 
     * @param tableName  Name of the table on which the filter by geometry will
     *                   be performed.  Must be an existing table, collection
     *                   or view containing a geospatial geometry column.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param columnName  Name of the column to be used in the filter. Must be
     *                    a geospatial geometry column.
     * @param inputWkt  A geometry in WKT format that will be used to filter
     *                  the objects in {@code tableName}.  The default value is
     *                  ''.
     * @param operation  The geometric filtering operation to perform
     *                   Supported values:
     *                   <ul>
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#CONTAINS
     *                   CONTAINS}: Matches records that contain the given WKT
     *                   in {@code inputWkt}, i.e. the given WKT is within the
     *                   bounds of a record's geometry.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#CROSSES
     *                   CROSSES}: Matches records that cross the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#DISJOINT
     *                   DISJOINT}: Matches records that are disjoint from the
     *                   given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#EQUALS
     *                   EQUALS}: Matches records that are the same as the
     *                   given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#INTERSECTS
     *                   INTERSECTS}: Matches records that intersect the given
     *                   WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#OVERLAPS
     *                   OVERLAPS}: Matches records that overlap the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#TOUCHES
     *                   TOUCHES}: Matches records that touch the given WKT.
     *                           <li> {@link
     *                   com.gpudb.protocol.FilterByGeometryRequest.Operation#WITHIN
     *                   WITHIN}: Matches records that are within the given
     *                   WKT.
     *                   </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByGeometryRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByGeometryResponse filterByGeometry(String tableName, String viewName, String columnName, String inputWkt, String operation, Map<String, String> options) throws GPUdbException {
        FilterByGeometryRequest actualRequest_ = new FilterByGeometryRequest(tableName, viewName, columnName, inputWkt, operation, options);
        FilterByGeometryResponse actualResponse_ = new FilterByGeometryResponse();
        submitRequest("/filter/bygeometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which records from a table have values in the given list for
     * the corresponding column. The operation is synchronous, meaning that a
     * response will not be returned until all the objects are fully available.
     * The response payload provides the count of the resulting set. A new
     * resultant set (view) which satisfies the input filter specification is
     * also created if a {@code viewName} is passed in as part of the request.
     * <p>
     * For example, if a type definition has the columns 'x' and 'y', then a
     * filter by list query with the column map {"x":["10.1", "2.3"],
     * "y":["0.0", "-31.5", "42.0"]} will return the count of all data points
     * whose x and y values match both in the respective x- and y-lists, e.g.,
     * "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5", etc. However, a record
     * with "x = 10.1 and y = -31.5" or "x = 2.3 and y = 0.0" would not be
     * returned because the values in the given lists do not correspond.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByListResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByListResponse filterByList(FilterByListRequest request) throws GPUdbException {
        FilterByListResponse actualResponse_ = new FilterByListResponse();
        submitRequest("/filter/bylist", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which records from a table have values in the given list for
     * the corresponding column. The operation is synchronous, meaning that a
     * response will not be returned until all the objects are fully available.
     * The response payload provides the count of the resulting set. A new
     * resultant set (view) which satisfies the input filter specification is
     * also created if a {@code viewName} is passed in as part of the request.
     * <p>
     * For example, if a type definition has the columns 'x' and 'y', then a
     * filter by list query with the column map {"x":["10.1", "2.3"],
     * "y":["0.0", "-31.5", "42.0"]} will return the count of all data points
     * whose x and y values match both in the respective x- and y-lists, e.g.,
     * "x = 10.1 and y = 0.0", "x = 2.3 and y = -31.5", etc. However, a record
     * with "x = 10.1 and y = -31.5" or "x = 2.3 and y = 0.0" would not be
     * returned because the values in the given lists do not correspond.
     * 
     * @param tableName  Name of the table to filter.  This may be the name of
     *                   a collection, a table, or a view (when chaining
     *                   queries).  If filtering a collection, all child tables
     *                   where the filter expression is valid will be filtered;
     *                   the filtered result tables will then be placed in a
     *                   collection specified by {@code viewName}.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param columnValuesMap  List of values for the corresponding column in
     *                         the table
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#FILTER_MODE
     *                 FILTER_MODE}: String indicating the filter mode, either
     *                 'in_list' or 'not_in_list'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#IN_LIST
     *                 IN_LIST}: The filter will match all items that are in
     *                 the provided list(s).
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#NOT_IN_LIST
     *                 NOT_IN_LIST}: The filter will match all items that are
     *                 not in the provided list(s).
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByListRequest.Options#IN_LIST
     *                 IN_LIST}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByListResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByListResponse filterByList(String tableName, String viewName, Map<String, List<String>> columnValuesMap, Map<String, String> options) throws GPUdbException {
        FilterByListRequest actualRequest_ = new FilterByListRequest(tableName, viewName, columnValuesMap, options);
        FilterByListResponse actualResponse_ = new FilterByListResponse();
        submitRequest("/filter/bylist", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a {@code
     * viewName} is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusResponse filterByRadius(FilterByRadiusRequest request) throws GPUdbException {
        FilterByRadiusResponse actualResponse_ = new FilterByRadiusResponse();
        submitRequest("/filter/byradius", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table lie within a circle with the given
     * radius and center point (i.e. circular NAI). The operation is
     * synchronous, meaning that a response will not be returned until all the
     * objects are fully available. The response payload provides the count of
     * the resulting set. A new resultant set (view) which satisfies the input
     * circular NAI restriction specification is also created if a {@code
     * viewName} is passed in as part of the request.
     * <p>
     * For track data, all track points that lie within the circle plus one
     * point on either side of the circle (if the track goes beyond the circle)
     * will be included in the result.
     * 
     * @param tableName  Name of the table on which the filter by radius
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param xColumnName  Name of the column to be used for the x-coordinate
     *                     (the longitude) of the center.
     * @param xCenter  Value of the longitude of the center. Must be within
     *                 [-180.0, 180.0].  The minimum allowed value is -180. The
     *                 maximum allowed value is 180.
     * @param yColumnName  Name of the column to be used for the
     *                     y-coordinate-the latitude-of the center.
     * @param yCenter  Value of the latitude of the center. Must be within
     *                 [-90.0, 90.0].  The minimum allowed value is -90. The
     *                 maximum allowed value is 90.
     * @param radius  The radius of the circle within which the search will be
     *                performed. Must be a non-zero positive value. It is in
     *                meters; so, for example, a value of '42000' means 42 km.
     *                The minimum allowed value is 0. The maximum allowed value
     *                is MAX_INT.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByRadiusRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusResponse filterByRadius(String tableName, String viewName, String xColumnName, double xCenter, String yColumnName, double yCenter, double radius, Map<String, String> options) throws GPUdbException {
        FilterByRadiusRequest actualRequest_ = new FilterByRadiusRequest(tableName, viewName, xColumnName, xCenter, yColumnName, yCenter, radius, options);
        FilterByRadiusResponse actualResponse_ = new FilterByRadiusResponse();
        submitRequest("/filter/byradius", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * circle with the given radius and center point (i.e. circular NAI). The
     * operation is synchronous, meaning that a response will not be returned
     * until all the objects are fully available. The response payload provides
     * the count of the resulting set. A new resultant set (view) which
     * satisfies the input circular NAI restriction specification is also
     * created if a {@code viewName} is passed in as part of the request.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusGeometryResponse filterByRadiusGeometry(FilterByRadiusGeometryRequest request) throws GPUdbException {
        FilterByRadiusGeometryResponse actualResponse_ = new FilterByRadiusGeometryResponse();
        submitRequest("/filter/byradius/geometry", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which geospatial geometry objects from a table intersect a
     * circle with the given radius and center point (i.e. circular NAI). The
     * operation is synchronous, meaning that a response will not be returned
     * until all the objects are fully available. The response payload provides
     * the count of the resulting set. A new resultant set (view) which
     * satisfies the input circular NAI restriction specification is also
     * created if a {@code viewName} is passed in as part of the request.
     * 
     * @param tableName  Name of the table on which the filter by radius
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Must not be an already existing
     *                  collection, table or view.  The default value is ''.
     * @param columnName  Name of the geospatial geometry column to be
     *                    filtered.
     * @param xCenter  Value of the longitude of the center. Must be within
     *                 [-180.0, 180.0].  The minimum allowed value is -180. The
     *                 maximum allowed value is 180.
     * @param yCenter  Value of the latitude of the center. Must be within
     *                 [-90.0, 90.0].  The minimum allowed value is -90. The
     *                 maximum allowed value is 90.
     * @param radius  The radius of the circle within which the search will be
     *                performed. Must be a non-zero positive value. It is in
     *                meters; so, for example, a value of '42000' means 42 km.
     *                The minimum allowed value is 0. The maximum allowed value
     *                is MAX_INT.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByRadiusGeometryRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRadiusGeometryResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRadiusGeometryResponse filterByRadiusGeometry(String tableName, String viewName, String columnName, double xCenter, double yCenter, double radius, Map<String, String> options) throws GPUdbException {
        FilterByRadiusGeometryRequest actualRequest_ = new FilterByRadiusGeometryRequest(tableName, viewName, columnName, xCenter, yCenter, radius, options);
        FilterByRadiusGeometryResponse actualResponse_ = new FilterByRadiusGeometryResponse();
        submitRequest("/filter/byradius/geometry", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table have a column that is within the
     * given bounds. An object from the table identified by {@code tableName}
     * is added to the view {@code viewName} if its column is within [{@code
     * lowerBound}, {@code upperBound}] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed the bound filter.  Although this functionality can also be
     * accomplished with the standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given bounds (which may not include all the track points of any given
     * track).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRangeResponse filterByRange(FilterByRangeRequest request) throws GPUdbException {
        FilterByRangeResponse actualResponse_ = new FilterByRangeResponse();
        submitRequest("/filter/byrange", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table have a column that is within the
     * given bounds. An object from the table identified by {@code tableName}
     * is added to the view {@code viewName} if its column is within [{@code
     * lowerBound}, {@code upperBound}] (inclusive). The operation is
     * synchronous. The response provides a count of the number of objects
     * which passed the bound filter.  Although this functionality can also be
     * accomplished with the standard filter function, it is more efficient.
     * <p>
     * For track objects, the count reflects how many points fall within the
     * given bounds (which may not include all the track points of any given
     * track).
     * 
     * @param tableName  Name of the table on which the filter by range
     *                   operation will be performed.  Must be an existing
     *                   table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param columnName  Name of a column on which the operation would be
     *                    applied.
     * @param lowerBound  Value of the lower bound (inclusive).
     * @param upperBound  Value of the upper bound (inclusive).
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByRangeRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByRangeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByRangeResponse filterByRange(String tableName, String viewName, String columnName, double lowerBound, double upperBound, Map<String, String> options) throws GPUdbException {
        FilterByRangeRequest actualRequest_ = new FilterByRangeRequest(tableName, viewName, columnName, lowerBound, upperBound, options);
        FilterByRangeResponse actualResponse_ = new FilterByRangeResponse();
        submitRequest("/filter/byrange", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects matching all points of the given track (works only on
     * track type data).  It allows users to specify a particular track to find
     * all other points in the table that fall within specified ranges-spatial
     * and temporal-of all points of the given track. Additionally, the user
     * can specify another track to see if the two intersect (or go close to
     * each other within the specified ranges). The user also has the
     * flexibility of using different metrics for the spatial distance
     * calculation: Euclidean (flat geometry) or Great Circle (spherical
     * geometry to approximate the Earth's surface distances). The filtered
     * points are stored in a newly created result set. The return value of the
     * function is the number of points in the resultant set (view).
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterBySeriesResponse filterBySeries(FilterBySeriesRequest request) throws GPUdbException {
        FilterBySeriesResponse actualResponse_ = new FilterBySeriesResponse();
        submitRequest("/filter/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects matching all points of the given track (works only on
     * track type data).  It allows users to specify a particular track to find
     * all other points in the table that fall within specified ranges-spatial
     * and temporal-of all points of the given track. Additionally, the user
     * can specify another track to see if the two intersect (or go close to
     * each other within the specified ranges). The user also has the
     * flexibility of using different metrics for the spatial distance
     * calculation: Euclidean (flat geometry) or Great Circle (spherical
     * geometry to approximate the Earth's surface distances). The filtered
     * points are stored in a newly created result set. The return value of the
     * function is the number of points in the resultant set (view).
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all the objects are fully available.
     * 
     * @param tableName  Name of the table on which the filter by track
     *                   operation will be performed. Must be a currently
     *                   existing table with a <a
     *                   href="../../../../geospatial/geo_objects.html"
     *                   target="_top">track</a> present.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param trackId  The ID of the track which will act as the filtering
     *                 points. Must be an existing track within the given
     *                 table.
     * @param targetTrackIds  Up to one track ID to intersect with the "filter"
     *                        track. If any provided, it must be an valid track
     *                        ID within the given set.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#SPATIAL_RADIUS
     *                 SPATIAL_RADIUS}: A positive number passed as a string
     *                 representing the radius of the search area centered
     *                 around each track point's geospatial coordinates. The
     *                 value is interpreted in meters. Required parameter.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#TIME_RADIUS
     *                 TIME_RADIUS}: A positive number passed as a string
     *                 representing the maximum allowable time difference
     *                 between the timestamps of a filtered object and the
     *                 given track's points. The value is interpreted in
     *                 seconds. Required parameter.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#SPATIAL_DISTANCE_METRIC
     *                 SPATIAL_DISTANCE_METRIC}: A string representing the
     *                 coordinate system to use for the spatial search
     *                 criteria. Acceptable values are 'euclidean' and
     *                 'great_circle'. Optional parameter; default is
     *                 'euclidean'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#EUCLIDEAN
     *                 EUCLIDEAN}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterBySeriesRequest.Options#GREAT_CIRCLE
     *                 GREAT_CIRCLE}
     *                 </ul>
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterBySeriesResponse filterBySeries(String tableName, String viewName, String trackId, List<String> targetTrackIds, Map<String, String> options) throws GPUdbException {
        FilterBySeriesRequest actualRequest_ = new FilterBySeriesRequest(tableName, viewName, trackId, targetTrackIds, options);
        FilterBySeriesResponse actualResponse_ = new FilterBySeriesResponse();
        submitRequest("/filter/byseries", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table, collection, or view match a
     * string expression for the given string columns. The options
     * 'case_sensitive' can be used to modify the behavior for all modes except
     * 'search'. For 'search' mode details and limitations, see <a
     * href="../../../../concepts/full_text_search.html" target="_top">Full
     * Text Search</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByStringResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByStringResponse filterByString(FilterByStringRequest request) throws GPUdbException {
        FilterByStringResponse actualResponse_ = new FilterByStringResponse();
        submitRequest("/filter/bystring", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table, collection, or view match a
     * string expression for the given string columns. The options
     * 'case_sensitive' can be used to modify the behavior for all modes except
     * 'search'. For 'search' mode details and limitations, see <a
     * href="../../../../concepts/full_text_search.html" target="_top">Full
     * Text Search</a>.
     * 
     * @param tableName  Name of the table on which the filter operation will
     *                   be performed.  Must be an existing table, collection
     *                   or view.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param expression  The expression with which to filter the table.
     * @param mode  The string filtering mode to apply. See below for details.
     *              Supported values:
     *              <ul>
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#SEARCH
     *              SEARCH}: Full text search query with wildcards and boolean
     *              operators. Note that for this mode, no column can be
     *              specified in {@code columnNames}; all string columns of the
     *              table that have text search enabled will be searched.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#EQUALS
     *              EQUALS}: Exact whole-string match (accelerated).
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#CONTAINS
     *              CONTAINS}: Partial substring match (not accelerated).  If
     *              the column is a string type (non-charN) and the number of
     *              records is too large, it will return 0.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#STARTS_WITH
     *              STARTS_WITH}: Strings that start with the given expression
     *              (not accelerated). If the column is a string type
     *              (non-charN) and the number of records is too large, it will
     *              return 0.
     *                      <li> {@link
     *              com.gpudb.protocol.FilterByStringRequest.Mode#REGEX REGEX}:
     *              Full regular expression search (not accelerated). If the
     *              column is a string type (non-charN) and the number of
     *              records is too large, it will return 0.
     *              </ul>
     * @param columnNames  List of columns on which to apply the filter.
     *                     Ignored for 'search' mode.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#CASE_SENSITIVE
     *                 CASE_SENSITIVE}: If 'false' then string filtering will
     *                 ignore case. Does not apply to 'search' mode.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByStringRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByStringResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByStringResponse filterByString(String tableName, String viewName, String expression, String mode, List<String> columnNames, Map<String, String> options) throws GPUdbException {
        FilterByStringRequest actualRequest_ = new FilterByStringRequest(tableName, viewName, expression, mode, columnNames, options);
        FilterByStringResponse actualResponse_ = new FilterByStringResponse();
        submitRequest("/filter/bystring", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects in one table based on objects in another table. The user
     * must specify matching column types from the two tables (i.e. the target
     * table from which objects will be filtered and the source table based on
     * which the filter will be created); the column names need not be the
     * same. If a {@code viewName} is specified, then the filtered objects will
     * then be put in a newly created view. The operation is synchronous,
     * meaning that a response will not be returned until all objects are fully
     * available in the result view. The return value contains the count (i.e.
     * the size) of the resulting view.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByTableResponse filterByTable(FilterByTableRequest request) throws GPUdbException {
        FilterByTableResponse actualResponse_ = new FilterByTableResponse();
        submitRequest("/filter/bytable", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Filters objects in one table based on objects in another table. The user
     * must specify matching column types from the two tables (i.e. the target
     * table from which objects will be filtered and the source table based on
     * which the filter will be created); the column names need not be the
     * same. If a {@code viewName} is specified, then the filtered objects will
     * then be put in a newly created view. The operation is synchronous,
     * meaning that a response will not be returned until all objects are fully
     * available in the result view. The return value contains the count (i.e.
     * the size) of the resulting view.
     * 
     * @param tableName  Name of the table whose data will be filtered. Must be
     *                   an existing table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param columnName  Name of the column by whose value the data will be
     *                    filtered from the table designated by {@code
     *                    tableName}.
     * @param sourceTableName  Name of the table whose data will be compared
     *                         against in the table called {@code tableName}.
     *                         Must be an existing table.
     * @param sourceTableColumnName  Name of the column in the {@code
     *                               sourceTableName} whose values will be used
     *                               as the filter for table {@code tableName}.
     *                               Must be a geospatial geometry column if in
     *                               'spatial' mode; otherwise, Must match the
     *                               type of the {@code columnName}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#FILTER_MODE
     *                 FILTER_MODE}: String indicating the filter mode, either
     *                 {@code in_table} or {@code not_in_table}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#IN_TABLE
     *                 IN_TABLE}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NOT_IN_TABLE
     *                 NOT_IN_TABLE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#IN_TABLE
     *                 IN_TABLE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MODE
     *                 MODE}: Mode - should be either {@code spatial} or {@code
     *                 normal}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#SPATIAL
     *                 SPATIAL}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#BUFFER
     *                 BUFFER}: Buffer size, in meters. Only relevant for
     *                 {@code spatial} mode.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#BUFFER_METHOD
     *                 BUFFER_METHOD}: Method used to buffer polygons.  Only
     *                 relevant for {@code spatial} mode.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#GEOS
     *                 GEOS}: Use geos 1 edge per corner algorithm
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#NORMAL
     *                 NORMAL}.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MAX_PARTITION_SIZE
     *                 MAX_PARTITION_SIZE}: Maximum number of points in a
     *                 partition. Only relevant for {@code spatial} mode.  The
     *                 default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#MAX_PARTITION_SCORE
     *                 MAX_PARTITION_SCORE}: Maximum number of points * edges
     *                 in a partition. Only relevant for {@code spatial} mode.
     *                 The default value is '8000000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#X_COLUMN_NAME
     *                 X_COLUMN_NAME}: Name of column containing x value of
     *                 point being filtered in {@code spatial} mode.  The
     *                 default value is 'x'.
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByTableRequest.Options#Y_COLUMN_NAME
     *                 Y_COLUMN_NAME}: Name of column containing y value of
     *                 point being filtered in {@code spatial} mode.  The
     *                 default value is 'y'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByTableResponse filterByTable(String tableName, String viewName, String columnName, String sourceTableName, String sourceTableColumnName, Map<String, String> options) throws GPUdbException {
        FilterByTableRequest actualRequest_ = new FilterByTableRequest(tableName, viewName, columnName, sourceTableName, sourceTableColumnName, options);
        FilterByTableResponse actualResponse_ = new FilterByTableResponse();
        submitRequest("/filter/bytable", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table has a particular value for a
     * particular column. The input parameters provide a way to specify either
     * a String or a Double valued column and a desired value for the column on
     * which the filter is performed. The operation is synchronous, meaning
     * that a response will not be returned until all the objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new result view which satisfies the input filter restriction
     * specification is also created with a view name passed in as part of the
     * input payload.  Although this functionality can also be accomplished
     * with the standard filter function, it is more efficient.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByValueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByValueResponse filterByValue(FilterByValueRequest request) throws GPUdbException {
        FilterByValueResponse actualResponse_ = new FilterByValueResponse();
        submitRequest("/filter/byvalue", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Calculates which objects from a table has a particular value for a
     * particular column. The input parameters provide a way to specify either
     * a String or a Double valued column and a desired value for the column on
     * which the filter is performed. The operation is synchronous, meaning
     * that a response will not be returned until all the objects are fully
     * available. The response payload provides the count of the resulting set.
     * A new result view which satisfies the input filter restriction
     * specification is also created with a view name passed in as part of the
     * input payload.  Although this functionality can also be accomplished
     * with the standard filter function, it is more efficient.
     * 
     * @param tableName  Name of an existing table on which to perform the
     *                   calculation.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results. Has the same naming
     *                  restrictions as <a
     *                  href="../../../../concepts/tables.html"
     *                  target="_top">tables</a>.  The default value is ''.
     * @param isString  Indicates whether the value being searched for is
     *                  string or numeric.
     * @param value  The value to search for.  The default value is 0.
     * @param valueStr  The string value to search for.  The default value is
     *                  ''.
     * @param columnName  Name of a column on which the filter by value would
     *                    be applied.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.FilterByValueRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created view. If the collection
     *                 provided is non-existent, the collection will be
     *                 automatically created. If empty, then the newly created
     *                 view will be top-level.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  FilterByValueResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public FilterByValueResponse filterByValue(String tableName, String viewName, boolean isString, double value, String valueStr, String columnName, Map<String, String> options) throws GPUdbException {
        FilterByValueRequest actualRequest_ = new FilterByValueRequest(tableName, viewName, isString, value, valueStr, columnName, options);
        FilterByValueResponse actualResponse_ = new FilterByValueResponse();
        submitRequest("/filter/byvalue", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get the status and result of asynchronously running job.  See the {@link
     * GPUdb#createJob(CreateJobRequest)} for starting an asynchronous job.
     * Some fields of the response are filled only after the submitted job has
     * finished execution.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetJobResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetJobResponse getJob(GetJobRequest request) throws GPUdbException {
        GetJobResponse actualResponse_ = new GetJobResponse();
        submitRequest("/get/job", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Get the status and result of asynchronously running job.  See the {@link
     * GPUdb#createJob(String, String, ByteBuffer, String, Map)} for starting
     * an asynchronous job.  Some fields of the response are filled only after
     * the submitted job has finished execution.
     * 
     * @param jobId  A unique identifier for the job whose status and result is
     *               to be fetched.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetJobResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetJobResponse getJob(long jobId, Map<String, String> options) throws GPUdbException {
        GetJobRequest actualRequest_ = new GetJobRequest(jobId, options);
        GetJobResponse actualResponse_ = new GetJobResponse();
        submitRequest("/get/job", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary,
     * json or geojson.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsResponse getRecordsRaw(GetRecordsRequest request) throws GPUdbException {
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary,
     * json or geojson.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(Object typeDescriptor, GetRecordsRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary,
     * json or geojson.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the table from which the records will be
     *                   fetched. Must be a table, view or homogeneous
     *                   collection.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FAST_INDEX_LOOKUP
     *                 FAST_INDEX_LOOKUP}: Indicates if indexes should be used
     *                 to perform the lookup for a given expression if
     *                 possible. Only applicable if there is no sorting, the
     *                 expression contains only equivalence comparisons based
     *                 on existing tables indexes and the range of requested
     *                 values is from [0 to END_OF_SET].
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Empty by default (i.e. no sorting is applied).
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending. If
     *                 sort_order is provided, sort_by has to be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(Object typeDescriptor, String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsRequest actualRequest_ = new GetRecordsRequest(tableName, offset, limit, null, options);
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", actualRequest_, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary,
     * json or geojson.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(GetRecordsRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", request, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeName(), actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a given table, optionally filtered by an
     * expression and/or sorted by a column. This operation can be performed on
     * tables, views, or on homogeneous collections (collections containing
     * tables of all the same type). Records can be returned encoded as binary,
     * json or geojson.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters. Note that when paging through a table, if
     * the table (or the underlying table in case of a view) is updated
     * (records are inserted, deleted or modified) the records retrieved may
     * differ between calls based on the updates applied.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the table from which the records will be
     *                   fetched. Must be a table, view or homogeneous
     *                   collection.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned. Or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FAST_INDEX_LOOKUP
     *                 FAST_INDEX_LOOKUP}: Indicates if indexes should be used
     *                 to perform the lookup for a given expression if
     *                 possible. Only applicable if there is no sorting, the
     *                 expression contains only equivalence comparisons based
     *                 on existing tables indexes and the range of requested
     *                 values is from [0 to END_OF_SET].
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Empty by default (i.e. no sorting is applied).
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - ascending or descending. If
     *                 sort_order is provided, sort_by has to be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsResponse<TResponse> getRecords(String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsRequest actualRequest_ = new GetRecordsRequest(tableName, offset, limit, null, options);
        RawGetRecordsResponse actualResponse_ = new RawGetRecordsResponse();
        submitRequest("/get/records", actualRequest_, actualResponse_, false);
        GetRecordsResponse<TResponse> response_ = new GetRecordsResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeName(actualResponse_.getTypeName());
        response_.setTypeSchema(actualResponse_.getTypeSchema());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeName(), actualResponse_.getRecordsBinary()));
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * <a href="../../../../concepts/window.html" target="_top">Window
     * functions</a>, which can perform operations like moving averages, are
     * available through this endpoint as well as {@link
     * GPUdb#createProjection(CreateProjectionRequest)}.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * If {@code tableName} is empty, selection is performed against a
     * single-row virtual table.  This can be useful in executing temporal (<a
     * href="../../../../concepts/expressions.html#date-time-functions"
     * target="_top">NOW()</a>), identity (<a
     * href="../../../../concepts/expressions.html#user-security-functions"
     * target="_top">USER()</a>), or constant-based functions (<a
     * href="../../../../concepts/expressions.html#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsByColumnResponse getRecordsByColumnRaw(GetRecordsByColumnRequest request) throws GPUdbException {
        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * <a href="../../../../concepts/window.html" target="_top">Window
     * functions</a>, which can perform operations like moving averages, are
     * available through this endpoint as well as {@link
     * GPUdb#createProjection(CreateProjectionRequest)}.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * If {@code tableName} is empty, selection is performed against a
     * single-row virtual table.  This can be useful in executing temporal (<a
     * href="../../../../concepts/expressions.html#date-time-functions"
     * target="_top">NOW()</a>), identity (<a
     * href="../../../../concepts/expressions.html#user-security-functions"
     * target="_top">USER()</a>), or constant-based functions (<a
     * href="../../../../concepts/expressions.html#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetRecordsByColumnResponse getRecordsByColumn(GetRecordsByColumnRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", request, actualResponse_, false);
        GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * For a given table, retrieves the values from the requested column(s).
     * Maps of column name to the array of values as well as the column data
     * type are returned. This endpoint supports pagination with the {@code
     * offset} and {@code limit} parameters.
     * <p>
     * <a href="../../../../concepts/window.html" target="_top">Window
     * functions</a>, which can perform operations like moving averages, are
     * available through this endpoint as well as {@link
     * GPUdb#createProjection(String, String, List, Map)}.
     * <p>
     * When using pagination, if the table (or the underlying table in the case
     * of a view) is modified (records are inserted, updated, or deleted)
     * during a call to the endpoint, the records or values retrieved may
     * differ between calls based on the type of the update, e.g., the
     * contiguity across pages cannot be relied upon.
     * <p>
     * If {@code tableName} is empty, selection is performed against a
     * single-row virtual table.  This can be useful in executing temporal (<a
     * href="../../../../concepts/expressions.html#date-time-functions"
     * target="_top">NOW()</a>), identity (<a
     * href="../../../../concepts/expressions.html#user-security-functions"
     * target="_top">USER()</a>), or constant-based functions (<a
     * href="../../../../concepts/expressions.html#scalar-functions"
     * target="_top">GEODIST(-77.11, 38.88, -71.06, 42.36)</a>).
     * <p>
     * The response is returned as a dynamic schema. For details see: <a
     * href="../../../../api/index.html#dynamic-schemas" target="_top">dynamic
     * schemas documentation</a>.
     * 
     * @param tableName  Name of the table on which this operation will be
     *                   performed.  An empty table name retrieves one record
     *                   from a single-row virtual table, where columns
     *                   specified should be constants or constant expressions.
     *                   The table cannot be a parent set.
     * @param columnNames  The list of column values to retrieve.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code hasMoreRecords} to see
     *               if more records exist in the result to be fetched, and
     *               {@code offset} & {@code limit} to request subsequent pages
     *               of results.  The default value is -9999.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#EXPRESSION
     *                 EXPRESSION}: Optional filter expression to apply to the
     *                 table.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#SORT_BY
     *                 SORT_BY}: Optional column that the data should be sorted
     *                 by. Used in conjunction with {@code sort_order}. The
     *                 {@code order_by} option can be used in lieu of {@code
     *                 sort_by} / {@code sort_order}.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#SORT_ORDER
     *                 SORT_ORDER}: String indicating how the returned values
     *                 should be sorted - {@code ascending} or {@code
     *                 descending}. If {@code sort_order} is provided, {@code
     *                 sort_by} has to be provided.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ASCENDING
     *                 ASCENDING}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#DESCENDING
     *                 DESCENDING}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ASCENDING
     *                 ASCENDING}.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#ORDER_BY
     *                 ORDER_BY}: Comma-separated list of the columns to be
     *                 sorted by as well as the sort direction, e.g.,
     *                 'timestamp asc, x desc'.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#CONVERT_WKTS_TO_WKBS
     *                 CONVERT_WKTS_TO_WKBS}: If true, then WKT string columns
     *                 will be returned as WKB bytes.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsByColumnRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsByColumnResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GetRecordsByColumnResponse getRecordsByColumn(String tableName, List<String> columnNames, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsByColumnRequest actualRequest_ = new GetRecordsByColumnRequest(tableName, columnNames, offset, limit, null, options);
        RawGetRecordsByColumnResponse actualResponse_ = new RawGetRecordsByColumnResponse();
        submitRequest("/get/records/bycolumn", actualRequest_, actualResponse_, false);
        GetRecordsByColumnResponse response_ = new GetRecordsByColumnResponse();
        response_.setTableName(actualResponse_.getTableName());
        response_.setDataType( Type.fromDynamicSchema( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse() ) );
        response_.setData( DynamicTableRecord.transpose( actualResponse_.getResponseSchemaStr(), actualResponse_.getBinaryEncodedResponse(), response_.getDataType() ) );
        response_.setTotalNumberOfRecords(actualResponse_.getTotalNumberOfRecords());
        response_.setHasMoreRecords(actualResponse_.getHasMoreRecords());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecordsRaw(GetRecordsRequest)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsBySeriesResponse getRecordsBySeriesRaw(GetRecordsBySeriesRequest request) throws GPUdbException {
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(Object, GetRecordsRequest)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(Object typeDescriptor, GetRecordsBySeriesRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(typeDescriptor, actualResponse_.getListRecordsBinary()));
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(Object, String, long, long, Map)}
     * this returns records grouped by series/track. So if {@code offset} is 0
     * and {@code limit} is 5 this operation would return the first 5
     * series/tracks in {@code tableName}. Each series/track will be returned
     * sorted by their TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the collection/table/view for which
     *                   series/tracks will be fetched.
     * @param worldTableName  Name of the table containing the complete
     *                        series/track information to be returned for the
     *                        tracks present in the {@code tableName}.
     *                        Typically this is used when retrieving
     *                        series/tracks from a view (which contains partial
     *                        series/tracks) but the user wants to retrieve the
     *                        entire original series/tracks. Can be blank.
     * @param offset  A positive integer indicating the number of initial
     *                series/tracks to skip (useful for paging through the
     *                results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               series/tracks to be returned. Or END_OF_SET (-9999) to
     *               indicate that the max number of results should be
     *               returned.  The default value is 250.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(Object typeDescriptor, String tableName, String worldTableName, int offset, int limit, Map<String, String> options) throws GPUdbException {
        GetRecordsBySeriesRequest actualRequest_ = new GetRecordsBySeriesRequest(tableName, worldTableName, offset, limit, null, options);
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(typeDescriptor, actualResponse_.getListRecordsBinary()));
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(GetRecordsRequest)} this returns
     * records grouped by series/track. So if {@code offset} is 0 and {@code
     * limit} is 5 this operation would return the first 5 series/tracks in
     * {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(GetRecordsBySeriesRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", request, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(actualResponse_.getTypeNames(), actualResponse_.getListRecordsBinary()));
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves the complete series/track records from the given {@code
     * worldTableName} based on the partial track information contained in the
     * {@code tableName}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * In contrast to {@link GPUdb#getRecords(String, long, long, Map)} this
     * returns records grouped by series/track. So if {@code offset} is 0 and
     * {@code limit} is 5 this operation would return the first 5 series/tracks
     * in {@code tableName}. Each series/track will be returned sorted by their
     * TIMESTAMP column.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the collection/table/view for which
     *                   series/tracks will be fetched.
     * @param worldTableName  Name of the table containing the complete
     *                        series/track information to be returned for the
     *                        tracks present in the {@code tableName}.
     *                        Typically this is used when retrieving
     *                        series/tracks from a view (which contains partial
     *                        series/tracks) but the user wants to retrieve the
     *                        entire original series/tracks. Can be blank.
     * @param offset  A positive integer indicating the number of initial
     *                series/tracks to skip (useful for paging through the
     *                results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               series/tracks to be returned. Or END_OF_SET (-9999) to
     *               indicate that the max number of results should be
     *               returned.  The default value is 250.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsBySeriesResponse<TResponse> getRecordsBySeries(String tableName, String worldTableName, int offset, int limit, Map<String, String> options) throws GPUdbException {
        GetRecordsBySeriesRequest actualRequest_ = new GetRecordsBySeriesRequest(tableName, worldTableName, offset, limit, null, options);
        RawGetRecordsBySeriesResponse actualResponse_ = new RawGetRecordsBySeriesResponse();
        submitRequest("/get/records/byseries", actualRequest_, actualResponse_, false);
        GetRecordsBySeriesResponse<TResponse> response_ = new GetRecordsBySeriesResponse<>();
        response_.setTableNames(actualResponse_.getTableNames());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setTypeSchemas(actualResponse_.getTypeSchemas());
        response_.setData(this.<TResponse>decodeMultiple(actualResponse_.getTypeNames(), actualResponse_.getListRecordsBinary()));
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RawGetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RawGetRecordsFromCollectionResponse getRecordsFromCollectionRaw(GetRecordsFromCollectionRequest request) throws GPUdbException {
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(Object typeDescriptor, GetRecordsFromCollectionRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(String, List, Map)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param typeDescriptor  Type descriptor used for decoding returned
     *                        objects.
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved. Must be an existing collection or
     *                   table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code offset} & {@code limit}
     *               to request subsequent pages of results.  The default value
     *               is -9999.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If 'true' then return the internal
     *                 record ID along with each returned record. Default is
     *                 'false'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws IllegalArgumentException  if {@code typeDescriptor} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(Object typeDescriptor, String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsFromCollectionRequest actualRequest_ = new GetRecordsFromCollectionRequest(tableName, offset, limit, null, options);
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(typeDescriptor, actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(DeleteRecordsRequest)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(GetRecordsFromCollectionRequest request) throws GPUdbException {
        if ( !request.getEncoding().equals( "binary" ))
            throw new GPUdbException( "This method only supports binary encoding." );

        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", request, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeNames(), actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    /**
     * Retrieves records from a collection. The operation can optionally return
     * the record IDs which can be used in certain queries such as {@link
     * GPUdb#deleteRecords(String, List, Map)}.
     * <p>
     * This operation supports paging through the data via the {@code offset}
     * and {@code limit} parameters.
     * <p>
     * Note that when using the Java API, it is not possible to retrieve
     * records from join tables using this operation.
     * 
     * @param <TResponse>  The type of object being retrieved.
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved. Must be an existing collection or
     *                   table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results).  The default value is 0.The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the max number of results should be returned.  The
     *               number of records returned will never exceed the server's
     *               own limit, defined by the <a
     *               href="../../../../config/index.html#general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration.  Use {@code offset} & {@code limit}
     *               to request subsequent pages of results.  The default value
     *               is -9999.
     * @param options
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If 'true' then return the internal
     *                 record ID along with each returned record. Default is
     *                 'false'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.GetRecordsFromCollectionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GetRecordsFromCollectionResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TResponse> GetRecordsFromCollectionResponse<TResponse> getRecordsFromCollection(String tableName, long offset, long limit, Map<String, String> options) throws GPUdbException {
        GetRecordsFromCollectionRequest actualRequest_ = new GetRecordsFromCollectionRequest(tableName, offset, limit, null, options);
        RawGetRecordsFromCollectionResponse actualResponse_ = new RawGetRecordsFromCollectionResponse();
        submitRequest("/get/records/fromcollection", actualRequest_, actualResponse_, false);
        GetRecordsFromCollectionResponse<TResponse> response_ = new GetRecordsFromCollectionResponse<>();
        response_.setTableName(actualResponse_.getTableName());
        response_.setTypeNames(actualResponse_.getTypeNames());
        response_.setData(this.<TResponse>decode(actualResponse_.getTypeNames(), actualResponse_.getRecordsBinary()));
        response_.setRecordIds(actualResponse_.getRecordIds());
        response_.setInfo(actualResponse_.getInfo());
        return response_;
    }



    public GetVectortileResponse getVectortile(GetVectortileRequest request) throws GPUdbException {
        GetVectortileResponse actualResponse_ = new GetVectortileResponse();
        submitRequest("/get/vectortile", request, actualResponse_, false);
        return actualResponse_;
    }



    public GetVectortileResponse getVectortile(List<String> tableNames, List<String> columnNames, Map<String, List<String>> layers, int tileX, int tileY, int zoom, Map<String, String> options) throws GPUdbException {
        GetVectortileRequest actualRequest_ = new GetVectortileRequest(tableNames, columnNames, layers, tileX, tileY, zoom, options);
        GetVectortileResponse actualResponse_ = new GetVectortileResponse();
        submitRequest("/get/vectortile", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a proc-level permission to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionProcResponse grantPermissionProc(GrantPermissionProcRequest request) throws GPUdbException {
        GrantPermissionProcResponse actualResponse_ = new GrantPermissionProcResponse();
        submitRequest("/grant/permission/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a proc-level permission to a user or role.
     * 
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionProcRequest.Permission#PROC_EXECUTE
     *                    PROC_EXECUTE}: Execute access to the proc.
     *                    </ul>
     * @param procName  Name of the proc to which the permission grants access.
     *                  Must be an existing proc, or an empty string to grant
     *                  access to all procs.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionProcResponse grantPermissionProc(String name, String permission, String procName, Map<String, String> options) throws GPUdbException {
        GrantPermissionProcRequest actualRequest_ = new GrantPermissionProcRequest(name, permission, procName, options);
        GrantPermissionProcResponse actualResponse_ = new GrantPermissionProcResponse();
        submitRequest("/grant/permission/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a system-level permission to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionSystemResponse grantPermissionSystem(GrantPermissionSystemRequest request) throws GPUdbException {
        GrantPermissionSystemResponse actualResponse_ = new GrantPermissionSystemResponse();
        submitRequest("/grant/permission/system", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a system-level permission to a user or role.
     * 
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_USER_ADMIN
     *                    SYSTEM_USER_ADMIN}: Access to administer users and
     *                    roles that do not have system_admin permission.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionSystemRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                    </ul>
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionSystemResponse grantPermissionSystem(String name, String permission, Map<String, String> options) throws GPUdbException {
        GrantPermissionSystemRequest actualRequest_ = new GrantPermissionSystemRequest(name, permission, options);
        GrantPermissionSystemResponse actualResponse_ = new GrantPermissionSystemResponse();
        submitRequest("/grant/permission/system", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a table-level permission to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionTableResponse grantPermissionTable(GrantPermissionTableRequest request) throws GPUdbException {
        GrantPermissionTableResponse actualResponse_ = new GrantPermissionTableResponse();
        submitRequest("/grant/permission/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants a table-level permission to a user or role.
     * 
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.GrantPermissionTableRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                    </ul>
     * @param tableName  Name of the table to which the permission grants
     *                   access. Must be an existing table, collection, or
     *                   view. If a collection, the permission also applies to
     *                   tables and views in the collection.
     * @param filterExpression  Optional filter expression to apply to this
     *                          grant.  Only rows that match the filter will be
     *                          affected.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.GrantPermissionTableRequest.Options#COLUMNS
     *                 COLUMNS}: Apply security to these columns,
     *                 comma-separated.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantPermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantPermissionTableResponse grantPermissionTable(String name, String permission, String tableName, String filterExpression, Map<String, String> options) throws GPUdbException {
        GrantPermissionTableRequest actualRequest_ = new GrantPermissionTableRequest(name, permission, tableName, filterExpression, options);
        GrantPermissionTableResponse actualResponse_ = new GrantPermissionTableResponse();
        submitRequest("/grant/permission/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants membership in a role to a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantRoleResponse grantRole(GrantRoleRequest request) throws GPUdbException {
        GrantRoleResponse actualResponse_ = new GrantRoleResponse();
        submitRequest("/grant/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Grants membership in a role to a user or role.
     * 
     * @param role  Name of the role in which membership will be granted. Must
     *              be an existing role.
     * @param member  Name of the user or role that will be granted membership
     *                in {@code role}. Must be an existing user or role.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  GrantRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public GrantRoleResponse grantRole(String role, String member, Map<String, String> options) throws GPUdbException {
        GrantRoleRequest actualRequest_ = new GrantRoleRequest(role, member, options);
        GrantRoleResponse actualResponse_ = new GrantRoleResponse();
        submitRequest("/grant/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks the existence of a proc with the given name.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasProcResponse hasProc(HasProcRequest request) throws GPUdbException {
        HasProcResponse actualResponse_ = new HasProcResponse();
        submitRequest("/has/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks the existence of a proc with the given name.
     * 
     * @param procName  Name of the proc to check for existence.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasProcResponse hasProc(String procName, Map<String, String> options) throws GPUdbException {
        HasProcRequest actualRequest_ = new HasProcRequest(procName, options);
        HasProcResponse actualResponse_ = new HasProcResponse();
        submitRequest("/has/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks for the existence of a table with the given name.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTableResponse hasTable(HasTableRequest request) throws GPUdbException {
        HasTableResponse actualResponse_ = new HasTableResponse();
        submitRequest("/has/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Checks for the existence of a table with the given name.
     * 
     * @param tableName  Name of the table to check for existence.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTableResponse hasTable(String tableName, Map<String, String> options) throws GPUdbException {
        HasTableRequest actualRequest_ = new HasTableRequest(tableName, options);
        HasTableResponse actualResponse_ = new HasTableResponse();
        submitRequest("/has/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Check for the existence of a type.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTypeResponse hasType(HasTypeRequest request) throws GPUdbException {
        HasTypeResponse actualResponse_ = new HasTypeResponse();
        submitRequest("/has/type", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Check for the existence of a type.
     * 
     * @param typeId  Id of the type returned in response to {@link
     *                GPUdb#createType(String, String, Map, Map)} request.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  HasTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public HasTypeResponse hasType(String typeId, Map<String, String> options) throws GPUdbException {
        HasTypeRequest actualRequest_ = new HasTypeRequest(typeId, options);
        HasTypeResponse actualResponse_ = new HasTypeResponse();
        submitRequest("/has/type", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsResponse insertRecordsRaw(RawInsertRecordsRequest request) throws GPUdbException {
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", request, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * 
     * @param <TRequest>  The type of object being added.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(InsertRecordsRequest<TRequest> request) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(request.getTableName(), this.encode( request.getData() ), null, null, request.getOptions());
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(TypeObjectMap<TRequest> typeObjectMap, InsertRecordsRequest<TRequest> request) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(request.getTableName(), this.encode( typeObjectMap, request.getData() ), null, null, request.getOptions());
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * 
     * @param <TRequest>  The type of object being added.
     * @param tableName  Table to which the records are to be added. Must be an
     *                   existing table.
     * @param data  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@code json}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting into a table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing table record with primary key values that
     *                 match those of a record being inserted will be replaced
     *                 by that new record.  If set to {@code false}, any
     *                 existing table record with primary key values that match
     *                 those of a record being inserted will remain unchanged
     *                 and the new record discarded.  If the specified table
     *                 does not have a primary key, then this option is
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If {@code true} then return the
     *                 internal record id along for each inserted record.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUNCATE_STRINGS
     *                 TRUNCATE_STRINGS}: If set to {@code true}, any strings
     *                 which are too long for their target charN string columns
     *                 will be truncated to fit.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_INDIVIDUAL_ERRORS
     *                 RETURN_INDIVIDUAL_ERRORS}: If set to {@code true},
     *                 success will always be returned, and any errors found
     *                 will be included in the info map.  The
     *                 "bad_record_indices" entry is a comma-separated list of
     *                 bad records (0-based).  And if so, there will also be an
     *                 "error_N" entry for each record with an error, where N
     *                 is the index (0-based).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#ALLOW_PARTIAL_BATCH
     *                 ALLOW_PARTIAL_BATCH}: If set to {@code true}, all
     *                 correct records will be inserted and incorrect records
     *                 will be rejected and reported.  Otherwise, the entire
     *                 batch will be rejected if any records are incorrect.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#DRY_RUN
     *                 DRY_RUN}: If set to {@code true}, no data will be saved
     *                 and any errors will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(String tableName, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(tableName, this.encode( data ), null, null, options);
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Adds multiple records to the specified table. The operation is
     * synchronous, meaning that a response will not be returned until all the
     * records are fully inserted and available. The response payload provides
     * the counts of the number of records actually inserted and/or updated,
     * and can provide the unique identifier of each added record.
     * <p>
     * The {@code options} parameter can be used to customize this function's
     * behavior.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for inserting into a table with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, but is ignored if no primary key exists.
     * <p>
     * The {@code return_record_ids} option indicates that the database should
     * return the unique identifiers of inserted records.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param tableName  Table to which the records are to be added. Must be an
     *                   existing table.
     * @param data  An array of binary-encoded data for the records to be
     *              added. All records must be of the same type as that of the
     *              table. Empty array if {@code listEncoding} is {@code json}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for inserting into a table with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a>.  If set to {@code true},
     *                 any existing table record with primary key values that
     *                 match those of a record being inserted will be replaced
     *                 by that new record.  If set to {@code false}, any
     *                 existing table record with primary key values that match
     *                 those of a record being inserted will remain unchanged
     *                 and the new record discarded.  If the specified table
     *                 does not have a primary key, then this option is
     *                 ignored.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_RECORD_IDS
     *                 RETURN_RECORD_IDS}: If {@code true} then return the
     *                 internal record id along for each inserted record.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUNCATE_STRINGS
     *                 TRUNCATE_STRINGS}: If set to {@code true}, any strings
     *                 which are too long for their target charN string columns
     *                 will be truncated to fit.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#RETURN_INDIVIDUAL_ERRORS
     *                 RETURN_INDIVIDUAL_ERRORS}: If set to {@code true},
     *                 success will always be returned, and any errors found
     *                 will be included in the info map.  The
     *                 "bad_record_indices" entry is a comma-separated list of
     *                 bad records (0-based).  And if so, there will also be an
     *                 "error_N" entry for each record with an error, where N
     *                 is the index (0-based).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#ALLOW_PARTIAL_BATCH
     *                 ALLOW_PARTIAL_BATCH}: If set to {@code true}, all
     *                 correct records will be inserted and incorrect records
     *                 will be rejected and reported.  Otherwise, the entire
     *                 batch will be rejected if any records are incorrect.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#DRY_RUN
     *                 DRY_RUN}: If set to {@code true}, no data will be saved
     *                 and any errors will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawInsertRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> InsertRecordsResponse insertRecords(TypeObjectMap<TRequest> typeObjectMap, String tableName, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawInsertRecordsRequest actualRequest_ = new RawInsertRecordsRequest(tableName, this.encode( typeObjectMap, data ), null, null, options);
        InsertRecordsResponse actualResponse_ = new InsertRecordsResponse();
        submitRequest("/insert/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Reads from one or more files located on the server and inserts the data
     * into a new or existing table.
     * <p>
     * For CSV files, there are two loading schemes: positional and name-based.
     * The name-based loading scheme is enabled when the file has a header
     * present and {@code text_has_header} is set to {@code true}. In this
     * scheme, the source file(s) field names must match the target table's
     * column names exactly; however, the source file can have more fields than
     * the target table has columns. If {@code error_handling} is set to {@code
     * permissive}, the source file can have fewer fields than the target table
     * has columns. If the name-based loading scheme is being used, names
     * matching the file header's names may be provided to {@code
     * columns_to_load} instead of numbers, but ranges are not supported.

     * Returns once all files are processed.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsFromFilesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsFromFilesResponse insertRecordsFromFiles(InsertRecordsFromFilesRequest request) throws GPUdbException {
        InsertRecordsFromFilesResponse actualResponse_ = new InsertRecordsFromFilesResponse();
        submitRequest("/insert/records/fromfiles", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Reads from one or more files located on the server and inserts the data
     * into a new or existing table.
     * <p>
     * For CSV files, there are two loading schemes: positional and name-based.
     * The name-based loading scheme is enabled when the file has a header
     * present and {@code text_has_header} is set to {@code true}. In this
     * scheme, the source file(s) field names must match the target table's
     * column names exactly; however, the source file can have more fields than
     * the target table has columns. If {@code error_handling} is set to {@code
     * permissive}, the source file can have fewer fields than the target table
     * has columns. If the name-based loading scheme is being used, names
     * matching the file header's names may be provided to {@code
     * columns_to_load} instead of numbers, but ranges are not supported.

     * Returns once all files are processed.
     * 
     * @param tableName  Name of the table into which the data will be
     *                   inserted. If the table does not exist, the table will
     *                   be created using either an existing {@code type_id} or
     *                   the type inferred from the file.
     * @param filepaths  Absolute or relative filepath(s) from where files will
     *                   be loaded. Relative filepaths are relative to the
     *                   defined <a
     *                   href="../../../../config/index.html#external-files"
     *                   target="_top">external_files_directory</a> parameter
     *                   in the server configuration. The filepaths may include
     *                   wildcards (*). If the first path ends in .tsv, the
     *                   text delimiter will be defaulted to a tab character.
     *                   If the first path ends in .psv, the text delimiter
     *                   will be defaulted to a pipe character (|).
     * @param createTableOptions  Options used when creating a new table.
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TYPE_ID
     *                            TYPE_ID}: ID of a currently registered <a
     *                            href="../../../../concepts/types.html"
     *                            target="_top">type</a>.  The default value is
     *                            ''.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#NO_ERROR_IF_EXISTS
     *                            NO_ERROR_IF_EXISTS}: If {@code true},
     *                            prevents an error from occurring if the table
     *                            already exists and is of the given type.  If
     *                            a table with the same ID but a different type
     *                            exists, it is still an error.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}
     *                            </ul>
     *                            The default value is {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#COLLECTION_NAME
     *                            COLLECTION_NAME}: Name of a collection which
     *                            is to contain the newly created table. If the
     *                            collection provided is non-existent, the
     *                            collection will be automatically created. If
     *                            empty, then the newly created table will be a
     *                            top-level table.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#IS_REPLICATED
     *                            IS_REPLICATED}: For a table, affects the <a
     *                            href="../../../../concepts/tables.html#distribution"
     *                            target="_top">distribution scheme</a> for the
     *                            table's data.  If true and the given type has
     *                            no explicit <a
     *                            href="../../../../concepts/tables.html#shard-key"
     *                            target="_top">shard key</a> defined, the
     *                            table will be <a
     *                            href="../../../../concepts/tables.html#replication"
     *                            target="_top">replicated</a>.  If false, the
     *                            table will be <a
     *                            href="../../../../concepts/tables.html#sharding"
     *                            target="_top">sharded</a> according to the
     *                            shard key specified in the given {@code
     *                            type_id}, or <a
     *                            href="../../../../concepts/tables.html#random-sharding"
     *                            target="_top">randomly sharded</a>, if no
     *                            shard key is specified.  Note that a type
     *                            containing a shard key cannot be used to
     *                            create a replicated table.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}
     *                            </ul>
     *                            The default value is {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FOREIGN_KEYS
     *                            FOREIGN_KEYS}: Semicolon-separated list of <a
     *                            href="../../../../concepts/tables.html#foreign-keys"
     *                            target="_top">foreign keys</a>, of the format
     *                            '(source_column_name [, ...]) references
     *                            target_table_name(primary_key_column_name [,
     *                            ...]) [as foreign_key_name]'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FOREIGN_SHARD_KEY
     *                            FOREIGN_SHARD_KEY}: Foreign shard key of the
     *                            format 'source_column references
     *                            shard_by_column from
     *                            target_table(primary_key_column)'.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#PARTITION_TYPE
     *                            PARTITION_TYPE}: <a
     *                            href="../../../../concepts/tables.html#partitioning"
     *                            target="_top">Partitioning</a> scheme to use.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#RANGE
     *                            RANGE}: Use <a
     *                            href="../../../../concepts/tables.html#partitioning-by-range"
     *                            target="_top">range partitioning</a>.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#INTERVAL
     *                            INTERVAL}: Use <a
     *                            href="../../../../concepts/tables.html#partitioning-by-interval"
     *                            target="_top">interval partitioning</a>.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#LIST
     *                            LIST}: Use <a
     *                            href="../../../../concepts/tables.html#partitioning-by-list"
     *                            target="_top">list partitioning</a>.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#HASH
     *                            HASH}: Use <a
     *                            href="../../../../concepts/tables.html#partitioning-by-hash"
     *                            target="_top">hash partitioning</a>.
     *                            </ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#PARTITION_KEYS
     *                            PARTITION_KEYS}: Comma-separated list of
     *                            partition keys, which are the columns or
     *                            column expressions by which records will be
     *                            assigned to partitions defined by {@code
     *                            partition_definitions}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#PARTITION_DEFINITIONS
     *                            PARTITION_DEFINITIONS}: Comma-separated list
     *                            of partition definitions, whose format
     *                            depends on the choice of {@code
     *                            partition_type}.  See <a
     *                            href="../../../../concepts/tables.html#partitioning-by-range"
     *                            target="_top">range partitioning</a>, <a
     *                            href="../../../../concepts/tables.html#partitioning-by-interval"
     *                            target="_top">interval partitioning</a>, <a
     *                            href="../../../../concepts/tables.html#partitioning-by-list"
     *                            target="_top">list partitioning</a>, or <a
     *                            href="../../../../concepts/tables.html#partitioning-by-hash"
     *                            target="_top">hash partitioning</a> for
     *                            example formats.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#IS_AUTOMATIC_PARTITION
     *                            IS_AUTOMATIC_PARTITION}: If true, a new
     *                            partition will be created for values which
     *                            don't fall into an existing partition.
     *                            Currently only supported for <a
     *                            href="../../../../concepts/tables.html#partitioning-by-list"
     *                            target="_top">list partitions</a>.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}
     *                            </ul>
     *                            The default value is {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TTL
     *                            TTL}: For a table, sets the <a
     *                            href="../../../../concepts/ttl.html"
     *                            target="_top">TTL</a> of the table specified
     *                            in {@code tableName}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#CHUNK_SIZE
     *                            CHUNK_SIZE}: Indicates the number of records
     *                            per chunk to be used for this table.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#IS_RESULT_TABLE
     *                            IS_RESULT_TABLE}: For a table, indicates
     *                            whether the table is an in-memory table. A
     *                            result table cannot contain store_only,
     *                            text_search, or string columns (charN columns
     *                            are acceptable), and it will not be retained
     *                            if the server is restarted.
     *                            Supported values:
     *                            <ul>
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#TRUE
     *                            TRUE}
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}
     *                            </ul>
     *                            The default value is {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#FALSE
     *                            FALSE}.
     *                                    <li> {@link
     *                            com.gpudb.protocol.InsertRecordsFromFilesRequest.CreateTableOptions#STRATEGY_DEFINITION
     *                            STRATEGY_DEFINITION}: The <a
     *                            href="../../../../rm/concepts.html#tier-strategies"
     *                            target="_top">tier strategy</a> for the table
     *                            and its columns. See <a
     *                            href="../../../../rm/concepts.html#tier-strategies"
     *                            target="_top">tier strategy usage</a> for
     *                            format and <a
     *                            href="../../../../rm/usage.html#tier-strategies"
     *                            target="_top">tier strategy examples</a> for
     *                            examples.
     *                            </ul>
     *                            The default value is an empty {@link Map}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#BATCH_SIZE
     *                 BATCH_SIZE}: Specifies number of records to process
     *                 before inserting.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#COLUMN_FORMATS
     *                 COLUMN_FORMATS}: For each target column specified,
     *                 applies the column-property-bound format to the source
     *                 data loaded into that column.  Each column format will
     *                 contain a mapping of one or more of its column
     *                 properties to an appropriate format for each property.
     *                 Currently supported column properties include date,
     *                 time, & datetime. The parameter value must be formatted
     *                 as a JSON string of maps of column names to maps of
     *                 column properties to their corresponding column formats,
     *                 e.g., { "order_date" : { "date" : "%Y.%m.%d" },
     *                 "order_time" : { "time" : "%H:%M:%S" } }.  See {@code
     *                 default_column_formats} for valid format syntax.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#COLUMNS_TO_LOAD
     *                 COLUMNS_TO_LOAD}: For {@code delimited_text} {@code
     *                 file_type} only. Specifies a comma-delimited list of
     *                 column positions or names to load instead of loading all
     *                 columns in the file(s); if more than one file is being
     *                 loaded, the list of columns will apply to all files.
     *                 Column numbers can be specified discretely or as a
     *                 range, e.g., a value of '5,7,1..3' will create a table
     *                 with the first column in the table being the fifth
     *                 column in the file, followed by seventh column in the
     *                 file, then the first column through the fourth column in
     *                 the file.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DEFAULT_COLUMN_FORMATS
     *                 DEFAULT_COLUMN_FORMATS}: Specifies the default format to
     *                 be applied to source data loaded into columns with the
     *                 corresponding column property.  This default
     *                 column-property-bound format can be overridden by
     *                 specifying a column property & format for a given target
     *                 column in {@code column_formats}. For each specified
     *                 annotation, the format will apply to all columns with
     *                 that annotation unless a custom {@code column_formats}
     *                 for that annotation is specified. The parameter value
     *                 must be formatted as a JSON string that is a map of
     *                 column properties to their respective column formats,
     *                 e.g., { "date" : "%Y.%m.%d", "time" : "%H:%M:%S" }.
     *                 Column formats are specified as a string of control
     *                 characters and plain text. The supported control
     *                 characters are 'Y', 'm', 'd', 'H', 'M', 'S', and 's',
     *                 which follow the Linux 'strptime()' specification, as
     *                 well as 's', which specifies seconds and fractional
     *                 seconds (though the fractional component will be
     *                 truncated past milliseconds). Formats for the 'date'
     *                 annotation must include the 'Y', 'm', and 'd' control
     *                 characters. Formats for the 'time' annotation must
     *                 include the 'H', 'M', and either 'S' or 's' (but not
     *                 both) control characters. Formats for the 'datetime'
     *                 annotation meet both the 'date' and 'time' control
     *                 character requirements. For example, '{"datetime" :
     *                 "%m/%d/%Y %H:%M:%S" }' would be used to interpret text
     *                 as "05/04/2000 12:12:11"
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DRY_RUN
     *                 DRY_RUN}: If set to {@code true}, no data will be
     *                 inserted but the file will be read with the applied
     *                 {@code error_handling} mode and the number of valid
     *                 records that would be normally inserted are returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FALSE
     *                 FALSE}
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TRUE
     *                 TRUE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#ERROR_HANDLING
     *                 ERROR_HANDLING}: Specifies how errors should be handled
     *                 upon insertion.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#PERMISSIVE
     *                 PERMISSIVE}: Records with missing columns are populated
     *                 with nulls if possible; otherwise, the malformed records
     *                 are skipped.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#IGNORE_BAD_RECORDS
     *                 IGNORE_BAD_RECORDS}: Malformed records are skipped.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#ABORT
     *                 ABORT}: Stops current insertion and aborts entire
     *                 operation when an error is encountered.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#PERMISSIVE
     *                 PERMISSIVE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FILE_TYPE
     *                 FILE_TYPE}: File type for the file(s).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DELIMITED_TEXT
     *                 DELIMITED_TEXT}: Indicates the file(s) are in delimited
     *                 text format, e.g., CSV, TSV, PSV, etc.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DELIMITED_TEXT
     *                 DELIMITED_TEXT}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#LOADING_MODE
     *                 LOADING_MODE}: Specifies how to divide data loading
     *                 among nodes.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#HEAD
     *                 HEAD}: The head node loads all data. All files must be
     *                 available on the head node.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DISTRIBUTED_SHARED
     *                 DISTRIBUTED_SHARED}: The worker nodes coordinate loading
     *                 a set of files that are available to all of them. All
     *                 files must be available on all nodes. This option is
     *                 best when there is a shared file system.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#DISTRIBUTED_LOCAL
     *                 DISTRIBUTED_LOCAL}: Each worker node loads all files
     *                 that are available to it. This option is best when each
     *                 worker node has its own file system.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#HEAD
     *                 HEAD}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_COMMENT_STRING
     *                 TEXT_COMMENT_STRING}: For {@code delimited_text} {@code
     *                 file_type} only. All lines in the file(s) starting with
     *                 the provided string are ignored. The comment string has
     *                 no effect unless it appears at the beginning of a line.
     *                 The default value is '#'.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_DELIMITER
     *                 TEXT_DELIMITER}: For {@code delimited_text} {@code
     *                 file_type} only. Specifies the delimiter for values and
     *                 columns in the header row (if present). Must be a single
     *                 character.  The default value is ','.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_ESCAPE_CHARACTER
     *                 TEXT_ESCAPE_CHARACTER}: For {@code delimited_text}
     *                 {@code file_type} only.  The character used in the
     *                 file(s) to escape certain character sequences in text.
     *                 For example, the escape character followed by a literal
     *                 'n' escapes to a newline character within the field. Can
     *                 be used within quoted string to escape a quote
     *                 character. An empty value for this option does not
     *                 specify an escape character.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_HAS_HEADER
     *                 TEXT_HAS_HEADER}: For {@code delimited_text} {@code
     *                 file_type} only. Indicates whether the delimited text
     *                 files have a header row.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_HEADER_PROPERTY_DELIMITER
     *                 TEXT_HEADER_PROPERTY_DELIMITER}: For {@code
     *                 delimited_text} {@code file_type} only. Specifies the
     *                 delimiter for column properties in the header row (if
     *                 present). Cannot be set to same value as text_delimiter.
     *                 The default value is '|'.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_NULL_STRING
     *                 TEXT_NULL_STRING}: For {@code delimited_text} {@code
     *                 file_type} only. The value in the file(s) to treat as a
     *                 null value in the database.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TEXT_QUOTE_CHARACTER
     *                 TEXT_QUOTE_CHARACTER}: For {@code delimited_text} {@code
     *                 file_type} only. The quote character used in the
     *                 file(s), typically encompassing a field value. The
     *                 character must appear at beginning and end of field to
     *                 take effect. Delimiters within quoted fields are not
     *                 treated as delimiters. Within a quoted field, double
     *                 quotes (") can be used to escape a single literal quote
     *                 character. To not have a quote character, specify an
     *                 empty string ("").  The default value is '"'.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TRUNCATE_TABLE
     *                 TRUNCATE_TABLE}: If set to {@code true}, truncates the
     *                 table specified by {@code tableName} prior to loading
     *                 the file(s).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsFromFilesRequest.Options#NUM_TASKS_PER_RANK
     *                 NUM_TASKS_PER_RANK}: Optional: number of tasks for
     *                 reading file per rank. Default will be
     *                 external_file_reader_num_tasks
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsFromFilesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsFromFilesResponse insertRecordsFromFiles(String tableName, List<String> filepaths, Map<String, String> createTableOptions, Map<String, String> options) throws GPUdbException {
        InsertRecordsFromFilesRequest actualRequest_ = new InsertRecordsFromFilesRequest(tableName, filepaths, createTableOptions, options);
        InsertRecordsFromFilesResponse actualResponse_ = new InsertRecordsFromFilesResponse();
        submitRequest("/insert/records/fromfiles", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Generates a specified number of random records and adds them to the
     * given table. There is an optional parameter that allows the user to
     * customize the ranges of the column values. It also allows the user to
     * specify linear profiles for some or all columns in which case linear
     * values are generated rather than random ones. Only individual tables are
     * supported for this operation.
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all random records are fully available.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsRandomResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsRandomResponse insertRecordsRandom(InsertRecordsRandomRequest request) throws GPUdbException {
        InsertRecordsRandomResponse actualResponse_ = new InsertRecordsRandomResponse();
        submitRequest("/insert/records/random", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Generates a specified number of random records and adds them to the
     * given table. There is an optional parameter that allows the user to
     * customize the ranges of the column values. It also allows the user to
     * specify linear profiles for some or all columns in which case linear
     * values are generated rather than random ones. Only individual tables are
     * supported for this operation.
     * <p>
     * This operation is synchronous, meaning that a response will not be
     * returned until all random records are fully available.
     * 
     * @param tableName  Table to which random records will be added. Must be
     *                   an existing table.  Also, must be an individual table,
     *                   not a collection of tables, nor a view of a table.
     * @param count  Number of records to generate.
     * @param options  Optional parameter to pass in specifications for the
     *                 randomness of the values.  This map is different from
     *                 the *options* parameter of most other endpoints in that
     *                 it is a map of string to map of string to doubles, while
     *                 most others are maps of string to string.  In this map,
     *                 the top level keys represent which column's parameters
     *                 are being specified, while the internal keys represents
     *                 which parameter is being specified.  These parameters
     *                 take on different meanings depending on the type of the
     *                 column.  Below follows a more detailed description of
     *                 the map:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#SEED
     *                 SEED}: If provided, the internal random number generator
     *                 will be initialized with the given value.  The minimum
     *                 is 0.  This allows for the same set of random numbers to
     *                 be generated across invocation of this endpoint in case
     *                 the user wants to repeat the test.  Since {@code
     *                 options}, is a map of maps, we need an internal map to
     *                 provide the seed value.  For example, to pass 100 as the
     *                 seed value through this parameter, you need something
     *                 equivalent to: 'options' = {'seed': { 'value': 100 } }
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#VALUE
     *                 VALUE}: Pass the seed value here.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#ALL
     *                 ALL}: This key indicates that the specifications relayed
     *                 in the internal map are to be applied to all columns of
     *                 the records.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: For numerical columns, the minimum of the
     *                 generated values is set to this value.  Default is
     *                 -99999.  For point, shape, and track columns, min for
     *                 numeric 'x' and 'y' columns needs to be within [-180,
     *                 180] and [-90, 90], respectively. The default minimum
     *                 possible values for these columns in such cases are
     *                 -180.0 and -90.0. For the 'TIMESTAMP' column, the
     *                 default minimum corresponds to Jan 1, 2010.
     *                 For string columns, the minimum length of the randomly
     *                 generated strings is set to this value (default is 0).
     *                 If both minimum and maximum are provided, minimum must
     *                 be less than or equal to max. Value needs to be within
     *                 [0, 200].
     *                 If the min is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track,
     *                 then those parameters will not be set; however, an error
     *                 will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: For numerical columns, the maximum of the
     *                 generated values is set to this value. Default is 99999.
     *                 For point, shape, and track columns, max for numeric 'x'
     *                 and 'y' columns needs to be within [-180, 180] and [-90,
     *                 90], respectively. The default minimum possible values
     *                 for these columns in such cases are 180.0 and 90.0.
     *                 For string columns, the maximum length of the randomly
     *                 generated strings is set to this value (default is 200).
     *                 If both minimum and maximum are provided, *max* must be
     *                 greater than or equal to *min*. Value needs to be within
     *                 [0, 200].
     *                 If the *max* is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track,
     *                 then those parameters will not be set; however, an error
     *                 will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#INTERVAL
     *                 INTERVAL}: If specified, generate values for all columns
     *                 evenly spaced with the given interval value. If a max
     *                 value is specified for a given column the data is
     *                 randomly generated between min and max and decimated
     *                 down to the interval. If no max is provided the data is
     *                 linerally generated starting at the minimum value
     *                 (instead of generating random data). For non-decimated
     *                 string-type columns the interval value is ignored.
     *                 Instead the values are generated following the pattern:
     *                 'attrname_creationIndex#', i.e. the column name suffixed
     *                 with an underscore and a running counter (starting at
     *                 0). For string types with limited size (eg char4) the
     *                 prefix is dropped. No nulls will be generated for
     *                 nullable columns.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#NULL_PERCENTAGE
     *                 NULL_PERCENTAGE}: If specified, then generate the given
     *                 percentage of the count as nulls for all nullable
     *                 columns.  This option will be ignored for non-nullable
     *                 columns.  The value must be within the range [0, 1.0].
     *                 The default value is 5% (0.05).
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#CARDINALITY
     *                 CARDINALITY}: If specified, limit the randomly generated
     *                 values to a fixed set. Not allowed on a column with
     *                 interval specified, and is not applicable to WKT or
     *                 Track-specific columns. The value must be greater than
     *                 0. This option is disabled by default.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#ATTR_NAME
     *                 ATTR_NAME}: Use the desired column name in place of
     *                 {@code attr_name}, and set the following parameters for
     *                 the column specified. This overrides any parameter set
     *                 by {@code all}.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: For numerical columns, the minimum of the
     *                 generated values is set to this value.  Default is
     *                 -99999.  For point, shape, and track columns, min for
     *                 numeric 'x' and 'y' columns needs to be within [-180,
     *                 180] and [-90, 90], respectively. The default minimum
     *                 possible values for these columns in such cases are
     *                 -180.0 and -90.0. For the 'TIMESTAMP' column, the
     *                 default minimum corresponds to Jan 1, 2010.
     *                 For string columns, the minimum length of the randomly
     *                 generated strings is set to this value (default is 0).
     *                 If both minimum and maximum are provided, minimum must
     *                 be less than or equal to max. Value needs to be within
     *                 [0, 200].
     *                 If the min is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track,
     *                 then those parameters will not be set; however, an error
     *                 will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: For numerical columns, the maximum of the
     *                 generated values is set to this value. Default is 99999.
     *                 For point, shape, and track columns, max for numeric 'x'
     *                 and 'y' columns needs to be within [-180, 180] and [-90,
     *                 90], respectively. The default minimum possible values
     *                 for these columns in such cases are 180.0 and 90.0.
     *                 For string columns, the maximum length of the randomly
     *                 generated strings is set to this value (default is 200).
     *                 If both minimum and maximum are provided, *max* must be
     *                 greater than or equal to *min*. Value needs to be within
     *                 [0, 200].
     *                 If the *max* is outside the accepted ranges for strings
     *                 columns and 'x' and 'y' columns for point/shape/track,
     *                 then those parameters will not be set; however, an error
     *                 will not be thrown in such a case. It is the
     *                 responsibility of the user to use the {@code all}
     *                 parameter judiciously.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#INTERVAL
     *                 INTERVAL}: If specified, generate values for all columns
     *                 evenly spaced with the given interval value. If a max
     *                 value is specified for a given column the data is
     *                 randomly generated between min and max and decimated
     *                 down to the interval. If no max is provided the data is
     *                 linerally generated starting at the minimum value
     *                 (instead of generating random data). For non-decimated
     *                 string-type columns the interval value is ignored.
     *                 Instead the values are generated following the pattern:
     *                 'attrname_creationIndex#', i.e. the column name suffixed
     *                 with an underscore and a running counter (starting at
     *                 0). For string types with limited size (eg char4) the
     *                 prefix is dropped. No nulls will be generated for
     *                 nullable columns.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#NULL_PERCENTAGE
     *                 NULL_PERCENTAGE}: If specified and if this column is
     *                 nullable, then generate the given percentage of the
     *                 count as nulls.  This option will result in an error if
     *                 the column is not nullable.  The value must be within
     *                 the range [0, 1.0].  The default value is 5% (0.05).
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#CARDINALITY
     *                 CARDINALITY}: If specified, limit the randomly generated
     *                 values to a fixed set. Not allowed on a column with
     *                 interval specified, and is not applicable to WKT or
     *                 Track-specific columns. The value must be greater than
     *                 0. This option is disabled by default.
     *                 </ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#TRACK_LENGTH
     *                 TRACK_LENGTH}: This key-map pair is only valid for track
     *                 data sets (an error is thrown otherwise).  No nulls
     *                 would be generated for nullable columns.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MIN
     *                 MIN}: Minimum possible length for generated series;
     *                 default is 100 records per series. Must be an integral
     *                 value within the range [1, 500]. If both min and max are
     *                 specified, min must be less than or equal to max.
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertRecordsRandomRequest.Options#MAX
     *                 MAX}: Maximum possible length for generated series;
     *                 default is 500 records per series. Must be an integral
     *                 value within the range [1, 500]. If both min and max are
     *                 specified, max must be greater than or equal to min.
     *                 </ul>
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertRecordsRandomResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertRecordsRandomResponse insertRecordsRandom(String tableName, long count, Map<String, Map<String, Double>> options) throws GPUdbException {
        InsertRecordsRandomRequest actualRequest_ = new InsertRecordsRandomRequest(tableName, count, options);
        InsertRecordsRandomResponse actualResponse_ = new InsertRecordsRandomResponse();
        submitRequest("/insert/records/random", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds a symbol or icon (i.e. an image) to represent data points when data
     * is rendered visually. Users must provide the symbol identifier (string),
     * a format (currently supported: 'svg' and 'svg_path'), the data for the
     * symbol, and any additional optional parameter (e.g. color). To have a
     * symbol used for rendering create a table with a string column named
     * 'SYMBOLCODE' (along with 'x' or 'y' for example). Then when the table is
     * rendered (via <a href="../../../../api/rest/wms_rest.html"
     * target="_top">WMS</a>) if the 'dosymbology' parameter is 'true' then the
     * value of the 'SYMBOLCODE' column is used to pick the symbol displayed
     * for each point.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertSymbolResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertSymbolResponse insertSymbol(InsertSymbolRequest request) throws GPUdbException {
        InsertSymbolResponse actualResponse_ = new InsertSymbolResponse();
        submitRequest("/insert/symbol", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Adds a symbol or icon (i.e. an image) to represent data points when data
     * is rendered visually. Users must provide the symbol identifier (string),
     * a format (currently supported: 'svg' and 'svg_path'), the data for the
     * symbol, and any additional optional parameter (e.g. color). To have a
     * symbol used for rendering create a table with a string column named
     * 'SYMBOLCODE' (along with 'x' or 'y' for example). Then when the table is
     * rendered (via <a href="../../../../api/rest/wms_rest.html"
     * target="_top">WMS</a>) if the 'dosymbology' parameter is 'true' then the
     * value of the 'SYMBOLCODE' column is used to pick the symbol displayed
     * for each point.
     * 
     * @param symbolId  The id of the symbol being added. This is the same id
     *                  that should be in the 'SYMBOLCODE' column for objects
     *                  using this symbol
     * @param symbolFormat  Specifies the symbol format. Must be either 'svg'
     *                      or 'svg_path'.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.InsertSymbolRequest.SymbolFormat#SVG
     *                      SVG}
     *                              <li> {@link
     *                      com.gpudb.protocol.InsertSymbolRequest.SymbolFormat#SVG_PATH
     *                      SVG_PATH}
     *                      </ul>
     * @param symbolData  The actual symbol data. If {@code symbolFormat} is
     *                    'svg' then this should be the raw bytes representing
     *                    an svg file. If {@code symbolFormat} is svg path then
     *                    this should be an svg path string, for example:
     *                    'M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z'
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.InsertSymbolRequest.Options#COLOR
     *                 COLOR}: If {@code symbolFormat} is 'svg' this is
     *                 ignored. If {@code symbolFormat} is 'svg_path' then this
     *                 option specifies the color (in RRGGBB hex format) of the
     *                 path. For example, to have the path rendered in red,
     *                 used 'FF0000'. If 'color' is not provided then '00FF00'
     *                 (i.e. green) is used by default.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  InsertSymbolResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public InsertSymbolResponse insertSymbol(String symbolId, String symbolFormat, ByteBuffer symbolData, Map<String, String> options) throws GPUdbException {
        InsertSymbolRequest actualRequest_ = new InsertSymbolRequest(symbolId, symbolFormat, symbolData, options);
        InsertSymbolResponse actualResponse_ = new InsertSymbolResponse();
        submitRequest("/insert/symbol", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Kills a running proc instance.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  KillProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public KillProcResponse killProc(KillProcRequest request) throws GPUdbException {
        KillProcResponse actualResponse_ = new KillProcResponse();
        submitRequest("/kill/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Kills a running proc instance.
     * 
     * @param runId  The run ID of a running proc instance. If a proc with a
     *               matching run ID is not found or the proc instance has
     *               already completed, no procs will be killed. If not
     *               specified, all running proc instances will be killed.  The
     *               default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.KillProcRequest.Options#RUN_TAG
     *                 RUN_TAG}: If {@code runId} is specified, kill the proc
     *                 instance that has a matching run ID and a matching run
     *                 tag that was provided to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)}. If {@code runId} is not specified, kill the proc
     *                 instance(s) where a matching run tag was provided to
     *                 {@link GPUdb#executeProc(String, Map, Map, List, Map,
     *                 List, Map)}.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  KillProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public KillProcResponse killProc(String runId, Map<String, String> options) throws GPUdbException {
        KillProcRequest actualRequest_ = new KillProcRequest(runId, options);
        KillProcResponse actualResponse_ = new KillProcResponse();
        submitRequest("/kill/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public ListGraphResponse listGraph(ListGraphRequest request) throws GPUdbException {
        ListGraphResponse actualResponse_ = new ListGraphResponse();
        submitRequest("/list/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    public ListGraphResponse listGraph(String graphName, Map<String, String> options) throws GPUdbException {
        ListGraphRequest actualRequest_ = new ListGraphRequest(graphName, options);
        ListGraphResponse actualResponse_ = new ListGraphResponse();
        submitRequest("/list/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Manages global access to a table's data.  By default a table has a
     * {@code lockType} of {@code read_write}, indicating all operations are
     * permitted.  A user may request a {@code read_only} or a {@code
     * write_only} lock, after which only read or write operations,
     * respectively, are permitted on the table until the lock is removed.
     * When {@code lockType} is {@code no_access} then no operations are
     * permitted on the table.  The lock status can be queried by setting
     * {@code lockType} to {@code status}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  LockTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public LockTableResponse lockTable(LockTableRequest request) throws GPUdbException {
        LockTableResponse actualResponse_ = new LockTableResponse();
        submitRequest("/lock/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Manages global access to a table's data.  By default a table has a
     * {@code lockType} of {@code read_write}, indicating all operations are
     * permitted.  A user may request a {@code read_only} or a {@code
     * write_only} lock, after which only read or write operations,
     * respectively, are permitted on the table until the lock is removed.
     * When {@code lockType} is {@code no_access} then no operations are
     * permitted on the table.  The lock status can be queried by setting
     * {@code lockType} to {@code status}.
     * 
     * @param tableName  Name of the table to be locked. It must be a currently
     *                   existing table, collection, or view.
     * @param lockType  The type of lock being applied to the table. Setting it
     *                  to {@code status} will return the current lock status
     *                  of the table without changing it.
     *                  Supported values:
     *                  <ul>
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#STATUS
     *                  STATUS}: Show locked status
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#NO_ACCESS
     *                  NO_ACCESS}: Allow no read/write operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#READ_ONLY
     *                  READ_ONLY}: Allow only read operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#WRITE_ONLY
     *                  WRITE_ONLY}: Allow only write operations
     *                          <li> {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#READ_WRITE
     *                  READ_WRITE}: Allow all read/write operations
     *                  </ul>
     *                  The default value is {@link
     *                  com.gpudb.protocol.LockTableRequest.LockType#STATUS
     *                  STATUS}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  LockTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public LockTableResponse lockTable(String tableName, String lockType, Map<String, String> options) throws GPUdbException {
        LockTableRequest actualRequest_ = new LockTableRequest(tableName, lockType, options);
        LockTableResponse actualResponse_ = new LockTableResponse();
        submitRequest("/lock/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Matches a directed route implied by a given set of
     * latitude/longitude points to an existing underlying road network graph
     * using a
     * given solution type.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some
     * <a href="../../../../graph_solver/examples.html#match-graph"
     * target="_top">/match/graph examples</a>
     * before using this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MatchGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MatchGraphResponse matchGraph(MatchGraphRequest request) throws GPUdbException {
        MatchGraphResponse actualResponse_ = new MatchGraphResponse();
        submitRequest("/match/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Matches a directed route implied by a given set of
     * latitude/longitude points to an existing underlying road network graph
     * using a
     * given solution type.

     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some
     * <a href="../../../../graph_solver/examples.html#match-graph"
     * target="_top">/match/graph examples</a>
     * before using this endpoint.
     * 
     * @param graphName  Name of the underlying geospatial graph resource to
     *                   match to using {@code samplePoints}.
     * @param samplePoints  Sample points used to match to an underlying
     *                      geospatial
     *                      graph. Sample points must be specified using
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#match-identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#match-combinations"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with: existing column
     *                      names, e.g.,
     *                      'table.column AS SAMPLE_X'; expressions, e.g.,
     *                      'ST_MAKEPOINT(table.x, table.y) AS
     *                      SAMPLE_WKTPOINT'; or constant values, e.g.,
     *                      '{1, 2, 10} AS SAMPLE_TRIPID'.
     * @param solveMethod  The type of solver to use for graph matching.
     *                     Supported values:
     *                     <ul>
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}: Matches {@code samplePoints} to the
     *                     graph using the Hidden Markov Model (HMM)-based
     *                     method, which conducts a range-tree closest-edge
     *                     search to find the best combinations of possible
     *                     road segments ({@code num_segments}) for each sample
     *                     point to create the best route. The route is secured
     *                     one point at a time while looking ahead {@code
     *                     chain_width} number of points, so the prediction is
     *                     corrected after each point. This solution type is
     *                     the most accurate but also the most computationally
     *                     intensive. Related options: {@code num_segments} and
     *                     {@code chain_width}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_OD_PAIRS
     *                     MATCH_OD_PAIRS}: Matches {@code samplePoints} to
     *                     find the most probable path between origin and
     *                     destination pairs with cost constraints.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_SUPPLY_DEMAND
     *                     MATCH_SUPPLY_DEMAND}: Matches {@code samplePoints}
     *                     to optimize scheduling multiple supplies (trucks)
     *                     with varying sizes to varying demand sites with
     *                     varying capacities per depot. Related options:
     *                     {@code partial_loading} and {@code
     *                     max_combinations}.
     *                             <li> {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MATCH_BATCH_SOLVES
     *                     MATCH_BATCH_SOLVES}: Matches {@code samplePoints}
     *                     source and destination pairs for the shortest path
     *                     solves in batch mode.
     *                     </ul>
     *                     The default value is {@link
     *                     com.gpudb.protocol.MatchGraphRequest.SolveMethod#MARKOV_CHAIN
     *                     MARKOV_CHAIN}.
     * @param solutionTable  The name of the table used to store the results;
     *                       this table contains a <a
     *                       href="../../../../geospatial/geo_objects.html#geospatial-tracks"
     *                       target="_top">track</a> of geospatial points for
     *                       the matched portion of the graph, a track ID, and
     *                       a score value. Also outputs a details table
     *                       containing a trip ID (that matches the track ID),
     *                       the latitude/longitude pair, the timestamp the
     *                       point was recorded at, and an edge ID
     *                       corresponding to the matched road segment. Has the
     *                       same naming restrictions as <a
     *                       href="../../../../concepts/tables.html"
     *                       target="_top">tables</a>. Must not be an existing
     *                       table of the same name.  The default value is ''.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#GPS_NOISE
     *                 GPS_NOISE}: GPS noise value (in meters) to remove
     *                 redundant sample points. Use -1 to disable noise
     *                 reduction. The default value accounts for 95% of point
     *                 variation (+ or -5 meters).  The default value is '5.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#NUM_SEGMENTS
     *                 NUM_SEGMENTS}: Maximum number of potentially matching
     *                 road segments for each sample point. For the {@code
     *                 markov_chain} solver, the default is 3.  The default
     *                 value is '3'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SEARCH_RADIUS
     *                 SEARCH_RADIUS}: Maximum search radius used when snapping
     *                 sample points onto potentially matching surrounding
     *                 segments. The default value corresponds to approximately
     *                 100 meters.  The default value is '0.001'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#CHAIN_WIDTH
     *                 CHAIN_WIDTH}: For the {@code markov_chain} solver only.
     *                 Length of the sample points lookahead window within the
     *                 Markov kernel; the larger the number, the more accurate
     *                 the solution.  The default value is '9'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SOURCE
     *                 SOURCE}: Optional WKT starting point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the starting
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#DESTINATION
     *                 DESTINATION}: Optional WKT ending point from {@code
     *                 samplePoints} for the solver. The default behavior for
     *                 the endpoint is to use time to determine the destination
     *                 point.  The default value is 'POINT NULL'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#PARTIAL_LOADING
     *                 PARTIAL_LOADING}: For the {@code match_supply_demand}
     *                 solver only. When false (non-default), trucks do not
     *                 off-load at the demand (store) side if the remainder is
     *                 less than the store's need
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Partial off-loading at multiple store (demand) locations
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: No partial off-loading allowed if supply is less
     *                 than the store's demand.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_COMBINATIONS
     *                 MAX_COMBINATIONS}: For the {@code match_supply_demand}
     *                 solver only. This is the cutoff for the number of
     *                 generated combinations for sequencing the demand
     *                 locations - can increase this up to 2M.  The default
     *                 value is '10000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#LEFT_TURN_PENALTY
     *                 LEFT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'left turn' if the 'add_turn'
     *                 option parameter of the {@link GPUdb#createGraph(String,
     *                 boolean, List, List, List, List, Map)} was invoked at
     *                 graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#RIGHT_TURN_PENALTY
     *                 RIGHT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as' right turn' if the
     *                 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#INTERSECTION_PENALTY
     *                 INTERSECTION_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'intersection' if the
     *                 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#SHARP_TURN_PENALTY
     *                 SHARP_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'sharp turn' or 'u-turn' if
     *                 the 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#AGGREGATED_OUTPUT
     *                 AGGREGATED_OUTPUT}: For the {@code match_supply_demand}
     *                 solver only. When it is true (default), each record in
     *                 the output table shows a particular truck's scheduled
     *                 cumulative round trip path (MULTILINESTRING) and the
     *                 corresponding aggregated cost. Otherwise, each record
     *                 shows a single scheduled truck route (LINESTRING)
     *                 towards a particular demand location (store id) with its
     *                 corresponding cost.  The default value is 'true'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_TRIP_COST
     *                 MAX_TRIP_COST}: For the {@code match_supply_demand}
     *                 solver only. If this constraint is greater than zero
     *                 (default) then the trucks will skip travelling from one
     *                 demand location to another if the cost between them is
     *                 greater than this number (distance or time). Zero
     *                 (default) value means no check is performed.  The
     *                 default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FILTER_FOLDING_PATHS
     *                 FILTER_FOLDING_PATHS}: For the {@code markov_chain}
     *                 solver only. When true (non-default), the paths per
     *                 sequence combination is checked for folding over
     *                 patterns and can significantly increase the execution
     *                 time depending on the chain width and the number of gps
     *                 samples.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Filter out the folded paths.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Do not filter out the folded paths
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#UNIT_UNLOADING_COST
     *                 UNIT_UNLOADING_COST}: For the {@code
     *                 match_supply_demand} solver only. The unit cost per load
     *                 amount to be delivered. If this value is greater than
     *                 zero (default) then the additional cost of this unit
     *                 load multiplied by the total dropped load will be added
     *                 over to the trip cost to the demand location.  The
     *                 default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#MAX_NUM_THREADS
     *                 MAX_NUM_THREADS}: For the {@code markov_chain} solver
     *                 only. If specified (greater than zero), the maximum
     *                 number of threads will not be greater than the specified
     *                 value. It can be lower due to the memory and the number
     *                 cores available. Default value of zero allows the
     *                 algorithm to set the maximal number of threads within
     *                 these constraints.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUCK_SERVICE_LIMIT
     *                 TRUCK_SERVICE_LIMIT}: For the {@code
     *                 match_supply_demand} solver only. If specified (greather
     *                 than zero), any truck's total service cost (distance or
     *                 time) will be limited by the specified value including
     *                 multiple rounds (if set).  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#ENABLE_TRUCK_REUSE
     *                 ENABLE_TRUCK_REUSE}: For the {@code match_supply_demand}
     *                 solver only. If specified (true), all trucks can be
     *                 scheduled for second rounds from their originating
     *                 depots.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#TRUE TRUE}:
     *                 Allows reusing trucks for scheduling again.
     *                         <li> {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}: Trucks are scheduled only once from their
     *                 depots.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MatchGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MatchGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MatchGraphResponse matchGraph(String graphName, List<String> samplePoints, String solveMethod, String solutionTable, Map<String, String> options) throws GPUdbException {
        MatchGraphRequest actualRequest_ = new MatchGraphRequest(graphName, samplePoints, solveMethod, solutionTable, options);
        MatchGraphResponse actualResponse_ = new MatchGraphResponse();
        submitRequest("/match/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a new empty result table (specified by {@code tableName}), and
     * insert all records from source tables (specified by {@code
     * sourceTableNames}) based on the field mapping information (specified by
     * {@code fieldMaps}).
     * <p>
     * For merge records details and examples, see <a
     * href="../../../../concepts/merge_records.html" target="_top">Merge
     * Records</a>.  For limitations, see <a
     * href="../../../../concepts/merge_records.html#limitations-and-cautions"
     * target="_top">Merge Records Limitations and Cautions</a>.

     * The field map (specified by {@code fieldMaps}) holds the user-specified
     * maps of target table column names to source table columns. The array of
     * {@code fieldMaps} must match one-to-one with the {@code
     * sourceTableNames}, e.g., there's a map present in {@code fieldMaps} for
     * each table listed in {@code sourceTableNames}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MergeRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MergeRecordsResponse mergeRecords(MergeRecordsRequest request) throws GPUdbException {
        MergeRecordsResponse actualResponse_ = new MergeRecordsResponse();
        submitRequest("/merge/records", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Create a new empty result table (specified by {@code tableName}), and
     * insert all records from source tables (specified by {@code
     * sourceTableNames}) based on the field mapping information (specified by
     * {@code fieldMaps}).
     * <p>
     * For merge records details and examples, see <a
     * href="../../../../concepts/merge_records.html" target="_top">Merge
     * Records</a>.  For limitations, see <a
     * href="../../../../concepts/merge_records.html#limitations-and-cautions"
     * target="_top">Merge Records Limitations and Cautions</a>.

     * The field map (specified by {@code fieldMaps}) holds the user-specified
     * maps of target table column names to source table columns. The array of
     * {@code fieldMaps} must match one-to-one with the {@code
     * sourceTableNames}, e.g., there's a map present in {@code fieldMaps} for
     * each table listed in {@code sourceTableNames}.
     * 
     * @param tableName  The new result table name for the records to be
     *                   merged.  Must NOT be an existing table.
     * @param sourceTableNames  The list of source table names to get the
     *                          records from. Must be existing table names.
     * @param fieldMaps  Contains a list of source/target column mappings, one
     *                   mapping for each source table listed in {@code
     *                   sourceTableNames} being merged into the target table
     *                   specified by {@code tableName}.  Each mapping contains
     *                   the target column names (as keys) that the data in the
     *                   mapped source columns or column <a
     *                   href="../../../../concepts/expressions.html"
     *                   target="_top">expressions</a> (as values) will be
     *                   merged into.  All of the source columns being merged
     *                   into a given target column must match in type, as that
     *                   type will determine the type of the new target column.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#COLLECTION_NAME
     *                 COLLECTION_NAME}: Name of a collection which is to
     *                 contain the newly created merged table specified by
     *                 {@code tableName}. If the collection provided is
     *                 non-existent, the collection will be automatically
     *                 created. If empty, then the newly created merged table
     *                 will be a top-level table.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: Indicates the <a
     *                 href="../../../../concepts/tables.html#distribution"
     *                 target="_top">distribution scheme</a> for the data of
     *                 the merged table specified in {@code tableName}.  If
     *                 true, the table will be <a
     *                 href="../../../../concepts/tables.html#replication"
     *                 target="_top">replicated</a>.  If false, the table will
     *                 be <a
     *                 href="../../../../concepts/tables.html#random-sharding"
     *                 target="_top">randomly sharded</a>.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TTL TTL}:
     *                 Sets the <a href="../../../../concepts/ttl.html"
     *                 target="_top">TTL</a> of the merged table specified in
     *                 {@code tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#PERSIST
     *                 PERSIST}: If {@code true}, then the table specified in
     *                 {@code tableName} will be persisted and will not expire
     *                 unless a {@code ttl} is specified.   If {@code false},
     *                 then the table will be an in-memory table and will
     *                 expire unless a {@code ttl} is specified otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#CHUNK_SIZE
     *                 CHUNK_SIZE}: Indicates the number of records per chunk
     *                 to be used for the merged table specified in {@code
     *                 tableName}.
     *                         <li> {@link
     *                 com.gpudb.protocol.MergeRecordsRequest.Options#VIEW_ID
     *                 VIEW_ID}: view this result table is part of.  The
     *                 default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  MergeRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public MergeRecordsResponse mergeRecords(String tableName, List<String> sourceTableNames, List<Map<String, String>> fieldMaps, Map<String, String> options) throws GPUdbException {
        MergeRecordsRequest actualRequest_ = new MergeRecordsRequest(tableName, sourceTableNames, fieldMaps, options);
        MergeRecordsResponse actualResponse_ = new MergeRecordsResponse();
        submitRequest("/merge/records", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Update an existing graph network using given nodes, edges, weights,
     * restrictions, and options.

     * IMPORTANT: It's highly recommended that you review the <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>, and/or some <a
     * href="../../../../graph_solver/examples.html" target="_top">graph
     * examples</a> before using this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ModifyGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ModifyGraphResponse modifyGraph(ModifyGraphRequest request) throws GPUdbException {
        ModifyGraphResponse actualResponse_ = new ModifyGraphResponse();
        submitRequest("/modify/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Update an existing graph network using given nodes, edges, weights,
     * restrictions, and options.

     * IMPORTANT: It's highly recommended that you review the <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>, and/or some <a
     * href="../../../../graph_solver/examples.html" target="_top">graph
     * examples</a> before using this endpoint.
     * 
     * @param graphName  Name of the graph resource to modify.
     * @param nodes  Nodes with which to update existing {@code nodes} in graph
     *               specified by {@code graphName}. Review <a
     *               href="../../../../graph_solver/network_graph_solver.html#nodes"
     *               target="_top">Nodes</a> for more information. Nodes must
     *               be specified using <a
     *               href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *               target="_top">identifiers</a>; identifiers are grouped as
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *               target="_top">combinations</a>. Identifiers can be used
     *               with existing column names, e.g., 'table.column AS
     *               NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1,
     *               column2) AS NODE_WKTPOINT', or raw values, e.g., '{9, 10,
     *               11} AS NODE_ID'. If using raw values in an identifier
     *               combination, the number of values specified must match
     *               across the combination. Identifier combination(s) do not
     *               have to match the method used to create the graph, e.g.,
     *               if column names were specified to create the graph,
     *               expressions or raw values could also be used to modify the
     *               graph.
     * @param edges  Edges with which to update existing {@code edges} in graph
     *               specified by {@code graphName}. Review <a
     *               href="../../../../graph_solver/network_graph_solver.html#edges"
     *               target="_top">Edges</a> for more information. Edges must
     *               be specified using <a
     *               href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *               target="_top">identifiers</a>; identifiers are grouped as
     *               <a
     *               href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *               target="_top">combinations</a>. Identifiers can be used
     *               with existing column names, e.g., 'table.column AS
     *               EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS
     *               EDGE_NODE1_NAME', or raw values, e.g., "{'family',
     *               'coworker'} AS EDGE_LABEL". If using raw values in an
     *               identifier combination, the number of values specified
     *               must match across the combination. Identifier
     *               combination(s) do not have to match the method used to
     *               create the graph, e.g., if column names were specified to
     *               create the graph, expressions or raw values could also be
     *               used to modify the graph.
     * @param weights  Weights with which to update existing {@code weights} in
     *                 graph specified by {@code graphName}. Review <a
     *                 href="../../../../graph_solver/network_graph_solver.html#graph-weights"
     *                 target="_top">Weights</a> for more information. Weights
     *                 must be specified using <a
     *                 href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                 target="_top">identifiers</a>; identifiers are grouped
     *                 as <a
     *                 href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                 target="_top">combinations</a>. Identifiers can be used
     *                 with existing column names, e.g., 'table.column AS
     *                 WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS
     *                 WEIGHTS_VALUESPECIFIED', or raw values, e.g., '{4, 15}
     *                 AS WEIGHTS_VALUESPECIFIED'. If using raw values in an
     *                 identifier combination, the number of values specified
     *                 must match across the combination. Identifier
     *                 combination(s) do not have to match the method used to
     *                 create the graph, e.g., if column names were specified
     *                 to create the graph, expressions or raw values could
     *                 also be used to modify the graph.
     * @param restrictions  Restrictions with which to update existing {@code
     *                      restrictions} in graph specified by {@code
     *                      graphName}. Review <a
     *                      href="../../../../graph_solver/network_graph_solver.html#graph-restrictions"
     *                      target="_top">Restrictions</a> for more
     *                      information. Restrictions must be specified using
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                      target="_top">identifiers</a>; identifiers are
     *                      grouped as <a
     *                      href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                      target="_top">combinations</a>. Identifiers can be
     *                      used with existing column names, e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g., 'column/2 AS
     *                      RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
     *                      using raw values in an identifier combination, the
     *                      number of values specified must match across the
     *                      combination. Identifier combination(s) do not have
     *                      to match the method used to create the graph, e.g.,
     *                      if column names were specified to create the graph,
     *                      expressions or raw values could also be used to
     *                      modify the graph.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#RESTRICTION_THRESHOLD_VALUE
     *                 RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *                 comparison. Any node or edge with a
     *                 RESTRICTIONS_VALUECOMPARED value greater than the {@code
     *                 restriction_threshold_value} will not be included in the
     *                 graph.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#EXPORT_CREATE_RESULTS
     *                 EXPORT_CREATE_RESULTS}: If set to {@code true}, returns
     *                 the graph topology in the response as arrays.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#ENABLE_GRAPH_DRAW
     *                 ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a
     *                 'EDGE_WKTLINE' column identifier to the specified {@code
     *                 graph_table} so the graph can be viewed via WMS; for
     *                 social and non-geospatial graphs, the 'EDGE_WKTLINE'
     *                 column identifier will be populated with spatial
     *                 coordinates derived from a flattening layout algorithm
     *                 so the graph can still be viewed.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#SAVE_PERSIST
     *                 SAVE_PERSIST}: If set to {@code true}, the graph will be
     *                 saved in the persist directory (see the <a
     *                 href="../../../../config/index.html"
     *                 target="_top">config reference</a> for more
     *                 information). If set to {@code false}, the graph will be
     *                 removed when the graph server is shutdown.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#ADD_TABLE_MONITOR
     *                 ADD_TABLE_MONITOR}: Adds a table monitor to every table
     *                 used in the creation of the graph; this table monitor
     *                 will trigger the graph to update dynamically upon
     *                 inserts to the source table(s). Note that upon database
     *                 restart, if {@code save_persist} is also set to {@code
     *                 true}, the graph will be fully reconstructed and the
     *                 table monitors will be reattached. For more details on
     *                 table monitors, see {@link
     *                 GPUdb#createTableMonitor(String, Map)}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#GRAPH_TABLE
     *                 GRAPH_TABLE}: If specified, the created graph is also
     *                 created as a table with the given name and following
     *                 identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID',
     *                 'EDGE_NODE2_ID'. If left blank, no table is created.
     *                 The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#REMOVE_LABEL_ONLY
     *                 REMOVE_LABEL_ONLY}: When RESTRICTIONS on labeled
     *                 entities requested, if set to true this will NOT delete
     *                 the entity but only the label associated with the
     *                 entity. Otherwise (default), it'll delete the label AND
     *                 the entity.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#ADD_TURNS
     *                 ADD_TURNS}: Adds dummy 'pillowed' edges around
     *                 intersection nodes where there are more than three edges
     *                 so that additional weight penalties can be imposed by
     *                 the solve endpoints. (increases the total number of
     *                 edges).
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ModifyGraphRequest.Options#TURN_ANGLE
     *                 TURN_ANGLE}: Value in degrees modifies the thresholds
     *                 for attributing right, left, sharp turns, and
     *                 intersections. It is the vertical deviation angle from
     *                 the incoming edge to the intersection node. The larger
     *                 the value, the larger the threshold for sharp turns and
     *                 intersections; the smaller the value, the larger the
     *                 threshold for right and left turns; 0 < turn_angle < 90.
     *                 The default value is '60'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ModifyGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ModifyGraphResponse modifyGraph(String graphName, List<String> nodes, List<String> edges, List<String> weights, List<String> restrictions, Map<String, String> options) throws GPUdbException {
        ModifyGraphRequest actualRequest_ = new ModifyGraphRequest(graphName, nodes, edges, weights, restrictions, options);
        ModifyGraphResponse actualResponse_ = new ModifyGraphResponse();
        submitRequest("/modify/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Employs a topological query on a network graph generated a-priori by
     * {@link GPUdb#createGraph(CreateGraphRequest)} and returns a list of
     * adjacent edge(s) or node(s), also known as an adjacency list, depending
     * on what's been provided to the endpoint; providing edges will return
     * nodes and providing nodes will return edges.
     * <p>
     * To determine the node(s) or edge(s) adjacent to a value from a given
     * column, provide a list of values to {@code queries}. This field can be
     * populated with column values from any table as long as the type is
     * supported by the given identifier. See <a
     * href="../../../../graph_solver/network_graph_solver.html#query-identifiers"
     * target="_top">Query Identifiers</a> for more information.
     * <p>
     * To return the adjacency list in the response, leave {@code
     * adjacencyTable} empty. To return the adjacency list in a table and not
     * in the response, provide a value to {@code adjacencyTable} and set
     * {@code export_query_results} to {@code false}. To return the adjacency
     * list both in a table and the response, provide a value to {@code
     * adjacencyTable} and set {@code export_query_results} to {@code true}.
     * <p>
     * IMPORTANT: It's highly recommended that you review the <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>, and/or some <a
     * href="../../../../graph_solver/examples.html#query-graph"
     * target="_top">/query/graph examples</a> before using this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  QueryGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public QueryGraphResponse queryGraph(QueryGraphRequest request) throws GPUdbException {
        QueryGraphResponse actualResponse_ = new QueryGraphResponse();
        submitRequest("/query/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Employs a topological query on a network graph generated a-priori by
     * {@link GPUdb#createGraph(String, boolean, List, List, List, List, Map)}
     * and returns a list of adjacent edge(s) or node(s), also known as an
     * adjacency list, depending on what's been provided to the endpoint;
     * providing edges will return nodes and providing nodes will return edges.
     * <p>
     * To determine the node(s) or edge(s) adjacent to a value from a given
     * column, provide a list of values to {@code queries}. This field can be
     * populated with column values from any table as long as the type is
     * supported by the given identifier. See <a
     * href="../../../../graph_solver/network_graph_solver.html#query-identifiers"
     * target="_top">Query Identifiers</a> for more information.
     * <p>
     * To return the adjacency list in the response, leave {@code
     * adjacencyTable} empty. To return the adjacency list in a table and not
     * in the response, provide a value to {@code adjacencyTable} and set
     * {@code export_query_results} to {@code false}. To return the adjacency
     * list both in a table and the response, provide a value to {@code
     * adjacencyTable} and set {@code export_query_results} to {@code true}.
     * <p>
     * IMPORTANT: It's highly recommended that you review the <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>, and/or some <a
     * href="../../../../graph_solver/examples.html#query-graph"
     * target="_top">/query/graph examples</a> before using this endpoint.
     * 
     * @param graphName  Name of the graph resource to query.
     * @param queries  Nodes or edges to be queried specified using <a
     *                 href="../../../../graph_solver/network_graph_solver.html#query-identifiers"
     *                 target="_top">query identifiers</a>. Identifiers can be
     *                 used with existing column names, e.g., 'table.column AS
     *                 QUERY_NODE_ID', raw values, e.g., '{0, 2} AS
     *                 QUERY_NODE_ID', or expressions, e.g.,
     *                 'ST_MAKEPOINT(table.x, table.y) AS QUERY_NODE_WKTPOINT'.
     *                 Multiple values can be provided as long as the same
     *                 identifier is used for all values. If using raw values
     *                 in an identifier combination, the number of values
     *                 specified must match across the combination.
     * @param restrictions  Additional restrictions to apply to the nodes/edges
     *                      of an existing graph. Restrictions must be
     *                      specified using <a
     *                      href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                      target="_top">identifiers</a>; identifiers are
     *                      grouped as <a
     *                      href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                      target="_top">combinations</a>. Identifiers can be
     *                      used with existing column names, e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g., 'column/2 AS
     *                      RESTRICTIONS_VALUECOMPARED', or raw values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
     *                      using raw values in an identifier combination, the
     *                      number of values specified must match across the
     *                      combination.  The default value is an empty {@link
     *                      List}.
     * @param adjacencyTable  Name of the table to store the resulting
     *                        adjacencies. If left blank, the query results are
     *                        instead returned in the response even if {@code
     *                        export_query_results} is set to {@code false}. If
     *                        the 'QUERY_TARGET_NODE_LABEL' <a
     *                        href="../../../../graph_solver/network_graph_solver.html#query-identifiers"
     *                        target="_top">query identifier</a> is used in
     *                        {@code queries}, then two additional columns will
     *                        be available: 'PATH_ID' and 'RING_ID'. See
     *                                    <a
     *                        href="../../../../graph_solver/network_graph_solver.html#using-labels"
     *                        target="_top">Using Labels</a> for more
     *                        information.  The default value is ''.
     * @param rings  Sets the number of rings around the node to query for
     *               adjacency, with '1' being the edges directly attached to
     *               the queried node. Also known as number of hops. For
     *               example, if it is set to '2', the edge(s) directly
     *               attached to the queried node(s) will be returned; in
     *               addition, the edge(s) attached to the node(s) attached to
     *               the initial ring of edge(s) surrounding the queried
     *               node(s) will be returned. If the value is set to '0', any
     *               nodes that meet the criteria in {@code queries} and {@code
     *               restrictions} will be returned. This parameter is only
     *               applicable when querying nodes.  The default value is 1.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FORCE_UNDIRECTED
     *                 FORCE_UNDIRECTED}: If set to {@code true}, all inbound
     *                 edges and outbound edges relative to the node will be
     *                 returned. If set to {@code false}, only outbound edges
     *                 relative to the node will be returned. This parameter is
     *                 only applicable if the queried graph {@code graphName}
     *                 is directed and when querying nodes. Consult <a
     *                 href="../../../../graph_solver/network_graph_solver.html#directed-graphs"
     *                 target="_top">Directed Graphs</a> for more details.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#LIMIT
     *                 LIMIT}: When specified, limits the number of query
     *                 results. Note that if the {@code target_nodes_table} is
     *                 provided, the size of the corresponding table will be
     *                 limited by the {@code limit} value.  The default value
     *                 is an empty {@link Map}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TARGET_NODES_TABLE
     *                 TARGET_NODES_TABLE}: Name of the table to store the list
     *                 of the final nodes reached during the traversal. If this
     *                 value is left as the default, the table name will
     *                 default to the {@code adjacencyTable} value plus a
     *                 '_nodes' suffix, e.g., '<adjacency_table_name>_nodes'.
     *                 The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#RESTRICTION_THRESHOLD_VALUE
     *                 RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *                 comparison. Any node or edge with a
     *                 RESTRICTIONS_VALUECOMPARED value greater than the {@code
     *                 restriction_threshold_value} will not be included in the
     *                 solution.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#EXPORT_QUERY_RESULTS
     *                 EXPORT_QUERY_RESULTS}: Returns query results in the
     *                 response. If set to {@code true}, the {@code
     *                 adjacencyListIntArray} (if the query was based on IDs),
     *                 {@code adjacencyListStringArray} (if the query was based
     *                 on names), or {@code adjacencyListWktArray} (if the
     *                 query was based on WKTs) will be populated with the
     *                 results. If set to {@code false}, none of the arrays
     *                 will be populated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#ENABLE_GRAPH_DRAW
     *                 ENABLE_GRAPH_DRAW}: If set to {@code true}, adds a
     *                 WKT-type column named 'QUERY_EDGE_WKTLINE' to the given
     *                 {@code adjacencyTable} and inputs WKT values from the
     *                 source graph (if available) or auto-generated WKT values
     *                 (if there are no WKT values in the source graph). A
     *                 subsequent call to the <a
     *                 href="../../../../api/rest/wms_rest.html"
     *                 target="_top">/wms</a> endpoint can then be made to
     *                 display the query results on a map.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#AND_LABELS
     *                 AND_LABELS}: If set to {@code true}, the result of the
     *                 query has entities that satisfy all of the target
     *                 labels, instead of any.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.QueryGraphRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  QueryGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public QueryGraphResponse queryGraph(String graphName, List<String> queries, List<String> restrictions, String adjacencyTable, int rings, Map<String, String> options) throws GPUdbException {
        QueryGraphRequest actualRequest_ = new QueryGraphRequest(graphName, queries, restrictions, adjacencyTable, rings, options);
        QueryGraphResponse actualResponse_ = new QueryGraphResponse();
        submitRequest("/query/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a proc-level permission from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionProcResponse revokePermissionProc(RevokePermissionProcRequest request) throws GPUdbException {
        RevokePermissionProcResponse actualResponse_ = new RevokePermissionProcResponse();
        submitRequest("/revoke/permission/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a proc-level permission from a user or role.
     * 
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionProcRequest.Permission#PROC_EXECUTE
     *                    PROC_EXECUTE}: Execute access to the proc.
     *                    </ul>
     * @param procName  Name of the proc to which the permission grants access.
     *                  Must be an existing proc, or an empty string if the
     *                  permission grants access to all procs.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionProcResponse revokePermissionProc(String name, String permission, String procName, Map<String, String> options) throws GPUdbException {
        RevokePermissionProcRequest actualRequest_ = new RevokePermissionProcRequest(name, permission, procName, options);
        RevokePermissionProcResponse actualResponse_ = new RevokePermissionProcResponse();
        submitRequest("/revoke/permission/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a system-level permission from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionSystemResponse revokePermissionSystem(RevokePermissionSystemRequest request) throws GPUdbException {
        RevokePermissionSystemResponse actualResponse_ = new RevokePermissionSystemResponse();
        submitRequest("/revoke/permission/system", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a system-level permission from a user or role.
     * 
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_USER_ADMIN
     *                    SYSTEM_USER_ADMIN}: Access to administer users and
     *                    roles that do not have system_admin permission.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionSystemRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                    </ul>
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionSystemResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionSystemResponse revokePermissionSystem(String name, String permission, Map<String, String> options) throws GPUdbException {
        RevokePermissionSystemRequest actualRequest_ = new RevokePermissionSystemRequest(name, permission, options);
        RevokePermissionSystemResponse actualResponse_ = new RevokePermissionSystemResponse();
        submitRequest("/revoke/permission/system", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a table-level permission from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionTableResponse revokePermissionTable(RevokePermissionTableRequest request) throws GPUdbException {
        RevokePermissionTableResponse actualResponse_ = new RevokePermissionTableResponse();
        submitRequest("/revoke/permission/table", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes a table-level permission from a user or role.
     * 
     * @param name  Name of the user or role from which the permission will be
     *              revoked. Must be an existing user or role.
     * @param permission  Permission to revoke from the user or role.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.RevokePermissionTableRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                    </ul>
     * @param tableName  Name of the table to which the permission grants
     *                   access. Must be an existing table, collection, or
     *                   view.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RevokePermissionTableRequest.Options#COLUMNS
     *                 COLUMNS}: Apply security to these columns,
     *                 comma-separated.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokePermissionTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokePermissionTableResponse revokePermissionTable(String name, String permission, String tableName, Map<String, String> options) throws GPUdbException {
        RevokePermissionTableRequest actualRequest_ = new RevokePermissionTableRequest(name, permission, tableName, options);
        RevokePermissionTableResponse actualResponse_ = new RevokePermissionTableResponse();
        submitRequest("/revoke/permission/table", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes membership in a role from a user or role.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokeRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokeRoleResponse revokeRole(RevokeRoleRequest request) throws GPUdbException {
        RevokeRoleResponse actualResponse_ = new RevokeRoleResponse();
        submitRequest("/revoke/role", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Revokes membership in a role from a user or role.
     * 
     * @param role  Name of the role in which membership will be revoked. Must
     *              be an existing role.
     * @param member  Name of the user or role that will be revoked membership
     *                in {@code role}. Must be an existing user or role.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  RevokeRoleResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public RevokeRoleResponse revokeRole(String role, String member, Map<String, String> options) throws GPUdbException {
        RevokeRoleRequest actualRequest_ = new RevokeRoleRequest(role, member, options);
        RevokeRoleResponse actualResponse_ = new RevokeRoleResponse();
        submitRequest("/revoke/role", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public ShowFunctionsResponse showFunctions(ShowFunctionsRequest request) throws GPUdbException {
        ShowFunctionsResponse actualResponse_ = new ShowFunctionsResponse();
        submitRequest("/show/functions", request, actualResponse_, false);
        return actualResponse_;
    }



    public ShowFunctionsResponse showFunctions(Map<String, String> options) throws GPUdbException {
        ShowFunctionsRequest actualRequest_ = new ShowFunctionsRequest(options);
        ShowFunctionsResponse actualResponse_ = new ShowFunctionsResponse();
        submitRequest("/show/functions", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information and characteristics of graphs that exist on the graph
     * server.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowGraphResponse showGraph(ShowGraphRequest request) throws GPUdbException {
        ShowGraphResponse actualResponse_ = new ShowGraphResponse();
        submitRequest("/show/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information and characteristics of graphs that exist on the graph
     * server.
     * 
     * @param graphName  Name of the graph on which to retrieve information. If
     *                   left as the default value, information about all
     *                   graphs is returned.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowGraphRequest.Options#SHOW_ORIGINAL_REQUEST
     *                 SHOW_ORIGINAL_REQUEST}: If set to {@code true}, the
     *                 request that was originally used to create the graph is
     *                 also returned as JSON.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowGraphRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowGraphRequest.Options#TRUE TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowGraphResponse showGraph(String graphName, Map<String, String> options) throws GPUdbException {
        ShowGraphRequest actualRequest_ = new ShowGraphRequest(graphName, options);
        ShowGraphResponse actualResponse_ = new ShowGraphResponse();
        submitRequest("/show/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public ShowGraphGrammarResponse showGraphGrammar(ShowGraphGrammarRequest request) throws GPUdbException {
        ShowGraphGrammarResponse actualResponse_ = new ShowGraphGrammarResponse();
        submitRequest("/show/graph/grammar", request, actualResponse_, false);
        return actualResponse_;
    }



    public ShowGraphGrammarResponse showGraphGrammar(Map<String, String> options) throws GPUdbException {
        ShowGraphGrammarRequest actualRequest_ = new ShowGraphGrammarRequest(options);
        ShowGraphGrammarResponse actualResponse_ = new ShowGraphGrammarResponse();
        submitRequest("/show/graph/grammar", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about a proc.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcResponse showProc(ShowProcRequest request) throws GPUdbException {
        ShowProcResponse actualResponse_ = new ShowProcResponse();
        submitRequest("/show/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about a proc.
     * 
     * @param procName  Name of the proc to show information about. If
     *                  specified, must be the name of a currently existing
     *                  proc. If not specified, information about all procs
     *                  will be returned.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#INCLUDE_FILES
     *                 INCLUDE_FILES}: If set to {@code true}, the files that
     *                 make up the proc will be returned. If set to {@code
     *                 false}, the files will not be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowProcRequest.Options#FALSE FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcResponse showProc(String procName, Map<String, String> options) throws GPUdbException {
        ShowProcRequest actualRequest_ = new ShowProcRequest(procName, options);
        ShowProcResponse actualResponse_ = new ShowProcResponse();
        submitRequest("/show/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link
     * GPUdb#executeProc(ExecuteProcRequest)}) and data segment ID (each
     * invocation of the proc command on a data segment is assigned a data
     * segment ID).
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcStatusResponse showProcStatus(ShowProcStatusRequest request) throws GPUdbException {
        ShowProcStatusResponse actualResponse_ = new ShowProcStatusResponse();
        submitRequest("/show/proc/status", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows the statuses of running or completed proc instances. Results are
     * grouped by run ID (as returned from {@link GPUdb#executeProc(String,
     * Map, Map, List, Map, List, Map)}) and data segment ID (each invocation
     * of the proc command on a data segment is assigned a data segment ID).
     * 
     * @param runId  The run ID of a specific proc instance for which the
     *               status will be returned. If a proc with a matching run ID
     *               is not found, the response will be empty. If not
     *               specified, the statuses of all executed proc instances
     *               will be returned.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#CLEAR_COMPLETE
     *                 CLEAR_COMPLETE}: If set to {@code true}, if a proc
     *                 instance has completed (either successfully or
     *                 unsuccessfully) then its status will be cleared and no
     *                 longer returned in subsequent calls.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowProcStatusRequest.Options#RUN_TAG
     *                 RUN_TAG}: If {@code runId} is specified, return the
     *                 status for a proc instance that has a matching run ID
     *                 and a matching run tag that was provided to {@link
     *                 GPUdb#executeProc(String, Map, Map, List, Map, List,
     *                 Map)}. If {@code runId} is not specified, return
     *                 statuses for all proc instances where a matching run tag
     *                 was provided to {@link GPUdb#executeProc(String, Map,
     *                 Map, List, Map, List, Map)}.  The default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowProcStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowProcStatusResponse showProcStatus(String runId, Map<String, String> options) throws GPUdbException {
        ShowProcStatusRequest actualRequest_ = new ShowProcStatusRequest(runId, options);
        ShowProcStatusResponse actualResponse_ = new ShowProcStatusResponse();
        submitRequest("/show/proc/status", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests various statistics for storage/memory tiers and resource
     * groups.
     * Returns statistics on a per-rank basis.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowResourceStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowResourceStatisticsResponse showResourceStatistics(ShowResourceStatisticsRequest request) throws GPUdbException {
        ShowResourceStatisticsResponse actualResponse_ = new ShowResourceStatisticsResponse();
        submitRequest("/show/resource/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests various statistics for storage/memory tiers and resource
     * groups.
     * Returns statistics on a per-rank basis.
     * 
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowResourceStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowResourceStatisticsResponse showResourceStatistics(Map<String, String> options) throws GPUdbException {
        ShowResourceStatisticsRequest actualRequest_ = new ShowResourceStatisticsRequest(options);
        ShowResourceStatisticsResponse actualResponse_ = new ShowResourceStatisticsResponse();
        submitRequest("/show/resource/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests resource group properties.
     * Returns detailed information about the requested resource groups.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowResourceGroupsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowResourceGroupsResponse showResourceGroups(ShowResourceGroupsRequest request) throws GPUdbException {
        ShowResourceGroupsResponse actualResponse_ = new ShowResourceGroupsResponse();
        submitRequest("/show/resourcegroups", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Requests resource group properties.
     * Returns detailed information about the requested resource groups.
     * 
     * @param names  List of names of groups to be shown. A single entry with
     *               an empty string returns all groups.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#SHOW_DEFAULT_VALUES
     *                 SHOW_DEFAULT_VALUES}: If {@code true} include values of
     *                 fields that are based on the default resource group.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#SHOW_DEFAULT_GROUP
     *                 SHOW_DEFAULT_GROUP}: If {@code true} include the default
     *                 resource group in the response.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowResourceGroupsRequest.Options#TRUE
     *                 TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowResourceGroupsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowResourceGroupsResponse showResourceGroups(List<String> names, Map<String, String> options) throws GPUdbException {
        ShowResourceGroupsRequest actualRequest_ = new ShowResourceGroupsRequest(names, options);
        ShowResourceGroupsResponse actualResponse_ = new ShowResourceGroupsResponse();
        submitRequest("/show/resourcegroups", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows security information relating to users and/or roles. If the caller
     * is not a system administrator, only information relating to the caller
     * and their roles is returned.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSecurityResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSecurityResponse showSecurity(ShowSecurityRequest request) throws GPUdbException {
        ShowSecurityResponse actualResponse_ = new ShowSecurityResponse();
        submitRequest("/show/security", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows security information relating to users and/or roles. If the caller
     * is not a system administrator, only information relating to the caller
     * and their roles is returned.
     * 
     * @param names  A list of names of users and/or roles about which security
     *               information is requested. If none are provided,
     *               information about all users and roles will be returned.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSecurityResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSecurityResponse showSecurity(List<String> names, Map<String, String> options) throws GPUdbException {
        ShowSecurityRequest actualRequest_ = new ShowSecurityRequest(names, options);
        ShowSecurityResponse actualResponse_ = new ShowSecurityResponse();
        submitRequest("/show/security", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about SQL procedures, including the full definition of
     * each requested procedure.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSqlProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSqlProcResponse showSqlProc(ShowSqlProcRequest request) throws GPUdbException {
        ShowSqlProcResponse actualResponse_ = new ShowSqlProcResponse();
        submitRequest("/show/sql/proc", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Shows information about SQL procedures, including the full definition of
     * each requested procedure.
     * 
     * @param procedureName  Name of the procedure for which to retrieve the
     *                       information. If blank, then information about all
     *                       procedures is returned.  The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowSqlProcRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code true}, no error will
     *                 be returned if the requested procedure does not exist.
     *                 If {@code false}, an error will be returned if the
     *                 requested procedure does not exist.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowSqlProcRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowSqlProcRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowSqlProcRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSqlProcResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSqlProcResponse showSqlProc(String procedureName, Map<String, String> options) throws GPUdbException {
        ShowSqlProcRequest actualRequest_ = new ShowSqlProcRequest(procedureName, options);
        ShowSqlProcResponse actualResponse_ = new ShowSqlProcResponse();
        submitRequest("/show/sql/proc", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the collected column statistics for the specified table.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowStatisticsResponse showStatistics(ShowStatisticsRequest request) throws GPUdbException {
        ShowStatisticsResponse actualResponse_ = new ShowStatisticsResponse();
        submitRequest("/show/statistics", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the collected column statistics for the specified table.
     * 
     * @param tableNames  Tables whose metadata will be fetched. All provided
     *                    tables must exist, or an error is returned.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowStatisticsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowStatisticsResponse showStatistics(List<String> tableNames, Map<String, String> options) throws GPUdbException {
        ShowStatisticsRequest actualRequest_ = new ShowStatisticsRequest(tableNames, options);
        ShowStatisticsResponse actualResponse_ = new ShowStatisticsResponse();
        submitRequest("/show/statistics", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns server configuration and version related information to the
     * caller. The admin tool uses it to present server related information to
     * the user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemPropertiesResponse showSystemProperties(ShowSystemPropertiesRequest request) throws GPUdbException {
        ShowSystemPropertiesResponse actualResponse_ = new ShowSystemPropertiesResponse();
        submitRequest("/show/system/properties", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns server configuration and version related information to the
     * caller. The admin tool uses it to present server related information to
     * the user.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowSystemPropertiesRequest.Options#PROPERTIES
     *                 PROPERTIES}: A list of comma separated names of
     *                 properties requested. If not specified, all properties
     *                 will be returned.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemPropertiesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemPropertiesResponse showSystemProperties(Map<String, String> options) throws GPUdbException {
        ShowSystemPropertiesRequest actualRequest_ = new ShowSystemPropertiesRequest(options);
        ShowSystemPropertiesResponse actualResponse_ = new ShowSystemPropertiesResponse();
        submitRequest("/show/system/properties", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Provides server configuration and health related status to the caller.
     * The admin tool uses it to present server related information to the
     * user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemStatusResponse showSystemStatus(ShowSystemStatusRequest request) throws GPUdbException {
        ShowSystemStatusResponse actualResponse_ = new ShowSystemStatusResponse();
        submitRequest("/show/system/status", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Provides server configuration and health related status to the caller.
     * The admin tool uses it to present server related information to the
     * user.
     * 
     * @param options  Optional parameters, currently unused.  The default
     *                 value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemStatusResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemStatusResponse showSystemStatus(Map<String, String> options) throws GPUdbException {
        ShowSystemStatusRequest actualRequest_ = new ShowSystemStatusRequest(options);
        ShowSystemStatusResponse actualResponse_ = new ShowSystemStatusResponse();
        submitRequest("/show/system/status", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemTimingResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemTimingResponse showSystemTiming(ShowSystemTimingRequest request) throws GPUdbException {
        ShowSystemTimingResponse actualResponse_ = new ShowSystemTimingResponse();
        submitRequest("/show/system/timing", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Returns the last 100 database requests along with the request timing and
     * internal job id. The admin tool uses it to present request timing
     * information to the user.
     * 
     * @param options  Optional parameters, currently unused.  The default
     *                 value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowSystemTimingResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowSystemTimingResponse showSystemTiming(Map<String, String> options) throws GPUdbException {
        ShowSystemTimingRequest actualRequest_ = new ShowSystemTimingRequest(options);
        ShowSystemTimingResponse actualResponse_ = new ShowSystemTimingResponse();
        submitRequest("/show/system/timing", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves detailed information about a table, view, or collection,
     * specified in {@code tableName}. If the supplied {@code tableName} is a
     * collection, the call can return information about either the collection
     * itself or the tables and views it contains. If {@code tableName} is
     * empty, information about all collections and top-level tables and views
     * can be returned.
     * <p>
     * If the option {@code get_sizes} is set to
     * {@code true}, then the number of records
     * in each table is returned (in {@code sizes} and
     * {@code fullSizes}), along with the total number of objects across all
     * requested tables (in {@code totalSize} and {@code totalFullSize}).
     * <p>
     * For a collection, setting the {@code show_children} option to {@code
     * false} returns only information about the collection itself; setting
     * {@code show_children} to {@code true} returns a list of tables and views
     * contained in the collection, along with their corresponding detail.
     * <p>
     * To retrieve a list of every table, view, and collection in the database,
     * set {@code tableName} to '*' and {@code show_children} to {@code true}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableResponse showTable(ShowTableRequest request) throws GPUdbException {
        ShowTableResponse actualResponse_ = new ShowTableResponse();
        submitRequest("/show/table", request, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); ++i_) {
            if( actualResponse_.getTypeSchemas().get(i_).isEmpty() ) {
                // Skip generating a type if no schema is available
                continue;
            }
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getTypeLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves detailed information about a table, view, or collection,
     * specified in {@code tableName}. If the supplied {@code tableName} is a
     * collection, the call can return information about either the collection
     * itself or the tables and views it contains. If {@code tableName} is
     * empty, information about all collections and top-level tables and views
     * can be returned.
     * <p>
     * If the option {@code get_sizes} is set to
     * {@code true}, then the number of records
     * in each table is returned (in {@code sizes} and
     * {@code fullSizes}), along with the total number of objects across all
     * requested tables (in {@code totalSize} and {@code totalFullSize}).
     * <p>
     * For a collection, setting the {@code show_children} option to {@code
     * false} returns only information about the collection itself; setting
     * {@code show_children} to {@code true} returns a list of tables and views
     * contained in the collection, along with their corresponding detail.
     * <p>
     * To retrieve a list of every table, view, and collection in the database,
     * set {@code tableName} to '*' and {@code show_children} to {@code true}.
     * 
     * @param tableName  Name of the table for which to retrieve the
     *                   information. If blank, then information about all
     *                   collections and top-level tables and views is
     *                   returned.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FORCE_SYNCHRONOUS
     *                 FORCE_SYNCHRONOUS}: If {@code true} then the table sizes
     *                 will wait for read lock before returning.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#GET_SIZES
     *                 GET_SIZES}: If {@code true} then the number of records
     *                 in each table, along with a cumulative count, will be
     *                 returned; blank, otherwise.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#SHOW_CHILDREN
     *                 SHOW_CHILDREN}: If {@code tableName} is a collection,
     *                 then {@code true} will return information about the
     *                 children of the collection, and {@code false} will
     *                 return information about the collection itself. If
     *                 {@code tableName} is a table or view, {@code
     *                 show_children} must be {@code false}. If {@code
     *                 tableName} is empty, then {@code show_children} must be
     *                 {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an
     *                 error if the provided {@code tableName} does not exist.
     *                 If {@code true} then it will return an empty result.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#GET_COLUMN_INFO
     *                 GET_COLUMN_INFO}: If {@code true} then column info
     *                 (memory usage, etc) will be returned.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTableRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableResponse showTable(String tableName, Map<String, String> options) throws GPUdbException {
        ShowTableRequest actualRequest_ = new ShowTableRequest(tableName, options);
        ShowTableResponse actualResponse_ = new ShowTableResponse();
        submitRequest("/show/table", actualRequest_, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); ++i_) {
            if( actualResponse_.getTypeSchemas().get(i_).isEmpty() ) {
                // Skip generating a type if no schema is available
                continue;
            }
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getTypeLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves the user provided metadata for the specified tables.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableMetadataResponse showTableMetadata(ShowTableMetadataRequest request) throws GPUdbException {
        ShowTableMetadataResponse actualResponse_ = new ShowTableMetadataResponse();
        submitRequest("/show/table/metadata", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves the user provided metadata for the specified tables.
     * 
     * @param tableNames  Tables whose metadata will be fetched. All provided
     *                    tables must exist, or an error is returned.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTableMetadataResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTableMetadataResponse showTableMetadata(List<String> tableNames, Map<String, String> options) throws GPUdbException {
        ShowTableMetadataRequest actualRequest_ = new ShowTableMetadataRequest(tableNames, options);
        ShowTableMetadataResponse actualResponse_ = new ShowTableMetadataResponse();
        submitRequest("/show/table/metadata", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type comprises the schema and
     * properties of the table and sometimes a type label. This function allows
     * a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTablesByTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTablesByTypeResponse showTablesByType(ShowTablesByTypeRequest request) throws GPUdbException {
        ShowTablesByTypeResponse actualResponse_ = new ShowTablesByTypeResponse();
        submitRequest("/show/tables/bytype", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Gets names of the tables whose type matches the given criteria. Each
     * table has a particular type. This type comprises the schema and
     * properties of the table and sometimes a type label. This function allows
     * a look up of the existing tables based on full or partial type
     * information. The operation is synchronous.
     * 
     * @param typeId  Type id returned by a call to {@link
     *                GPUdb#createType(String, String, Map, Map)}.
     * @param label  Optional user supplied label which can be used instead of
     *               the type_id to retrieve all tables with the given label.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTablesByTypeResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTablesByTypeResponse showTablesByType(String typeId, String label, Map<String, String> options) throws GPUdbException {
        ShowTablesByTypeRequest actualRequest_ = new ShowTablesByTypeRequest(typeId, label, options);
        ShowTablesByTypeResponse actualResponse_ = new ShowTablesByTypeResponse();
        submitRequest("/show/tables/bytype", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information regarding the specified triggers or all existing
     * triggers currently active.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTriggersResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTriggersResponse showTriggers(ShowTriggersRequest request) throws GPUdbException {
        ShowTriggersResponse actualResponse_ = new ShowTriggersResponse();
        submitRequest("/show/triggers", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information regarding the specified triggers or all existing
     * triggers currently active.
     * 
     * @param triggerIds  List of IDs of the triggers whose information is to
     *                    be retrieved. An empty list means information will be
     *                    retrieved on all active triggers.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTriggersResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTriggersResponse showTriggers(List<String> triggerIds, Map<String, String> options) throws GPUdbException {
        ShowTriggersRequest actualRequest_ = new ShowTriggersRequest(triggerIds, options);
        ShowTriggersResponse actualResponse_ = new ShowTriggersResponse();
        submitRequest("/show/triggers", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Retrieves information for the specified data type ID or type label. For
     * all data types that match the input criteria, the database returns the
     * type ID, the type schema, the label (if available), and the type's
     * column properties.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTypesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTypesResponse showTypes(ShowTypesRequest request) throws GPUdbException {
        ShowTypesResponse actualResponse_ = new ShowTypesResponse();
        submitRequest("/show/types", request, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); ++i_) {
            if( actualResponse_.getTypeSchemas().get(i_).isEmpty() ) {
                // Skip generating a type if no schema is available
                continue;
            }
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Retrieves information for the specified data type ID or type label. For
     * all data types that match the input criteria, the database returns the
     * type ID, the type schema, the label (if available), and the type's
     * column properties.
     * 
     * @param typeId  Type Id returned in response to a call to {@link
     *                GPUdb#createType(String, String, Map, Map)}.
     * @param label  Option string that was supplied by user in a call to
     *               {@link GPUdb#createType(String, String, Map, Map)}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTypesRequest.Options#NO_JOIN_TYPES
     *                 NO_JOIN_TYPES}: When set to 'true', no join types will
     *                 be included.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTypesRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.ShowTypesRequest.Options#FALSE FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.ShowTypesRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  ShowTypesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public ShowTypesResponse showTypes(String typeId, String label, Map<String, String> options) throws GPUdbException {
        ShowTypesRequest actualRequest_ = new ShowTypesRequest(typeId, label, options);
        ShowTypesResponse actualResponse_ = new ShowTypesResponse();
        submitRequest("/show/types", actualRequest_, actualResponse_, false);

        for (int i_ = 0; i_ < actualResponse_.getTypeIds().size(); ++i_) {
            if( actualResponse_.getTypeSchemas().get(i_).isEmpty() ) {
                // Skip generating a type if no schema is available
                continue;
            }
            setTypeDescriptorIfMissing(actualResponse_.getTypeIds().get(i_), actualResponse_.getLabels().get(i_), actualResponse_.getTypeSchemas().get(i_), actualResponse_.getProperties().get(i_));
        }

        return actualResponse_;
    }



    /**
     * Solves an existing graph for a type of problem (e.g., shortest path,
     * page rank, travelling salesman, etc.) using source nodes, destination
     * nodes, and
     * additional, optional weights and restrictions.
     * <p>
     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some
     * <a href="../../../../graph_solver/examples.html#solve-graph"
     * target="_top">/solve/graph examples</a>
     * before using this endpoint.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  SolveGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public SolveGraphResponse solveGraph(SolveGraphRequest request) throws GPUdbException {
        SolveGraphResponse actualResponse_ = new SolveGraphResponse();
        submitRequest("/solve/graph", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Solves an existing graph for a type of problem (e.g., shortest path,
     * page rank, travelling salesman, etc.) using source nodes, destination
     * nodes, and
     * additional, optional weights and restrictions.
     * <p>
     * IMPORTANT: It's highly recommended that you review the
     * <a href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a>
     * concepts documentation, the
     * <a href="../../../../graph_solver/examples/graph_rest_guide.html"
     * target="_top">Graph REST Tutorial</a>,
     * and/or some
     * <a href="../../../../graph_solver/examples.html#solve-graph"
     * target="_top">/solve/graph examples</a>
     * before using this endpoint.
     * 
     * @param graphName  Name of the graph resource to solve.
     * @param weightsOnEdges  Additional weights to apply to the edges of an
     *                        existing
     *                        graph. Weights must be specified using
     *                        <a
     *                        href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                        target="_top">identifiers</a>;
     *                        identifiers are grouped as
     *                        <a
     *                        href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                        target="_top">combinations</a>.
     *                        Identifiers can be used with existing column
     *                        names, e.g.,
     *                        'table.column AS WEIGHTS_EDGE_ID', expressions,
     *                        e.g.,
     *                        'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or
     *                        constant values, e.g.,
     *                        '{4, 15, 2} AS WEIGHTS_VALUESPECIFIED'. Any
     *                        provided weights will be added
     *                        (in the case of 'WEIGHTS_VALUESPECIFIED') to or
     *                        multiplied with
     *                        (in the case of 'WEIGHTS_FACTORSPECIFIED') the
     *                        existing weight(s). If using
     *                        constant values in an identifier combination, the
     *                        number of values specified
     *                        must match across the combination.  The default
     *                        value is an empty {@link List}.
     * @param restrictions  Additional restrictions to apply to the nodes/edges
     *                      of an
     *                      existing graph. Restrictions must be specified
     *                      using
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                      target="_top">identifiers</a>;
     *                      identifiers are grouped as
     *                      <a
     *                      href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                      target="_top">combinations</a>.
     *                      Identifiers can be used with existing column names,
     *                      e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID',
     *                      expressions, e.g.,
     *                      'column/2 AS RESTRICTIONS_VALUECOMPARED', or
     *                      constant values, e.g.,
     *                      '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If
     *                      using constant values in an
     *                      identifier combination, the number of values
     *                      specified must match across the
     *                      combination. If {@code
     *                      remove_previous_restrictions} is set
     *                      to {@code true}, any
     *                      provided restrictions will replace the existing
     *                      restrictions. If
     *                      {@code remove_previous_restrictions} is set to
     *                      {@code false}, any provided
     *                      restrictions will be added (in the case of
     *                      'RESTRICTIONS_VALUECOMPARED') to or
     *                      replaced (in the case of
     *                      'RESTRICTIONS_ONOFFCOMPARED').  The default value
     *                      is an empty {@link List}.
     * @param solverType  The type of solver to use for the graph.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#SHORTEST_PATH
     *                    SHORTEST_PATH}: Solves for the optimal (shortest)
     *                    path based on weights and restrictions from one
     *                    source to destinations nodes. Also known as the
     *                    Dijkstra solver.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#PAGE_RANK
     *                    PAGE_RANK}: Solves for the probability of each
     *                    destination node being visited based on the links of
     *                    the graph topology. Weights are not required to use
     *                    this solver.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#PROBABILITY_RANK
     *                    PROBABILITY_RANK}: Solves for the transitional
     *                    probability (Hidden Markov) for each node based on
     *                    the weights (probability assigned over given edges).
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#CENTRALITY
     *                    CENTRALITY}: Solves for the degree of a node to
     *                    depict how many pairs of individuals that would have
     *                    to go through the node to reach one another in the
     *                    minimum number of hops. Also known as betweenness.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#MULTIPLE_ROUTING
     *                    MULTIPLE_ROUTING}: Solves for finding the minimum
     *                    cost cumulative path for a round-trip starting from
     *                    the given source and visiting each given destination
     *                    node once then returning to the source. Also known as
     *                    the travelling salesman problem.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#INVERSE_SHORTEST_PATH
     *                    INVERSE_SHORTEST_PATH}: Solves for finding the
     *                    optimal path cost for each destination node to route
     *                    to the source node. Also known as inverse Dijkstra or
     *                    the service man routing problem.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#BACKHAUL_ROUTING
     *                    BACKHAUL_ROUTING}: Solves for optimal routes that
     *                    connect remote asset nodes to the fixed (backbone)
     *                    asset nodes.
     *                            <li> {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#ALLPATHS
     *                    ALLPATHS}: Solves for paths that would give costs
     *                    between max and min solution radia - Make sure to
     *                    limit by the 'max_solution_targets' option. Min cost
     *                    shoudl be >= shortest_path cost.
     *                    </ul>
     *                    The default value is {@link
     *                    com.gpudb.protocol.SolveGraphRequest.SolverType#SHORTEST_PATH
     *                    SHORTEST_PATH}.
     * @param sourceNodes  It can be one of the nodal identifiers - e.g:
     *                     'NODE_WKTPOINT' for source nodes. For {@code
     *                     BACKHAUL_ROUTING}, this list depicts the fixed
     *                     assets.  The default value is an empty {@link List}.
     * @param destinationNodes  It can be one of the nodal identifiers - e.g:
     *                          'NODE_WKTPOINT' for destination (target) nodes.
     *                          For {@code BACKHAUL_ROUTING}, this list depicts
     *                          the remote assets.  The default value is an
     *                          empty {@link List}.
     * @param solutionTable  Name of the table to store the solution.  The
     *                       default value is 'graph_solutions'.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#MAX_SOLUTION_RADIUS
     *                 MAX_SOLUTION_RADIUS}: For {@code SHORTEST_PATH} and
     *                 {@code INVERSE_SHORTEST_PATH} solvers only. Sets the
     *                 maximum solution cost radius, which ignores the {@code
     *                 destinationNodes} list and instead outputs the nodes
     *                 within the radius sorted by ascending cost. If set to
     *                 '0.0', the setting is ignored.  The default value is
     *                 '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#MIN_SOLUTION_RADIUS
     *                 MIN_SOLUTION_RADIUS}: For {@code SHORTEST_PATH} and
     *                 {@code INVERSE_SHORTEST_PATH} solvers only. Applicable
     *                 only when {@code max_solution_radius} is set. Sets the
     *                 minimum solution cost radius, which ignores the {@code
     *                 destinationNodes} list and instead outputs the nodes
     *                 within the radius sorted by ascending cost. If set to
     *                 '0.0', the setting is ignored.  The default value is
     *                 '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#MAX_SOLUTION_TARGETS
     *                 MAX_SOLUTION_TARGETS}: For {@code SHORTEST_PATH} and
     *                 {@code INVERSE_SHORTEST_PATH} solvers only. Sets the
     *                 maximum number of solution targets, which ignores the
     *                 {@code destinationNodes} list and instead outputs no
     *                 more than n number of nodes sorted by ascending cost
     *                 where n is equal to the setting value. If set to 0, the
     *                 setting is ignored.  The default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#EXPORT_SOLVE_RESULTS
     *                 EXPORT_SOLVE_RESULTS}: Returns solution results inside
     *                 the {@code resultPerDestinationNode} array in the
     *                 response if set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#REMOVE_PREVIOUS_RESTRICTIONS
     *                 REMOVE_PREVIOUS_RESTRICTIONS}: Ignore the restrictions
     *                 applied to the graph during the creation stage and only
     *                 use the restrictions specified in this request if set to
     *                 {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#RESTRICTION_THRESHOLD_VALUE
     *                 RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *                 comparison. Any node or edge with a
     *                 RESTRICTIONS_VALUECOMPARED value greater than the {@code
     *                 restriction_threshold_value} will not be included in the
     *                 solution.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#UNIFORM_WEIGHTS
     *                 UNIFORM_WEIGHTS}: When specified, assigns the given
     *                 value to all the edges in the graph. Note that weights
     *                 provided in {@code weightsOnEdges} will override this
     *                 value.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#LEFT_TURN_PENALTY
     *                 LEFT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'left turn' if the 'add_turn'
     *                 option parameter of the {@link GPUdb#createGraph(String,
     *                 boolean, List, List, List, List, Map)} was invoked at
     *                 graph creation.  The default value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#RIGHT_TURN_PENALTY
     *                 RIGHT_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as' right turn' if the
     *                 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#INTERSECTION_PENALTY
     *                 INTERSECTION_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'intersection' if the
     *                 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#SHARP_TURN_PENALTY
     *                 SHARP_TURN_PENALTY}: This will add an additonal weight
     *                 over the edges labelled as 'sharp turn' or 'u-turn' if
     *                 the 'add_turn' option parameter of the {@link
     *                 GPUdb#createGraph(String, boolean, List, List, List,
     *                 List, Map)} was invoked at graph creation.  The default
     *                 value is '0.0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#NUM_BEST_PATHS
     *                 NUM_BEST_PATHS}: For {@code MULTIPLE_ROUTING} solvers
     *                 only; sets the number of shortest paths computed from
     *                 each node. This is the heuristic criterion. Default
     *                 value of zero allows the number to be computed
     *                 automatically by the solver. The user may want to
     *                 override this parameter to speed-up the solver.  The
     *                 default value is '0'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#MAX_NUM_COMBINATIONS
     *                 MAX_NUM_COMBINATIONS}: For {@code MULTIPLE_ROUTING}
     *                 solvers only; sets the cap on the combinatorial
     *                 sequences generated. If the default value of two
     *                 millions is overridden to a lesser value, it can
     *                 potentially speed up the solver.  The default value is
     *                 '2000000'.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#ACCURATE_SNAPS
     *                 ACCURATE_SNAPS}: Valid for single source destination
     *                 pair solves if points are described in NODE_WKTPOINT
     *                 identifier types: When true (default), it snaps to the
     *                 nearest node of the graph; otherwise, it searches for
     *                 the closest entity that could be an edge. For the latter
     *                 case (false), the solver modifies the resulting cost
     *                 with the weights proportional to the ratio of the snap
     *                 location within the edge. This may be an over-kill when
     *                 the performance is considered and the difference is well
     *                 less than 1 percent. In batch runs, since the
     *                 performance is of utmost importance, the option is
     *                 always considered 'false'.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#OUTPUT_EDGE_PATH
     *                 OUTPUT_EDGE_PATH}: If true then concatenated edge ids
     *                 will be added as the EDGE path column of the solution
     *                 table for each source and target pair in shortest path
     *                 solves.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#OUTPUT_WKT_PATH
     *                 OUTPUT_WKT_PATH}: If true then concatenated wkt line
     *                 segments will be added as the Wktroute column of the
     *                 solution table for each source and target pair in
     *                 shortest path solves.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.SolveGraphRequest.Options#TRUE TRUE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  SolveGraphResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public SolveGraphResponse solveGraph(String graphName, List<String> weightsOnEdges, List<String> restrictions, String solverType, List<String> sourceNodes, List<String> destinationNodes, String solutionTable, Map<String, String> options) throws GPUdbException {
        SolveGraphRequest actualRequest_ = new SolveGraphRequest(graphName, weightsOnEdges, restrictions, solverType, sourceNodes, destinationNodes, solutionTable, options);
        SolveGraphResponse actualResponse_ = new SolveGraphResponse();
        submitRequest("/solve/graph", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.Note that this operation can
     * only be run on an original table and not on a collection or a result
     * view.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for tables with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, and is ignored on tables with no primary
     * key.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsResponse updateRecordsRaw(RawUpdateRecordsRequest request) throws GPUdbException {
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", request, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.Note that this operation can
     * only be run on an original table and not on a collection or a result
     * view.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for tables with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, and is ignored on tables with no primary
     * key.
     * 
     * @param <TRequest>  The type of object being added.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(UpdateRecordsRequest<TRequest> request) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(request.getTableName(), request.getExpressions(), request.getNewValuesMaps(), this.encode( request.getData() ), null, null, request.getOptions());
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.Note that this operation can
     * only be run on an original table and not on a collection or a result
     * view.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for tables with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, and is ignored on tables with no primary
     * key.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(TypeObjectMap<TRequest> typeObjectMap, UpdateRecordsRequest<TRequest> request) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(request.getTableName(), request.getExpressions(), request.getNewValuesMaps(), this.encode( typeObjectMap, request.getData() ), null, null, request.getOptions());
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.Note that this operation can
     * only be run on an original table and not on a collection or a result
     * view.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for tables with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, and is ignored on tables with no primary
     * key.
     * 
     * @param <TRequest>  The type of object being added.
     * @param tableName  Table to be updated. Must be a currently existing
     *                   table and not a collection or view.
     * @param expressions  A list of the actual predicates, one for each
     *                     update; format should follow the guidelines {@link
     *                     GPUdb#filter(String, String, String, Map) here}.
     * @param newValuesMaps  List of new values for the matching records.  Each
     *                       element is a map with (key, value) pairs where the
     *                       keys are the names of the columns whose values are
     *                       to be updated; the values are the new values.  The
     *                       number of elements in the list should match the
     *                       length of {@code expressions}.
     * @param data  An *optional* list of new binary-avro encoded records to
     *              insert, one for each update.  If one of {@code expressions}
     *              does not yield a matching record to be updated, then the
     *              corresponding element from this list will be added to the
     *              table.  The default value is an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the predicates listed in
     *                 {@code expressions}.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#BYPASS_SAFETY_CHECKS
     *                 BYPASS_SAFETY_CHECKS}: When set to {@code true}, all
     *                 predicates are available for primary key updates.  Keep
     *                 in mind that it is possible to destroy data in this
     *                 case, since a single predicate may match multiple
     *                 objects (potentially all of records of a table), and
     *                 then updating all of those records to have the same
     *                 primary key will, due to the primary key uniqueness
     *                 constraints, effectively delete all but one of those
     *                 updated records.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for tables with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a> when updating columns of
     *                 the <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a> or inserting new records.
     *                 If {@code true}, existing records with primary key
     *                 values that match those of a record being updated or
     *                 inserted will be replaced by the updated and new
     *                 records.  If {@code false}, existing records with
     *                 matching primary key values will remain unchanged, and
     *                 the updated or new records with primary key values that
     *                 match those of existing records will be discarded.  If
     *                 the specified table does not have a primary key, then
     *                 this option has no effect.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}: Overwrite existing records when updated and
     *                 inserted records have the same primary keys
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}: Discard updated and inserted records when the
     *                 same primary keys already exist
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_PARTITION
     *                 UPDATE_PARTITION}: Force qualifying records to be
     *                 deleted and reinserted so their partition membership
     *                 will be reevaluated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUNCATE_STRINGS
     *                 TRUNCATE_STRINGS}: If set to {@code true}, any strings
     *                 which are too long for their charN string fields will be
     *                 truncated to fit.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#USE_EXPRESSIONS_IN_NEW_VALUES_MAPS
     *                 USE_EXPRESSIONS_IN_NEW_VALUES_MAPS}: When set to {@code
     *                 true}, all new values in {@code newValuesMaps} are
     *                 considered as expression values. When set to {@code
     *                 false}, all new values in {@code newValuesMaps} are
     *                 considered as constants.  NOTE:  When {@code true},
     *                 string constants will need to be quoted to avoid being
     *                 evaluated as expressions.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: ID of a single record to be updated
     *                 (returned in the call to {@link
     *                 GPUdb#insertRecords(String, List, Map)} or {@link
     *                 GPUdb#getRecordsFromCollection(Object, String, long,
     *                 long, Map)}).
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(String tableName, List<String> expressions, List<Map<String, String>> newValuesMaps, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(tableName, expressions, newValuesMaps, this.encode( data ), null, null, options);
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Runs multiple predicate-based updates in a single call.  With the list
     * of given expressions, any matching record's column values will be
     * updated as provided in {@code newValuesMaps}.  There is also an optional
     * 'upsert' capability where if a particular predicate doesn't match any
     * existing record, then a new record can be inserted.
     * <p>
     * Note that this operation can only be run on an original table and not on
     * a collection or a result view.
     * <p>
     * This operation can update primary key values.  By default only 'pure
     * primary key' predicates are allowed when updating primary key values. If
     * the primary key for a table is the column 'attr1', then the operation
     * will only accept predicates of the form: "attr1 == 'foo'" if the attr1
     * column is being updated.  For a composite primary key (e.g. columns
     * 'attr1' and 'attr2') then this operation will only accept predicates of
     * the form: "(attr1 == 'foo') and (attr2 == 'bar')".  Meaning, all primary
     * key columns must appear in an equality predicate in the expressions.
     * Furthermore each 'pure primary key' predicate must be unique within a
     * given request.  These restrictions can be removed by utilizing some
     * available options through {@code options}.Note that this operation can
     * only be run on an original table and not on a collection or a result
     * view.
     * <p>
     * The {@code update_on_existing_pk} option specifies the record collision
     * policy for tables with a <a
     * href="../../../../concepts/tables.html#primary-keys"
     * target="_top">primary key</a>, and is ignored on tables with no primary
     * key.
     * 
     * @param <TRequest>  The type of object being added.
     * @param typeObjectMap  Type object map used for encoding input objects.
     * @param tableName  Table to be updated. Must be a currently existing
     *                   table and not a collection or view.
     * @param expressions  A list of the actual predicates, one for each
     *                     update; format should follow the guidelines {@link
     *                     GPUdb#filter(String, String, String, Map) here}.
     * @param newValuesMaps  List of new values for the matching records.  Each
     *                       element is a map with (key, value) pairs where the
     *                       keys are the names of the columns whose values are
     *                       to be updated; the values are the new values.  The
     *                       number of elements in the list should match the
     *                       length of {@code expressions}.
     * @param data  An *optional* list of new binary-avro encoded records to
     *              insert, one for each update.  If one of {@code expressions}
     *              does not yield a matching record to be updated, then the
     *              corresponding element from this list will be added to the
     *              table.  The default value is an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#GLOBAL_EXPRESSION
     *                 GLOBAL_EXPRESSION}: An optional global expression to
     *                 reduce the search space of the predicates listed in
     *                 {@code expressions}.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#BYPASS_SAFETY_CHECKS
     *                 BYPASS_SAFETY_CHECKS}: When set to {@code true}, all
     *                 predicates are available for primary key updates.  Keep
     *                 in mind that it is possible to destroy data in this
     *                 case, since a single predicate may match multiple
     *                 objects (potentially all of records of a table), and
     *                 then updating all of those records to have the same
     *                 primary key will, due to the primary key uniqueness
     *                 constraints, effectively delete all but one of those
     *                 updated records.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_ON_EXISTING_PK
     *                 UPDATE_ON_EXISTING_PK}: Specifies the record collision
     *                 policy for tables with a <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a> when updating columns of
     *                 the <a
     *                 href="../../../../concepts/tables.html#primary-keys"
     *                 target="_top">primary key</a> or inserting new records.
     *                 If {@code true}, existing records with primary key
     *                 values that match those of a record being updated or
     *                 inserted will be replaced by the updated and new
     *                 records.  If {@code false}, existing records with
     *                 matching primary key values will remain unchanged, and
     *                 the updated or new records with primary key values that
     *                 match those of existing records will be discarded.  If
     *                 the specified table does not have a primary key, then
     *                 this option has no effect.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}: Overwrite existing records when updated and
     *                 inserted records have the same primary keys
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}: Discard updated and inserted records when the
     *                 same primary keys already exist
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#UPDATE_PARTITION
     *                 UPDATE_PARTITION}: Force qualifying records to be
     *                 deleted and reinserted so their partition membership
     *                 will be reevaluated.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUNCATE_STRINGS
     *                 TRUNCATE_STRINGS}: If set to {@code true}, any strings
     *                 which are too long for their charN string fields will be
     *                 truncated to fit.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#USE_EXPRESSIONS_IN_NEW_VALUES_MAPS
     *                 USE_EXPRESSIONS_IN_NEW_VALUES_MAPS}: When set to {@code
     *                 true}, all new values in {@code newValuesMaps} are
     *                 considered as expression values. When set to {@code
     *                 false}, all new values in {@code newValuesMaps} are
     *                 considered as constants.  NOTE:  When {@code true},
     *                 string constants will need to be quoted to avoid being
     *                 evaluated as expressions.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.RawUpdateRecordsRequest.Options#RECORD_ID
     *                 RECORD_ID}: ID of a single record to be updated
     *                 (returned in the call to {@link
     *                 GPUdb#insertRecords(TypeObjectMap, String, List, Map)}
     *                 or {@link GPUdb#getRecordsFromCollection(Object, String,
     *                 long, long, Map)}).
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsResponse
     * 
     * @throws IllegalArgumentException  if {@code typeObjectMap} is not an
     *                                   instance of one of the following:
     *                                   {@link Type}, {@link TypeObjectMap},
     *                                   {@link org.apache.avro.Schema}, or a
     *                                   {@link Class} that implements {@link
     *                                   org.apache.avro.generic.IndexedRecord}
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public <TRequest> UpdateRecordsResponse updateRecords(TypeObjectMap<TRequest> typeObjectMap, String tableName, List<String> expressions, List<Map<String, String>> newValuesMaps, List<TRequest> data, Map<String, String> options) throws GPUdbException {
        RawUpdateRecordsRequest actualRequest_ = new RawUpdateRecordsRequest(tableName, expressions, newValuesMaps, this.encode( typeObjectMap, data ), null, null, options);
        UpdateRecordsResponse actualResponse_ = new UpdateRecordsResponse();
        submitRequest("/update/records", actualRequest_, actualResponse_, true);
        return actualResponse_;
    }



    /**
     * Updates the view specified by {@code tableName} to include full series
     * (track) information from the {@code worldTableName} for the series
     * (tracks) present in the {@code viewName}.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsBySeriesResponse updateRecordsBySeries(UpdateRecordsBySeriesRequest request) throws GPUdbException {
        UpdateRecordsBySeriesResponse actualResponse_ = new UpdateRecordsBySeriesResponse();
        submitRequest("/update/records/byseries", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Updates the view specified by {@code tableName} to include full series
     * (track) information from the {@code worldTableName} for the series
     * (tracks) present in the {@code viewName}.
     * 
     * @param tableName  Name of the view on which the update operation will be
     *                   performed. Must be an existing view.
     * @param worldTableName  Name of the table containing the complete series
     *                        (track) information.
     * @param viewName  name of the view containing the series (tracks) which
     *                  have to be updated.  The default value is ''.
     * @param reserved  The default value is an empty {@link List}.
     * @param options  Optional parameters.  The default value is an empty
     *                 {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  UpdateRecordsBySeriesResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public UpdateRecordsBySeriesResponse updateRecordsBySeries(String tableName, String worldTableName, String viewName, List<String> reserved, Map<String, String> options) throws GPUdbException {
        UpdateRecordsBySeriesRequest actualRequest_ = new UpdateRecordsBySeriesRequest(tableName, worldTableName, viewName, reserved, options);
        UpdateRecordsBySeriesResponse actualResponse_ = new UpdateRecordsBySeriesResponse();
        submitRequest("/update/records/byseries", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageResponse visualizeImage(VisualizeImageRequest request) throws GPUdbException {
        VisualizeImageResponse actualResponse_ = new VisualizeImageResponse();
        submitRequest("/visualize/image", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageResponse visualizeImage(List<String> tableNames, List<String> worldTableNames, String xColumnName, String yColumnName, String symbolColumnName, String geometryColumnName, List<List<String>> trackIds, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageRequest actualRequest_ = new VisualizeImageRequest(tableNames, worldTableNames, xColumnName, yColumnName, symbolColumnName, geometryColumnName, trackIds, minX, maxX, minY, maxY, width, height, projection, bgColor, styleOptions, options);
        VisualizeImageResponse actualResponse_ = new VisualizeImageResponse();
        submitRequest("/visualize/image", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Scatter plot is the only plot type currently supported. A non-numeric
     * column can be specified as x or y column and jitters can be added to
     * them to avoid excessive overlapping. All color values must be in the
     * format RRGGBB or AARRGGBB (to specify the alpha value).
     * The image is contained in the {@code imageData} field.
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeImageChartResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeImageChartResponse visualizeImageChart(VisualizeImageChartRequest request) throws GPUdbException {
        VisualizeImageChartResponse actualResponse_ = new VisualizeImageChartResponse();
        submitRequest("/visualize/image/chart", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Scatter plot is the only plot type currently supported. A non-numeric
     * column can be specified as x or y column and jitters can be added to
     * them to avoid excessive overlapping. All color values must be in the
     * format RRGGBB or AARRGGBB (to specify the alpha value).
     * The image is contained in the {@code imageData} field.
     * 
     * @param tableName  Name of the table containing the data to be drawn as a
     *                   chart.
     * @param xColumnNames  Names of the columns containing the data mapped to
     *                      the x axis of a chart.
     * @param yColumnNames  Names of the columns containing the data mapped to
     *                      the y axis of a chart.
     * @param minX  Lower bound for the x column values. For non-numeric x
     *              column, each x column item is mapped to an integral value
     *              starting from 0.
     * @param maxX  Upper bound for the x column values. For non-numeric x
     *              column, each x column item is mapped to an integral value
     *              starting from 0.
     * @param minY  Lower bound for the y column values. For non-numeric y
     *              column, each y column item is mapped to an integral value
     *              starting from 0.
     * @param maxY  Upper bound for the y column values. For non-numeric y
     *              column, each y column item is mapped to an integral value
     *              starting from 0.
     * @param width  Width of the generated image in pixels.
     * @param height  Height of the generated image in pixels.
     * @param bgColor  Background color of the generated image.
     * @param styleOptions  Rendering style options for a chart.
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTCOLOR
     *                      POINTCOLOR}: The color of points in the plot
     *                      represented as a hexadecimal number.  The default
     *                      value is '0000FF'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTSIZE
     *                      POINTSIZE}: The size of points in the plot
     *                      represented as number of pixels.  The default value
     *                      is '3'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#POINTSHAPE
     *                      POINTSHAPE}: The shape of points in the plot.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CIRCLE
     *                      CIRCLE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SQUARE
     *                      SQUARE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#DIAMOND
     *                      DIAMOND}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWCIRCLE
     *                      HOLLOWCIRCLE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWSQUARE
     *                      HOLLOWSQUARE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#HOLLOWDIAMOND
     *                      HOLLOWDIAMOND}
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SQUARE
     *                      SQUARE}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTCOLORS
     *                      CB_POINTCOLORS}: Point color class break
     *                      information consisting of three entries:
     *                      class-break attribute, class-break values/ranges,
     *                      and point color values. This option overrides the
     *                      pointcolor option if both are provided. Class-break
     *                      ranges are represented in the form of "min:max".
     *                      Class-break values/ranges and point color values
     *                      are separated by cb_delimiter, e.g. {"price",
     *                      "20:30;30:40;40:50", "0xFF0000;0x00FF00;0x0000FF"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTSIZES
     *                      CB_POINTSIZES}: Point size class break information
     *                      consisting of three entries: class-break attribute,
     *                      class-break values/ranges, and point size values.
     *                      This option overrides the pointsize option if both
     *                      are provided. Class-break ranges are represented in
     *                      the form of "min:max". Class-break values/ranges
     *                      and point size values are separated by
     *                      cb_delimiter, e.g. {"states", "NY;TX;CA", "3;5;7"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_POINTSHAPES
     *                      CB_POINTSHAPES}: Point shape class break
     *                      information consisting of three entries:
     *                      class-break attribute, class-break values/ranges,
     *                      and point shape names. This option overrides the
     *                      pointshape option if both are provided. Class-break
     *                      ranges are represented in the form of "min:max".
     *                      Class-break values/ranges and point shape names are
     *                      separated by cb_delimiter, e.g. {"states",
     *                      "NY;TX;CA", "circle;square;diamond"}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#CB_DELIMITER
     *                      CB_DELIMITER}: A character or string which
     *                      separates per-class values in a class-break style
     *                      option string.  The default value is ';'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#X_ORDER_BY
     *                      X_ORDER_BY}: An expression or aggregate expression
     *                      by which non-numeric x column values are sorted,
     *                      e.g. "avg(price) descending".
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#Y_ORDER_BY
     *                      Y_ORDER_BY}: An expression or aggregate expression
     *                      by which non-numeric y column values are sorted,
     *                      e.g. "avg(price)", which defaults to "avg(price)
     *                      ascending".
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SCALE_TYPE_X
     *                      SCALE_TYPE_X}: Type of x axis scale.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}: No scale is applied to the x axis.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#LOG
     *                      LOG}: A base-10 log scale is applied to the x axis.
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#SCALE_TYPE_Y
     *                      SCALE_TYPE_Y}: Type of y axis scale.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}: No scale is applied to the y axis.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#LOG
     *                      LOG}: A base-10 log scale is applied to the y axis.
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#NONE
     *                      NONE}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#MIN_MAX_SCALED
     *                      MIN_MAX_SCALED}: If this options is set to "false",
     *                      this endpoint expects request's min/max values are
     *                      not yet scaled. They will be scaled according to
     *                      scale_type_x or scale_type_y for response. If this
     *                      options is set to "true", this endpoint expects
     *                      request's min/max values are already scaled
     *                      according to scale_type_x/scale_type_y. Response's
     *                      min/max values will be equal to request's min/max
     *                      values.  The default value is 'false'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#JITTER_X
     *                      JITTER_X}: Amplitude of horizontal jitter applied
     *                      to non-numeric x column values.  The default value
     *                      is '0.0'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#JITTER_Y
     *                      JITTER_Y}: Amplitude of vertical jitter applied to
     *                      non-numeric y column values.  The default value is
     *                      '0.0'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeImageChartRequest.StyleOptions#PLOT_ALL
     *                      PLOT_ALL}: If this options is set to "true", all
     *                      non-numeric column values are plotted ignoring
     *                      min_x, max_x, min_y and max_y parameters.  The
     *                      default value is 'false'.
     *                      </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeImageChartRequest.Options#IMAGE_ENCODING
     *                 IMAGE_ENCODING}: Encoding to be applied to the output
     *                 image. When using JSON serialization it is recommended
     *                 to specify this as {@code base64}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeImageChartRequest.Options#BASE64
     *                 BASE64}: Apply base64 encoding to the output image.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeImageChartRequest.Options#NONE
     *                 NONE}: Do not apply any additional encoding to the
     *                 output image.
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.VisualizeImageChartRequest.Options#NONE
     *                 NONE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeImageChartResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeImageChartResponse visualizeImageChart(String tableName, List<String> xColumnNames, List<String> yColumnNames, double minX, double maxX, double minY, double maxY, int width, int height, String bgColor, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageChartRequest actualRequest_ = new VisualizeImageChartRequest(tableName, xColumnNames, yColumnNames, minX, maxX, minY, maxY, width, height, bgColor, styleOptions, options);
        VisualizeImageChartResponse actualResponse_ = new VisualizeImageChartResponse();
        submitRequest("/visualize/image/chart", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageClassbreakResponse visualizeImageClassbreak(VisualizeImageClassbreakRequest request) throws GPUdbException {
        VisualizeImageClassbreakResponse actualResponse_ = new VisualizeImageClassbreakResponse();
        submitRequest("/visualize/image/classbreak", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageClassbreakResponse visualizeImageClassbreak(List<String> tableNames, List<String> worldTableNames, String xColumnName, String yColumnName, String geometryColumnName, List<List<String>> trackIds, String cbAttr, List<String> cbVals, String cbPointcolorAttr, List<String> cbPointcolorVals, String cbPointalphaAttr, List<String> cbPointalphaVals, String cbPointsizeAttr, List<String> cbPointsizeVals, String cbPointshapeAttr, List<String> cbPointshapeVals, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, Map<String, List<String>> styleOptions, Map<String, String> options, List<Integer> cbTransparencyVec) throws GPUdbException {
        VisualizeImageClassbreakRequest actualRequest_ = new VisualizeImageClassbreakRequest(tableNames, worldTableNames, xColumnName, yColumnName, geometryColumnName, trackIds, cbAttr, cbVals, cbPointcolorAttr, cbPointcolorVals, cbPointalphaAttr, cbPointalphaVals, cbPointsizeAttr, cbPointsizeVals, cbPointshapeAttr, cbPointshapeVals, minX, maxX, minY, maxY, width, height, projection, bgColor, styleOptions, options, cbTransparencyVec);
        VisualizeImageClassbreakResponse actualResponse_ = new VisualizeImageClassbreakResponse();
        submitRequest("/visualize/image/classbreak", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageContourResponse visualizeImageContour(VisualizeImageContourRequest request) throws GPUdbException {
        VisualizeImageContourResponse actualResponse_ = new VisualizeImageContourResponse();
        submitRequest("/visualize/image/contour", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageContourResponse visualizeImageContour(List<String> tableNames, String xColumnName, String yColumnName, String valueColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageContourRequest actualRequest_ = new VisualizeImageContourRequest(tableNames, xColumnName, yColumnName, valueColumnName, minX, maxX, minY, maxY, width, height, projection, styleOptions, options);
        VisualizeImageContourResponse actualResponse_ = new VisualizeImageContourResponse();
        submitRequest("/visualize/image/contour", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageHeatmapResponse visualizeImageHeatmap(VisualizeImageHeatmapRequest request) throws GPUdbException {
        VisualizeImageHeatmapResponse actualResponse_ = new VisualizeImageHeatmapResponse();
        submitRequest("/visualize/image/heatmap", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageHeatmapResponse visualizeImageHeatmap(List<String> tableNames, String xColumnName, String yColumnName, String valueColumnName, String geometryColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeImageHeatmapRequest actualRequest_ = new VisualizeImageHeatmapRequest(tableNames, xColumnName, yColumnName, valueColumnName, geometryColumnName, minX, maxX, minY, maxY, width, height, projection, styleOptions, options);
        VisualizeImageHeatmapResponse actualResponse_ = new VisualizeImageHeatmapResponse();
        submitRequest("/visualize/image/heatmap", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageLabelsResponse visualizeImageLabels(VisualizeImageLabelsRequest request) throws GPUdbException {
        VisualizeImageLabelsResponse actualResponse_ = new VisualizeImageLabelsResponse();
        submitRequest("/visualize/image/labels", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeImageLabelsResponse visualizeImageLabels(String tableName, String xColumnName, String yColumnName, String xOffset, String yOffset, String textString, String font, String textColor, String textAngle, String textScale, String drawBox, String drawLeader, String lineWidth, String lineColor, String fillColor, String leaderXColumnName, String leaderYColumnName, String filter, double minX, double maxX, double minY, double maxY, int width, int height, String projection, Map<String, String> options) throws GPUdbException {
        VisualizeImageLabelsRequest actualRequest_ = new VisualizeImageLabelsRequest(tableName, xColumnName, yColumnName, xOffset, yOffset, textString, font, textColor, textAngle, textScale, drawBox, drawLeader, lineWidth, lineColor, fillColor, leaderXColumnName, leaderYColumnName, filter, minX, maxX, minY, maxY, width, height, projection, options);
        VisualizeImageLabelsResponse actualResponse_ = new VisualizeImageLabelsResponse();
        submitRequest("/visualize/image/labels", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Generate an image containing isolines for travel results using an
     * existing graph. Isolines represent curves of equal cost, with cost
     * typically referring to the time or distance assigned as the weights of
     * the underlying graph. See <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> for more information on
     * graphs.
     * .
     * 
     * @param request  Request object containing the parameters for the
     *                 operation.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeIsochroneResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeIsochroneResponse visualizeIsochrone(VisualizeIsochroneRequest request) throws GPUdbException {
        VisualizeIsochroneResponse actualResponse_ = new VisualizeIsochroneResponse();
        submitRequest("/visualize/isochrone", request, actualResponse_, false);
        return actualResponse_;
    }



    /**
     * Generate an image containing isolines for travel results using an
     * existing graph. Isolines represent curves of equal cost, with cost
     * typically referring to the time or distance assigned as the weights of
     * the underlying graph. See <a
     * href="../../../../graph_solver/network_graph_solver.html"
     * target="_top">Network Graphs & Solvers</a> for more information on
     * graphs.
     * .
     * 
     * @param graphName  Name of the graph on which the isochrone is to be
     *                   computed.
     * @param sourceNode  Starting vertex on the underlying graph from/to which
     *                    the isochrones are created.
     * @param maxSolutionRadius  Extent of the search radius around {@code
     *                           sourceNode}. Set to '-1.0' for unrestricted
     *                           search radius.  The default value is -1.0.
     * @param weightsOnEdges  Additional weights to apply to the edges of an
     *                        existing graph. Weights must be specified using
     *                        <a
     *                        href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                        target="_top">identifiers</a>; identifiers are
     *                        grouped as <a
     *                        href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                        target="_top">combinations</a>. Identifiers can
     *                        be used with existing column names, e.g.,
     *                        'table.column AS WEIGHTS_EDGE_ID', or
     *                        expressions, e.g., 'ST_LENGTH(wkt) AS
     *                        WEIGHTS_VALUESPECIFIED'. Any provided weights
     *                        will be added (in the case of
     *                        'WEIGHTS_VALUESPECIFIED') to or multiplied with
     *                        (in the case of 'WEIGHTS_FACTORSPECIFIED') the
     *                        existing weight(s).  The default value is an
     *                        empty {@link List}.
     * @param restrictions  Additional restrictions to apply to the nodes/edges
     *                      of an existing graph. Restrictions must be
     *                      specified using <a
     *                      href="../../../../graph_solver/network_graph_solver.html#identifiers"
     *                      target="_top">identifiers</a>; identifiers are
     *                      grouped as <a
     *                      href="../../../../graph_solver/network_graph_solver.html#id-combos"
     *                      target="_top">combinations</a>. Identifiers can be
     *                      used with existing column names, e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID', or
     *                      expressions, e.g., 'column/2 AS
     *                      RESTRICTIONS_VALUECOMPARED'. If {@code
     *                      remove_previous_restrictions} is set to {@code
     *                      true}, any provided restrictions will replace the
     *                      existing restrictions. If {@code
     *                      remove_previous_restrictions} is set to {@code
     *                      false}, any provided restrictions will be added (in
     *                      the case of 'RESTRICTIONS_VALUECOMPARED') to or
     *                      replaced (in the case of
     *                      'RESTRICTIONS_ONOFFCOMPARED').  The default value
     *                      is an empty {@link List}.
     * @param numLevels  Number of equally-separated isochrones to compute.
     *                   The default value is 1.
     * @param generateImage  If set to {@code true}, generates a PNG image of
     *                       the isochrones in the response.
     *                       Supported values:
     *                       <ul>
     *                               <li> {@link
     *                       com.gpudb.protocol.VisualizeIsochroneRequest.GenerateImage#TRUE
     *                       TRUE}
     *                               <li> {@link
     *                       com.gpudb.protocol.VisualizeIsochroneRequest.GenerateImage#FALSE
     *                       FALSE}
     *                       </ul>
     *                       The default value is {@link
     *                       com.gpudb.protocol.VisualizeIsochroneRequest.GenerateImage#TRUE
     *                       TRUE}.
     * @param levelsTable  Name of the table to output the isochrones,
     *                     containing levels and their corresponding WKT
     *                     geometry. If no value is provided, the table is not
     *                     generated.  The default value is ''.
     * @param styleOptions  Various style related options of the isochrone
     *                      image.
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#LINE_SIZE
     *                      LINE_SIZE}: The width of the contour lines in
     *                      pixels.  The default value is '3'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#COLOR
     *                      COLOR}: Color of generated isolines. All color
     *                      values must be in the format RRGGBB or AARRGGBB (to
     *                      specify the alpha value). If alpha is specified and
     *                      flooded contours are enabled, it will be used for
     *                      as the transparency of the latter.  The default
     *                      value is 'FF696969'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BG_COLOR
     *                      BG_COLOR}: When {@code generateImage} is set to
     *                      {@code true}, background color of the generated
     *                      image. All color values must be in the format
     *                      RRGGBB or AARRGGBB (to specify the alpha value).
     *                      The default value is '00000000'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#TEXT_COLOR
     *                      TEXT_COLOR}: When {@code add_labels} is set to
     *                      {@code true}, color for the labels. All color
     *                      values must be in the format RRGGBB or AARRGGBB (to
     *                      specify the alpha value).  The default value is
     *                      'FF000000'.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#COLORMAP
     *                      COLORMAP}: Colormap for contours or fill-in regions
     *                      when applicable. All color values must be in the
     *                      format RRGGBB or AARRGGBB (to specify the alpha
     *                      value)
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#JET
     *                      JET}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#ACCENT
     *                      ACCENT}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#AFMHOT
     *                      AFMHOT}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#AUTUMN
     *                      AUTUMN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BINARY
     *                      BINARY}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BLUES
     *                      BLUES}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BONE
     *                      BONE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BRBG
     *                      BRBG}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BRG
     *                      BRG}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BUGN
     *                      BUGN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BUPU
     *                      BUPU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#BWR
     *                      BWR}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#CMRMAP
     *                      CMRMAP}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#COOL
     *                      COOL}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#COOLWARM
     *                      COOLWARM}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#COPPER
     *                      COPPER}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#CUBEHELIX
     *                      CUBEHELIX}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#DARK2
     *                      DARK2}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#FLAG
     *                      FLAG}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_EARTH
     *                      GIST_EARTH}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_GRAY
     *                      GIST_GRAY}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_HEAT
     *                      GIST_HEAT}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_NCAR
     *                      GIST_NCAR}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_RAINBOW
     *                      GIST_RAINBOW}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_STERN
     *                      GIST_STERN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GIST_YARG
     *                      GIST_YARG}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GNBU
     *                      GNBU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GNUPLOT2
     *                      GNUPLOT2}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GNUPLOT
     *                      GNUPLOT}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GRAY
     *                      GRAY}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GREENS
     *                      GREENS}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#GREYS
     *                      GREYS}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#HOT
     *                      HOT}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#HSV
     *                      HSV}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#INFERNO
     *                      INFERNO}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#MAGMA
     *                      MAGMA}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#NIPY_SPECTRAL
     *                      NIPY_SPECTRAL}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#OCEAN
     *                      OCEAN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#ORANGES
     *                      ORANGES}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#ORRD
     *                      ORRD}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PAIRED
     *                      PAIRED}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PASTEL1
     *                      PASTEL1}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PASTEL2
     *                      PASTEL2}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PINK
     *                      PINK}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PIYG
     *                      PIYG}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PLASMA
     *                      PLASMA}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PRGN
     *                      PRGN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PRISM
     *                      PRISM}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PUBU
     *                      PUBU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PUBUGN
     *                      PUBUGN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PUOR
     *                      PUOR}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PURD
     *                      PURD}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#PURPLES
     *                      PURPLES}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RAINBOW
     *                      RAINBOW}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RDBU
     *                      RDBU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RDGY
     *                      RDGY}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RDPU
     *                      RDPU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RDYLBU
     *                      RDYLBU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#RDYLGN
     *                      RDYLGN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#REDS
     *                      REDS}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SEISMIC
     *                      SEISMIC}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SET1
     *                      SET1}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SET2
     *                      SET2}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SET3
     *                      SET3}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SPECTRAL
     *                      SPECTRAL}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SPRING
     *                      SPRING}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#SUMMER
     *                      SUMMER}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#TERRAIN
     *                      TERRAIN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#VIRIDIS
     *                      VIRIDIS}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#WINTER
     *                      WINTER}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#WISTIA
     *                      WISTIA}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#YLGN
     *                      YLGN}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#YLGNBU
     *                      YLGNBU}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#YLORBR
     *                      YLORBR}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#YLORRD
     *                      YLORRD}
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.StyleOptions#JET
     *                      JET}.
     *                      </ul>
     * @param solveOptions  Solver specific parameters
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *                      REMOVE_PREVIOUS_RESTRICTIONS}: Ignore the
     *                      restrictions applied to the graph during the
     *                      creation stage and only use the restrictions
     *                      specified in this request if set to {@code true}.
     *                      Supported values:
     *                      <ul>
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#TRUE
     *                      TRUE}
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#FALSE
     *                      FALSE}
     *                      </ul>
     *                      The default value is {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#FALSE
     *                      FALSE}.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *                      RESTRICTION_THRESHOLD_VALUE}: Value-based
     *                      restriction comparison. Any node or edge with a
     *                      'RESTRICTIONS_VALUECOMPARED' value greater than the
     *                      {@code restriction_threshold_value} will not be
     *                      included in the solution.
     *                              <li> {@link
     *                      com.gpudb.protocol.VisualizeIsochroneRequest.SolveOptions#UNIFORM_WEIGHTS
     *                      UNIFORM_WEIGHTS}: When specified, assigns the given
     *                      value to all the edges in the graph. Note that
     *                      weights provided in {@code weightsOnEdges} will
     *                      override this value.
     *                      </ul>
     *                      The default value is an empty {@link Map}.
     * @param contourOptions  Solver specific parameters
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#PROJECTION
     *                        PROJECTION}: Spatial Reference System (i.e. EPSG
     *                        Code).
     *                        Supported values:
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#_3857
     *                        _3857}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#_102100
     *                        _102100}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#_900913
     *                        _900913}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#EPSG_4326
     *                        EPSG_4326}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#PLATE_CARREE
     *                        PLATE_CARREE}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#EPSG_900913
     *                        EPSG_900913}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#EPSG_102100
     *                        EPSG_102100}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#EPSG_3857
     *                        EPSG_3857}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#WEB_MERCATOR
     *                        WEB_MERCATOR}
     *                        </ul>
     *                        The default value is {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#PLATE_CARREE
     *                        PLATE_CARREE}.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#WIDTH
     *                        WIDTH}: When {@code generateImage} is set to
     *                        {@code true}, width of the generated image.  The
     *                        default value is '512'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#HEIGHT
     *                        HEIGHT}: When {@code generateImage} is set to
     *                        {@code true}, height of the generated image. If
     *                        the default value is used, the {@code height} is
     *                        set to the value resulting from multiplying the
     *                        aspect ratio by the {@code width}.  The default
     *                        value is '-1'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#SEARCH_RADIUS
     *                        SEARCH_RADIUS}: When interpolating the graph
     *                        solution to generate the isochrone, neighborhood
     *                        of influence of sample data (in percent of the
     *                        image/grid).  The default value is '20'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#GRID_SIZE
     *                        GRID_SIZE}: When interpolating the graph solution
     *                        to generate the isochrone, number of subdivisions
     *                        along the x axis when building the grid (the y is
     *                        computed using the aspect ratio of the output
     *                        image).  The default value is '100'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#COLOR_ISOLINES
     *                        COLOR_ISOLINES}: Color each isoline according to
     *                        the colormap; otherwise, use the foreground
     *                        color.
     *                        Supported values:
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#TRUE
     *                        TRUE}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#FALSE
     *                        FALSE}
     *                        </ul>
     *                        The default value is {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#TRUE
     *                        TRUE}.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#ADD_LABELS
     *                        ADD_LABELS}: If set to {@code true}, add labels
     *                        to the isolines.
     *                        Supported values:
     *                        <ul>
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#TRUE
     *                        TRUE}
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#FALSE
     *                        FALSE}
     *                        </ul>
     *                        The default value is {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#FALSE
     *                        FALSE}.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_FONT_SIZE
     *                        LABELS_FONT_SIZE}: When {@code add_labels} is set
     *                        to {@code true}, size of the font (in pixels) to
     *                        use for labels.  The default value is '12'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_FONT_FAMILY
     *                        LABELS_FONT_FAMILY}: When {@code add_labels} is
     *                        set to {@code true}, font name to be used when
     *                        adding labels.  The default value is 'arial'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_SEARCH_WINDOW
     *                        LABELS_SEARCH_WINDOW}: When {@code add_labels} is
     *                        set to {@code true}, a search window is used to
     *                        rate the local quality of each isoline. Smooth,
     *                        continuous, long stretches with relatively flat
     *                        angles are favored. The provided value is
     *                        multiplied by the {@code labels_font_size} to
     *                        calculate the final window size.  The default
     *                        value is '4'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_INTRALEVEL_SEPARATION
     *                        LABELS_INTRALEVEL_SEPARATION}: When {@code
     *                        add_labels} is set to {@code true}, this value
     *                        determines the  distance (in multiples of the
     *                        {@code labels_font_size}) to use when separating
     *                        labels of different values.  The default value is
     *                        '4'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_INTERLEVEL_SEPARATION
     *                        LABELS_INTERLEVEL_SEPARATION}: When {@code
     *                        add_labels} is set to {@code true}, this value
     *                        determines the distance (in percent of the total
     *                        window size) to use when separating labels of the
     *                        same value.  The default value is '20'.
     *                                <li> {@link
     *                        com.gpudb.protocol.VisualizeIsochroneRequest.ContourOptions#LABELS_MAX_ANGLE
     *                        LABELS_MAX_ANGLE}: When {@code add_labels} is set
     *                        to {@code true}, maximum angle (in degrees) from
     *                        the vertical to use when adding labels.  The
     *                        default value is '60'.
     *                        </ul>
     *                        The default value is an empty {@link Map}.
     * @param options  Additional parameters
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#SOLVE_TABLE
     *                 SOLVE_TABLE}: Name of the table to host intermediate
     *                 solve results containing the position and cost for each
     *                 vertex in the graph. If the default value is used, a
     *                 temporary table is created and deleted once the solution
     *                 is calculated.  The default value is ''.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#IS_REPLICATED
     *                 IS_REPLICATED}: If set to {@code true}, replicate the
     *                 {@code solve_table}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#DATA_MIN_X
     *                 DATA_MIN_X}: Lower bound for the x values. If not
     *                 provided, it will be computed from the bounds of the
     *                 input data.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#DATA_MAX_X
     *                 DATA_MAX_X}: Upper bound for the x values. If not
     *                 provided, it will be computed from the bounds of the
     *                 input data.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#DATA_MIN_Y
     *                 DATA_MIN_Y}: Lower bound for the y values. If not
     *                 provided, it will be computed from the bounds of the
     *                 input data.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#DATA_MAX_Y
     *                 DATA_MAX_Y}: Upper bound for the y values. If not
     *                 provided, it will be computed from the bounds of the
     *                 input data.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#CONCAVITY_LEVEL
     *                 CONCAVITY_LEVEL}: Factor to qualify the concavity of the
     *                 isochrone curves. The lower the value, the more convex
     *                 (with '0' being completely convex and '1' being the most
     *                 concave).  The default value is '0.5'.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#USE_PRIORITY_QUEUE_SOLVERS
     *                 USE_PRIORITY_QUEUE_SOLVERS}: sets the solver methods
     *                 explicitly if true
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#TRUE
     *                 TRUE}: uses the solvers scheduled for 'shortest_path'
     *                 and 'inverse_shortest_path' based on solve_direction
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#FALSE
     *                 FALSE}: uses the solvers 'priority_queue' and
     *                 'inverse_priority_queue' based on solve_direction
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#SOLVE_DIRECTION
     *                 SOLVE_DIRECTION}: Specify whether we are going to the
     *                 source node, or starting from it.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#FROM_SOURCE
     *                 FROM_SOURCE}: Shortest path to get to the source
     *                 (inverse Dijkstra)
     *                         <li> {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#TO_SOURCE
     *                 TO_SOURCE}: Shortest path to source (Dijkstra)
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.VisualizeIsochroneRequest.Options#FROM_SOURCE
     *                 FROM_SOURCE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return Response object containing the results of the operation.
     * 
     * @see  VisualizeIsochroneResponse
     * 
     * @throws GPUdbException  if an error occurs during the operation.
     * 
     */
    public VisualizeIsochroneResponse visualizeIsochrone(String graphName, String sourceNode, double maxSolutionRadius, List<String> weightsOnEdges, List<String> restrictions, int numLevels, boolean generateImage, String levelsTable, Map<String, String> styleOptions, Map<String, String> solveOptions, Map<String, String> contourOptions, Map<String, String> options) throws GPUdbException {
        VisualizeIsochroneRequest actualRequest_ = new VisualizeIsochroneRequest(graphName, sourceNode, maxSolutionRadius, weightsOnEdges, restrictions, numLevels, generateImage, levelsTable, styleOptions, solveOptions, contourOptions, options);
        VisualizeIsochroneResponse actualResponse_ = new VisualizeIsochroneResponse();
        submitRequest("/visualize/isochrone", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoResponse visualizeVideo(VisualizeVideoRequest request) throws GPUdbException {
        VisualizeVideoResponse actualResponse_ = new VisualizeVideoResponse();
        submitRequest("/visualize/video", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoResponse visualizeVideo(List<String> tableNames, List<String> worldTableNames, List<List<String>> trackIds, String xColumnName, String yColumnName, String geometryColumnName, double minX, double maxX, double minY, double maxY, int width, int height, String projection, long bgColor, List<List<Double>> timeIntervals, String videoStyle, String sessionKey, Map<String, List<String>> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeVideoRequest actualRequest_ = new VisualizeVideoRequest(tableNames, worldTableNames, trackIds, xColumnName, yColumnName, geometryColumnName, minX, maxX, minY, maxY, width, height, projection, bgColor, timeIntervals, videoStyle, sessionKey, styleOptions, options);
        VisualizeVideoResponse actualResponse_ = new VisualizeVideoResponse();
        submitRequest("/visualize/video", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoHeatmapResponse visualizeVideoHeatmap(VisualizeVideoHeatmapRequest request) throws GPUdbException {
        VisualizeVideoHeatmapResponse actualResponse_ = new VisualizeVideoHeatmapResponse();
        submitRequest("/visualize/video/heatmap", request, actualResponse_, false);
        return actualResponse_;
    }



    public VisualizeVideoHeatmapResponse visualizeVideoHeatmap(List<String> tableNames, String xColumnName, String yColumnName, double minX, double maxX, double minY, double maxY, List<List<Double>> timeIntervals, int width, int height, String projection, String videoStyle, String sessionKey, Map<String, String> styleOptions, Map<String, String> options) throws GPUdbException {
        VisualizeVideoHeatmapRequest actualRequest_ = new VisualizeVideoHeatmapRequest(tableNames, xColumnName, yColumnName, minX, maxX, minY, maxY, timeIntervals, width, height, projection, videoStyle, sessionKey, styleOptions, options);
        VisualizeVideoHeatmapResponse actualResponse_ = new VisualizeVideoHeatmapResponse();
        submitRequest("/visualize/video/heatmap", actualRequest_, actualResponse_, false);
        return actualResponse_;
    }


}